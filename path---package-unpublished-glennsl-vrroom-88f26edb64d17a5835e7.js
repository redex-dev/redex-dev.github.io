webpackJsonp([23057019282905],{1388:function(s,e){s.exports={data:{package:{type:"unpublished",id:"unpublished/glennsl/vrroom",name:"glennsl/vrroom",version:"0.3.0",category:"library",flags:[],platforms:["browser"],description:"A collection of mostly experimental tools and utilities for effective ReasonReact development",keywords:["react","utilities"],license:"MIT",updated:"2019-05-04T14:14:55.017Z",stars:26,score:0,quality:0,popularity:0,maintenance:0,readme:'<h1 id="vrroom---turbo-charged-reasonreact"><a href="#vrroom---turbo-charged-reasonreact" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>vRRoom - Turbo-charged ReasonReact!</h1>\n<p>A collection of mostly experimental tools and utilities for effective ReasonReact development.</p>\n<h2 id="installation"><a href="#installation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>\n<p>Run <code>npm install --save glennsl/vrroom</code> and add <code>vrroom</code> to <code>bs-dependencies</code> in <code>bsconfig.json</code>. </p>\n<h2 id="usage"><a href="#usage" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>\n<p>If you\'re not too afraid of polluting your namespace, the most convenient way to use Vrroom is to <code>open Vrroom</code> at the\ntop of the module. Otherwise, to avoid polluting the namespace, using <code>module V = Vrroom</code> is recommended.</p>\n<h2 id="examples"><a href="#examples" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>\n<h4 id="controlmap"><a href="#controlmap" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Control.Map</h4>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-comment">/* Without Control.Map */</span>\n{\n  <span class="hljs-keyword">switch</span> noItems {\n  | [||] =&gt; &lt;<span class="hljs-type">Item</span> label=<span class="hljs-string">"."</span> /&gt;\n  | items =&gt; \n    items |&gt; <span class="hljs-type">Array</span>.<span class="hljs-built_in">map</span>(name =&gt; &lt;<span class="hljs-type">Item</span> label=name /&gt;)\n          |&gt; <span class="hljs-type">ReasonReact</span>.array\n  }  \n}\n\n<span class="hljs-comment">/* With Control.Map */</span>\n&lt;<span class="hljs-type">Control</span>.<span class="hljs-type">Map</span> items=noItems empty=&lt;<span class="hljs-type">Item</span> label=<span class="hljs-string">"-"</span>/&gt; &gt;\n  ...(name =&gt; &lt;<span class="hljs-type">Item</span> label=name /&gt;)\n&lt;/<span class="hljs-type">Control</span>.<span class="hljs-type">Map</span>&gt;</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2310</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n<h4 id="controlifsome"><a href="#controlifsome" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Control.IfSome</h4>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-comment">/* Without Control.IfSome */</span>\n{\n  <span class="hljs-keyword">switch</span> maybeError {\n  | <span class="hljs-type">Some</span>(error) =&gt; error |&gt; text\n  | <span class="hljs-type">None</span>        =&gt; nothing\n  }\n}\n\n<span class="hljs-comment">/* With Control.IfSome */</span>\n&lt;<span class="hljs-type">Control</span>.<span class="hljs-type">IfSome</span> option=maybeError&gt;\n  ...(error =&gt; error |&gt; text)\n&lt;/<span class="hljs-type">Control</span>.<span class="hljs-type">IfSome</span>&gt;</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2310</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n<h4 id="pure"><a href="#pure" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>pure</h4>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-comment">/* Without pure */</span>\n<span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">ItemBefore</span> = </span>{\n  <span class="hljs-keyword">let</span> instance = <span class="hljs-type">ReasonReact</span>.statelessComponent(<span class="hljs-string">"Item"</span>);\n  <span class="hljs-keyword">let</span> make = (~label, _children) =&gt; {\n    ...instance,\n    render: _self =&gt;\n      &lt;li&gt; (label |&gt; text) &lt;/li&gt;\n  }\n};\n\n<span class="hljs-comment">/* With pure */</span>\n<span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">Item</span> = </span>{\n  <span class="hljs-keyword">let</span> make = pure((render, ~label) =&gt; render(\n    &lt;li&gt; (label |&gt; text) &lt;/li&gt;\n  ));\n};</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">module</span> <span class="hljs-type">ItemBefore</span> =\n  <span class="hljs-keyword">struct</span>\n    <span class="hljs-keyword">let</span> instance = <span class="hljs-type">ReasonReact</span>.statelessComponent <span class="hljs-string">"Item"</span>\n    <span class="hljs-keyword">let</span> make ~label  _children =\n      {\n        instance <span class="hljs-keyword">with</span>\n        render = (<span class="hljs-keyword">fun</span> _self  -&gt; ((li ~children:[label |&gt; text] <span class="hljs-literal">()</span>)[@<span class="hljs-type">JSX</span> ]))\n      }\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">module</span> <span class="hljs-type">Item</span> =\n  <span class="hljs-keyword">struct</span>\n    <span class="hljs-keyword">let</span> make =\n      pure\n        (<span class="hljs-keyword">fun</span> render  -&gt;\n           <span class="hljs-keyword">fun</span> ~label  -&gt; render ((li ~children:[label |&gt; text] <span class="hljs-literal">()</span>)[@<span class="hljs-type">JSX</span> ]))\n  <span class="hljs-keyword">end</span></code></pre>\n      </div>\n    </div>\n  \n<p>See more examples in <a href="https://github.com/glennsl/vrroom/tree/master/examples">the examples folder</a></p>\n<h2 id="documentation"><a href="#documentation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Documentation</h2>\n<h4 id="type-childless--arraynothing"><a href="#type-childless--arraynothing" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>type childless = array(nothing)</h4>\n<p>Used to indicate and enforce a childless component by making it impossible to add children without circumventing the type system, since <code>nothing</code> is an abstract type with no way to construct a value.</p>\n<p>Example:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> make = (<span class="hljs-number">_</span>:childless) =&gt; ...</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">937</span>: &lt;<span class="hljs-type">UNKNOWN</span> <span class="hljs-type">SYNTAX</span> <span class="hljs-type">ERROR</span>&gt;</code></pre>\n      </div>\n    </div>\n  \n<h4 id="let-text--string--reasonreactreactelement"><a href="#let-text--string--reasonreactreactelement" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>let text : string => ReasonReact.reactElement</h4>\n<p>Alias for <code>Text.string</code> and therefore <code>ReasonReact.string</code>.</p>\n<p>Example:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>&lt;div&gt; {<span class="hljs-string">"Hello!"</span> |&gt; text} &lt;/div&gt;</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> _ = ((div ~children:[<span class="hljs-string">"Hello!"</span> |&gt; text] <span class="hljs-literal">()</span>)[@<span class="hljs-type">JSX</span> ])</code></pre>\n      </div>\n    </div>\n  \n<h4 id="let-nothing--reasonreactreactelement"><a href="#let-nothing--reasonreactreactelement" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>let nothing : ReasonReact.reactElement</h4>\n<p>Alias for <code>ReasonReact.null</code>.</p>\n<p>Example:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>&lt;div&gt; {isAwkward ? nothing : text(<span class="hljs-string">"Hello!"</span>)} &lt;/div&gt;</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> _ =\n  ((div\n      ~children:[(<span class="hljs-keyword">match</span> isAwkward <span class="hljs-keyword">with</span>\n                  | <span class="hljs-literal">true</span>  -&gt; nothing\n                  | <span class="hljs-literal">false</span>  -&gt; text <span class="hljs-string">"Hello!"</span>)] <span class="hljs-literal">()</span>)[@<span class="hljs-type">JSX</span> ])</code></pre>\n      </div>\n    </div>\n  \n<h4 id="let-nbsp--reasonreactreactelement"><a href="#let-nbsp--reasonreactreactelement" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>let nbsp : ReasonReact.reactElement</h4>\n<p>Insert a <code>&#x26;nbsp;</code> (actually the unicode equivalent since React escapes HTML entities). Useful to avoid some elements mysteriously disappearing when empty (or more likely containing <code>nothing</code>).</p>\n<p>Example:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>&lt;div&gt; {isAwkward ? nbsp : text(<span class="hljs-string">"Hello!"</span>)} &lt;/div&gt;</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> _ =\n  ((div\n      ~children:[(<span class="hljs-keyword">match</span> isAwkward <span class="hljs-keyword">with</span>\n                  | <span class="hljs-literal">true</span>  -&gt; nbsp\n                  | <span class="hljs-literal">false</span>  -&gt; text <span class="hljs-string">"Hello!"</span>)] <span class="hljs-literal">()</span>)[@<span class="hljs-type">JSX</span> ])</code></pre>\n      </div>\n    </div>\n  \n<h4 id="let-pure--reasonreactreactelement-childless--reasonreactcomponentreasonreactstateless-reasonreactnoretainedprops-reasonreactactionless--a--a"><a href="#let-pure--reasonreactreactelement-childless--reasonreactcomponentreasonreactstateless-reasonreactnoretainedprops-reasonreactactionless--a--a" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>let pure : (((ReasonReact.reactElement, childless) => ReasonReact.component(ReasonReact.stateless ReasonReact.noRetainedProps, ReasonReact.actionless)) => \'a) => \'a</h4>\n<p>An experimental convenience function for creating a "functional" stateless component.</p>\n<p>Example:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>modul <span class="hljs-type">Item</span> = {\n  <span class="hljs-keyword">let</span> make = pure((render, ~label) =&gt; render(\n    &lt;li&gt; (label |&gt; text) &lt;/li&gt;\n  ));\n};</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2310</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n<h3 id="module-text"><a href="#module-text" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>module Text</h3>\n<h4 id="let-textstring--string--reasonreactreactelement"><a href="#let-textstring--string--reasonreactreactelement" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>let Text.string : string => ReasonReact.reactElement</h4>\n<p>Alias for <code>ReasonReact.string</code>.</p>\n<p>Example:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>&lt;div&gt; {<span class="hljs-string">"Hello!"</span> |&gt; <span class="hljs-type">Text</span>.string} &lt;/div&gt;</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> _ = ((div ~children:[<span class="hljs-string">"Hello!"</span> |&gt; <span class="hljs-type">Text</span>.<span class="hljs-built_in">string</span>] <span class="hljs-literal">()</span>)[@<span class="hljs-type">JSX</span> ])</code></pre>\n      </div>\n    </div>\n  \n<h4 id="let-textint--int--reasonreactreactelement"><a href="#let-textint--int--reasonreactreactelement" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>let Text.int : int => ReasonReact.reactElement</h4>\n<p>Would be an alias for <code>ReasonReact.intToElement</code> if it had existed.</p>\n<p>Example:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>&lt;div&gt; {<span class="hljs-number">42</span> |&gt; <span class="hljs-type">Text</span>.int} &lt;/div&gt;</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> _ = ((div ~children:[<span class="hljs-number">42</span> |&gt; <span class="hljs-type">Text</span>.<span class="hljs-built_in">int</span>] <span class="hljs-literal">()</span>)[@<span class="hljs-type">JSX</span> ])</code></pre>\n      </div>\n    </div>\n  \n<h4 id="let-textfloat--float--reasonreactreactelement"><a href="#let-textfloat--float--reasonreactreactelement" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>let Text.float : float => ReasonReact.reactElement</h4>\n<p>Would be an alias for <code>ReasonReact.floatToElement</code> if it had existed.</p>\n<p>Example:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>&lt;div&gt; {<span class="hljs-number">4.2</span> |&gt; <span class="hljs-type">Text</span>.float} &lt;/div&gt;</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> _ = ((div ~children:[<span class="hljs-number">4.2</span> |&gt; <span class="hljs-type">Text</span>.<span class="hljs-built_in">float</span>] <span class="hljs-literal">()</span>)[@<span class="hljs-type">JSX</span> ])</code></pre>\n      </div>\n    </div>\n  \n<h4 id="let-textany--_--reasonreactreactelement"><a href="#let-textany--_--reasonreactreactelement" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>let Text.any : _ => ReasonReact.reactElement</h4>\n<p>Converts anything to a string, then casts it as an element.</p>\n<p>Example:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>&lt;div&gt; {[<span class="hljs-string">"Hello"</span>, <span class="hljs-string">"brother!"</span>] |&gt; <span class="hljs-type">Text</span>.any} &lt;/div&gt;</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> _ = ((div ~children:[[<span class="hljs-string">"Hello"</span>; <span class="hljs-string">"brother!"</span>] |&gt; <span class="hljs-type">Text</span>.any] <span class="hljs-literal">()</span>)[@<span class="hljs-type">JSX</span> ])</code></pre>\n      </div>\n    </div>\n  \n<h3 id="module-classname"><a href="#module-classname" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>module ClassName</h3>\n<h4 id="let-classnamejoin--liststring--string"><a href="#let-classnamejoin--liststring--string" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>let ClassName.join : list(string) => string</h4>\n<p>Joins a list of strings into a single space-separated string, ignoring empty string.</p>\n<p>Example:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>&lt;div className=<span class="hljs-type">ClassName</span>.<span class="hljs-built_in">join</span>([<span class="hljs-string">"button"</span>, <span class="hljs-string">"primary"</span>])&gt; ... &lt;/div&gt;</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">1244</span>: &lt;<span class="hljs-type">UNKNOWN</span> <span class="hljs-type">SYNTAX</span> <span class="hljs-type">ERROR</span>&gt;</code></pre>\n      </div>\n    </div>\n  \n<h4 id="let-classnameif_--bool-string--string"><a href="#let-classnameif_--bool-string--string" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>let ClassName.if_ : (bool, string) => string</h4>\n<p>Returns the given string if condition is true, otherwise an empty string. Most useful in conjunction with thje <code>join</code> function.</p>\n<p>Example:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>&lt;div className=<span class="hljs-type">ClassName</span>.(<span class="hljs-built_in">join</span>([<span class="hljs-string">"button"</span>, <span class="hljs-string">"s-hover"</span> |&gt; if_(isHovered)]))&gt; ... &lt;/div&gt;</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">1244</span>: &lt;<span class="hljs-type">UNKNOWN</span> <span class="hljs-type">SYNTAX</span> <span class="hljs-type">ERROR</span>&gt;</code></pre>\n      </div>\n    </div>\n  \n<h4 id="let-classnamefromoption--optionstring--string"><a href="#let-classnamefromoption--optionstring--string" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>let ClassName.fromOption : option(string) => string</h4>\n<p>Returns the contained string if any, otherwise an empty string. Most useful in conjunction with thje <code>join</code> function.</p>\n<p>Example:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>&lt;div className=<span class="hljs-type">ClassName</span>.(<span class="hljs-built_in">join</span>([<span class="hljs-string">"button"</span>, maybeError |&gt; fromOption]))&gt; ... &lt;/div&gt;</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">1244</span>: &lt;<span class="hljs-type">UNKNOWN</span> <span class="hljs-type">SYNTAX</span> <span class="hljs-type">ERROR</span>&gt;</code></pre>\n      </div>\n    </div>\n  \n<h4 id="fragment-arrayreasonreactreactelement-fragment"><a href="#fragment-arrayreasonreactreactelement-fragment" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>&#x3C;Fragment> array(ReasonReact.reactElement) &#x3C;/Fragment></h4>\n<p>Binding to the standard <a href="https://reactjs.org/docs/fragments.html">React Fragment</a> component. Renders its children without a surrounding DOM element.</p>\n<p>Example:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>&lt;tr&gt; ... &lt;/tr&gt;\n&lt;<span class="hljs-type">Fragment</span>&gt;\n  &lt;tr&gt; ... &lt;/tr&gt;\n  &lt;tr&gt; ... &lt;/tr&gt;\n&lt;/<span class="hljs-type">Fragment</span>&gt;\n&lt;tr&gt; ... &lt;/tr&gt;</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">1244</span>: &lt;<span class="hljs-type">UNKNOWN</span> <span class="hljs-type">SYNTAX</span> <span class="hljs-type">ERROR</span>&gt;</code></pre>\n      </div>\n    </div>\n  \n<h4 id="controlmap-itemsarraya-emptyreasonreactreactelement-a--reasonreactreactelement-controlmap"><a href="#controlmap-itemsarraya-emptyreasonreactreactelement-a--reasonreactreactelement-controlmap" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>&#x3C;Control.Map items=array(\'a) ?empty=ReasonReact.reactElement> ...(\'a => ReasonReact.reactElement) &#x3C;/Control.Map></h4>\n<p>Renders each item in <code>items</code> using the given render function, or if the array is empty, the given <code>empty</code> element or <code>nothing</code> if oomitted.</p>\n<p>Example:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>&lt;<span class="hljs-type">Control</span>.<span class="hljs-type">Map</span> items=[|<span class="hljs-string">"apple"</span>, <span class="hljs-string">"banana"</span>|] empty=&lt;<span class="hljs-type">Item</span> label=<span class="hljs-string">"-"</span>/&gt; &gt;\n  ...(name =&gt; &lt;<span class="hljs-type">Item</span> label=name /&gt;)\n&lt;/<span class="hljs-type">Control</span>.<span class="hljs-type">Map</span>&gt;</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> _ =\n  ((<span class="hljs-type">Control</span>.<span class="hljs-type">Map</span>.createElement ~items:[|<span class="hljs-string">"apple"</span>;<span class="hljs-string">"banana"</span>|]\n      ~empty:((<span class="hljs-type">Item</span>.createElement ~label:<span class="hljs-string">"-"</span> ~children:<span class="hljs-literal">[]</span> <span class="hljs-literal">()</span>)[@<span class="hljs-type">JSX</span> ])\n      ~children:(<span class="hljs-keyword">fun</span> name  -&gt;\n                   ((<span class="hljs-type">Item</span>.createElement ~label:name ~children:<span class="hljs-literal">[]</span> <span class="hljs-literal">()</span>)[@<span class="hljs-type">JSX</span> ]))\n      <span class="hljs-literal">()</span>)[@<span class="hljs-type">JSX</span> ])</code></pre>\n      </div>\n    </div>\n  \n<h4 id="controlmaplist-itemslista-emptyreasonreactreactelement-a--reasonreactreactelement-controlmaplist"><a href="#controlmaplist-itemslista-emptyreasonreactreactelement-a--reasonreactreactelement-controlmaplist" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>&#x3C;Control.MapList items=list(\'a) ?empty=ReasonReact.reactElement> ...(\'a => ReasonReact.reactElement) &#x3C;/Control.MapList></h4>\n<p>Renders each item in <code>items</code> using the given render function, or if the list is empty, the given <code>empty</code> element or <code>nothing</code> if oomitted.</p>\n<p>Example:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>&lt;<span class="hljs-type">Control</span>.<span class="hljs-type">MapList</span> items=[<span class="hljs-string">"apple"</span>, <span class="hljs-string">"banana"</span>] empty=&lt;<span class="hljs-type">Item</span> label=<span class="hljs-string">"-"</span>/&gt; &gt;\n  ...(name =&gt; &lt;<span class="hljs-type">Item</span> label=name /&gt;)\n&lt;/<span class="hljs-type">Control</span>.<span class="hljs-type">MapList</span>&gt;</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> _ =\n  ((<span class="hljs-type">Control</span>.<span class="hljs-type">MapList</span>.createElement ~items:[<span class="hljs-string">"apple"</span>; <span class="hljs-string">"banana"</span>]\n      ~empty:((<span class="hljs-type">Item</span>.createElement ~label:<span class="hljs-string">"-"</span> ~children:<span class="hljs-literal">[]</span> <span class="hljs-literal">()</span>)[@<span class="hljs-type">JSX</span> ])\n      ~children:(<span class="hljs-keyword">fun</span> name  -&gt;\n                   ((<span class="hljs-type">Item</span>.createElement ~label:name ~children:<span class="hljs-literal">[]</span> <span class="hljs-literal">()</span>)[@<span class="hljs-type">JSX</span> ]))\n      <span class="hljs-literal">()</span>)[@<span class="hljs-type">JSX</span> ])</code></pre>\n      </div>\n    </div>\n  \n<h4 id="controlif-condbool-unit--reasonreactreactelement-controlif"><a href="#controlif-condbool-unit--reasonreactreactelement-controlif" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>&#x3C;Control.If cond=bool> ...(unit => ReasonReact.reactElement) &#x3C;/Control.If></h4>\n<p>Renders the element returned by the render function if <code>cond</code> is true, otherwise <code>nothing</code>.</p>\n<p>Example:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>&lt;<span class="hljs-type">Control</span>.<span class="hljs-type">If</span> cond=showHello&gt;\n    ...(() =&gt; <span class="hljs-string">"Hello"</span> |&gt; text)\n&lt;/<span class="hljs-type">Control</span>.<span class="hljs-type">If</span>&gt;</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> _ =\n  ((<span class="hljs-type">Control</span>.<span class="hljs-type">If</span>.createElement ~cond:showHello\n      ~children:(<span class="hljs-keyword">fun</span> <span class="hljs-literal">()</span>  -&gt; <span class="hljs-string">"Hello"</span> |&gt; text) <span class="hljs-literal">()</span>)[@<span class="hljs-type">JSX</span> ])</code></pre>\n      </div>\n    </div>\n  \n<h4 id="controlifsome-optionoptiona-a--reasonreactreactelement-controlifsome"><a href="#controlifsome-optionoptiona-a--reasonreactreactelement-controlifsome" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>&#x3C;Control.IfSome option=option(\'a)> ...(\'a => ReasonReact.reactElement) &#x3C;/Control.IfSome></h4>\n<p>Calls the render function with the contained item in <code>option</code>  if any, and renders the returned element, otherwise <code>nothing</code>.</p>\n<p>Example:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>&lt;<span class="hljs-type">Control</span>.<span class="hljs-type">IfSome</span> option=maybeError&gt;\n  ...(error =&gt; error |&gt; text)\n&lt;/<span class="hljs-type">Control</span>.<span class="hljs-type">IfSome</span>&gt;</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> _ =\n  ((<span class="hljs-type">Control</span>.<span class="hljs-type">IfSome</span>.createElement ~option:maybeError\n      ~children:(<span class="hljs-keyword">fun</span> error  -&gt; error |&gt; text) <span class="hljs-literal">()</span>)[@<span class="hljs-type">JSX</span> ])</code></pre>\n      </div>\n    </div>\n  \n',
homepageUrl:"https://github.com/glennsl/vrroom#readme",repositoryUrl:"https://github.com/glennsl/vrroom",npmUrl:null,issuesUrl:"https://github.com/glennsl/vrroom/issues",slug:"/package/unpublished/glennsl/vrroom"}},pathContext:{id:"unpublished/glennsl/vrroom"}}}});
//# sourceMappingURL=path---package-unpublished-glennsl-vrroom-88f26edb64d17a5835e7.js.map