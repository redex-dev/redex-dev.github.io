{"version":3,"sources":["webpack:///path---package-reason-promise-ffd6d595756ecb6353c5.js","webpack:///./.cache/json/package-reason-promise.json"],"names":["webpackJsonp","1381","module","exports","data","package","type","id","name","version","category","flags","platforms","description","keywords","license","updated","stars","score","quality","popularity","maintenance","readme","homepageUrl","repositoryUrl","npmUrl","issuesUrl","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,SAAWC,KAAA,YAAAC,GAAA,iBAAAC,KAAA,iBAAAC,QAAA,QAAAC,SAAA,UAAAC,SAAAC,WAAA,2BAAAC,YAAA,6CAAAC,UAAA,SAAAC,QAAA,MAAAC,QAAA,2BAAAC,MAAA,IAAAC,MAAA,gBAAAC,QAAA,kBAAAC,WAAA,mBAAAC,YAAA,kBAAAC,OAAA;AAA4kzDC,YAAA,qCAAAC,cAAA,qCAAAC,OAAA,+CAAAC,UAAA,4CAAAC,KAAA,4BAAkqEC,aAAgBrB,GAAA","file":"path---package-reason-promise-ffd6d595756ecb6353c5.js","sourcesContent":["webpackJsonp([127111391366410],{\n\n/***/ 1381:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"package\":{\"type\":\"published\",\"id\":\"reason-promise\",\"name\":\"reason-promise\",\"version\":\"1.1.1\",\"category\":\"binding\",\"flags\":[],\"platforms\":[\"browser\",\"node\",\"native\"],\"description\":\"Light and type-safe binding to JS promises\",\"keywords\":[\"async\"],\"license\":\"MIT\",\"updated\":\"2020-06-21T13:20:01.408Z\",\"stars\":274,\"score\":0.67959580125452,\"quality\":0.9327981663728103,\"popularity\":0.14221078354463446,\"maintenance\":0.9999502202915855,\"readme\":\"<h1 id=\\\"promise-----version-travis-status-coverage\\\"><a href=\\\"#promise-----version-travis-status-coverage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Promise     <a href=\\\"https://github.com/aantron/promise/releases\\\"><img src=\\\"https://img.shields.io/badge/version-1.1.1-blue.svg\\\" alt=\\\"Version\\\"></a> <a href=\\\"https://travis-ci.org/aantron/promise/branches\\\"><img src=\\\"https://img.shields.io/travis/aantron/promise/master.svg?label=travis\\\" alt=\\\"Travis status\\\"></a> <a href=\\\"https://coveralls.io/github/aantron/promise?branch=master\\\"><img src=\\\"https://img.shields.io/coveralls/aantron/promise/master.svg\\\" alt=\\\"Coverage\\\"></a></h1>\\n<p>A lightweight, type-safe binding to JS promises:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-type\\\">Promise</span>.resolved(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>));  <span class=\\\"hljs-comment\\\">/* Promise { 'Hello' } */</span>\\n\\n<span class=\\\"hljs-type\\\">Promise</span>.resolved(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>)\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-built_in\\\">map</span>(s =&gt; s ++ <span class=\\\"hljs-string\\\">\\\" world!\\\"</span>)\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-keyword\\\">get</span>(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(s));      <span class=\\\"hljs-comment\\\">/* Hello world! */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>As you can see on the first line, <code>Promise.t</code> maps directly to familiar JS\\npromises from your JS runtime. That means...</p>\\n<ul>\\n<li>You can use <code>reason-promise</code> directly to <a href=\\\"#Bindings\\\">write JS bindings</a>.</li>\\n<li>All JS tooling for promises immediately works with <code>reason-promise</code>.</li>\\n<li>Even if you do something exotic, like switch out the promise implementation at\\nthe JS level, for, say, better stack traces, <code>reason-promise</code> still binds to\\nit!</li>\\n</ul>\\n<br/>\\n<p>There is only one exception to the rule that <code>Promise.t</code> maps directly to JS\\npromises: when there is a promise nested inside another promise. JS <a href=\\\"#JSPromiseFlattening\\\">breaks the\\ntype safety</a> of promises in a misguided attempt to\\ndisallow nesting. <a href=\\\"#TypeSafety\\\"><code>reason-promise</code> instead emulates it in a way that makes\\npromises type-safe again</a>. This is in contrast to BuckleScript's\\nbuilt-in <code>Js.Promise</code>, which directly exposes the JS behavior, and so is not\\ntype-safe.</p>\\n<br/>\\n<p>In addition:</p>\\n<ul>\\n<li><code>reason-promise</code> offers a clean functional API, which replaces rejection with\\n<a href=\\\"#Errors\\\">helpers for <code>Result</code> and <code>Option</code></a>.</li>\\n<li><code>reason-promise</code> is tiny. It weighs in at about <a href=\\\"https://travis-ci.org/github/aantron/promise/jobs/700562910#L210\\\">1K bundled</a>.</li>\\n<li><code>reason-promise</code> also has a full, standalone <a href=\\\"https://github.com/aantron/promise/tree/master/src/native\\\">pure-Reason\\nimplementation</a>, which passes all the same tests. It can be used for\\nnative code or in JS.</li>\\n</ul>\\n<br>\\n<h2 id=\\\"tutorial\\\"><a href=\\\"#tutorial\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tutorial</h2>\\n<ul>\\n<li><a href=\\\"#Installing\\\">Installing</a></li>\\n<li><a href=\\\"#GettingStarted\\\">Getting started</a></li>\\n<li><a href=\\\"#Creating\\\">Creating new promises</a></li>\\n<li><a href=\\\"#Values\\\">Getting values from promises</a></li>\\n<li><a href=\\\"#Transforming\\\">Transforming promises</a></li>\\n<li><a href=\\\"#Tracing\\\">Tracing</a></li>\\n<li><a href=\\\"#Combining\\\">Concurrent combinations</a></li>\\n<li><a href=\\\"#Errors\\\">Handling errors with <code>Result</code></a></li>\\n<li><a href=\\\"#Rejection\\\">Advanced: Rejection</a></li>\\n<li><a href=\\\"#Bindings\\\">Advanced: Bindings</a></li>\\n<li><a href=\\\"#JSPromiseFlattening\\\">Discussion: Why JS promises are unsafe</a></li>\\n<li><a href=\\\"#TypeSafety\\\">Discussion: How <code>reason-promise</code> makes promises type-safe</a></li>\\n</ul>\\n<br/>\\n<p><a id=\\\"Installing\\\"></a></p>\\n<h3 id=\\\"installing\\\"><a href=\\\"#installing\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Installing</h3>\\n<div class=\\\"redex-codeblock\\\"><pre class=\\\"hljs lang-none\\\"><code>npm install reason-promise</code></pre></div>\\n<p>Then, add <code>reason-promise</code> to your <code>bsconfig.json</code>:</p>\\n<div class=\\\"redex-codeblock\\\"><pre class=\\\"hljs lang-json\\\"><code>{\\n  <span class=\\\"hljs-string\\\">\\\"bs-dependencies\\\"</span>: [\\n    <span class=\\\"hljs-string\\\">\\\"reason-promise\\\"</span>\\n  ]\\n}</code></pre></div>\\n<br/>\\n<p><a id=\\\"GettingStarted\\\"></a></p>\\n<h3 id=\\\"getting-started\\\"><a href=\\\"#getting-started\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Getting started</h3>\\n<p>To quickly get a project for pasting the code examples, clone the\\n<a href=\\\"https://github.com/aantron/promise-example-bsb\\\">example repo</a>. The code is in <code>main.re</code>.</p>\\n<div class=\\\"redex-codeblock\\\"><pre class=\\\"hljs lang-none\\\"><code>git <span class=\\\"hljs-built_in\\\">clone</span> https://github.com/aantron/promise-example-bsb\\n<span class=\\\"hljs-built_in\\\">cd</span> promise-example-bsb\\nnpm install\\nnpm run <span class=\\\"hljs-built_in\\\">test</span>    <span class=\\\"hljs-comment\\\"># To run each example.</span></code></pre></div>\\n<p>There it also an example repo with\\n<a href=\\\"https://github.com/aantron/promise-example-binding\\\">a trivial binding to parts of node-fetch</a>.</p>\\n<p>While reading the tutorial, it can be useful to glance at the <a href=\\\"https://github.com/aantron/promise/blob/c68b1feefdd5efc0397ba92f392d6cc47233f161/src/js/promise.rei#L15\\\">type\\nsignatures</a> of the functions from time to time. They provide a neat summary\\nof what each function does and what it expects from its callback.</p>\\n<br/>\\n<p><a id=\\\"Creating\\\"></a></p>\\n<h3 id=\\\"creating-new-promises\\\"><a href=\\\"#creating-new-promises\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Creating new promises</h3>\\n<p>The most basic function for creating a new promise is\\n<a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L20-L22\\\"><code>Promise.pending</code></a>:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> (p, resolve) = <span class=\\\"hljs-type\\\">Promise</span>.pending();\\n<span class=\\\"hljs-type\\\">Js</span>.log(p);    <span class=\\\"hljs-comment\\\">/* Promise { &lt;pending&gt; } */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> (p,resolve) = <span class=\\\"hljs-type\\\">Promise</span>.pending <span class=\\\"hljs-literal\\\">()</span>\\n<span class=\\\"hljs-keyword\\\">let</span> _ = <span class=\\\"hljs-type\\\">Js</span>.log p</code></pre>\\n      </div>\\n    </div>\\n  \\n<p>The second value returned, <code>resolve</code>, is a function for resolving the promise:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> (p, resolve) = <span class=\\\"hljs-type\\\">Promise</span>.pending();\\nresolve(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>);\\n<span class=\\\"hljs-type\\\">Js</span>.log(p);    <span class=\\\"hljs-comment\\\">/* Promise { 'Hello' } */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> (p,resolve) = <span class=\\\"hljs-type\\\">Promise</span>.pending <span class=\\\"hljs-literal\\\">()</span>\\n<span class=\\\"hljs-keyword\\\">let</span> _ = resolve <span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>\\n<span class=\\\"hljs-keyword\\\">let</span> _ = <span class=\\\"hljs-type\\\">Js</span>.log p</code></pre>\\n      </div>\\n    </div>\\n  \\n<p><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L24-L26\\\"><code>Promise.resolved</code></a> is a helper that returns an already-resolved\\npromise:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> p = <span class=\\\"hljs-type\\\">Promise</span>.resolved(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>);\\n<span class=\\\"hljs-type\\\">Js</span>.log(p);    <span class=\\\"hljs-comment\\\">/* Promise { 'Hello' } */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> p = <span class=\\\"hljs-type\\\">Promise</span>.resolved <span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>\\n<span class=\\\"hljs-keyword\\\">let</span> _ = <span class=\\\"hljs-type\\\">Js</span>.log p</code></pre>\\n      </div>\\n    </div>\\n  \\n<p>...and <a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L28-L30\\\"><code>Promise.exec</code></a> is for wrapping functions that take callbacks:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code>[@bs.<span class=\\\"hljs-keyword\\\">val</span>]\\nexternal setTimeout: (unit =&gt; unit, int) =&gt; unit = <span class=\\\"hljs-string\\\">\\\"setTimeout\\\"</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> p = <span class=\\\"hljs-type\\\">Promise</span>.exec(resolve =&gt; setTimeout(resolve, <span class=\\\"hljs-number\\\">1000</span>));\\n<span class=\\\"hljs-type\\\">Js</span>.log(p);    <span class=\\\"hljs-comment\\\">/* Promise { &lt;pending&gt; } */</span>\\n\\n<span class=\\\"hljs-comment\\\">/* Program then waits for one second before exiting. */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">external</span> setTimeout : (<span class=\\\"hljs-built_in\\\">unit</span> -&gt; <span class=\\\"hljs-built_in\\\">unit</span>) -&gt; <span class=\\\"hljs-built_in\\\">int</span> -&gt; <span class=\\\"hljs-built_in\\\">unit</span> = <span class=\\\"hljs-string\\\">\\\"setTimeout\\\"</span>[@@bs.<span class=\\\"hljs-keyword\\\">val</span> ]\\n<span class=\\\"hljs-keyword\\\">let</span> p = <span class=\\\"hljs-type\\\">Promise</span>.exec (<span class=\\\"hljs-keyword\\\">fun</span> resolve  -&gt; setTimeout resolve <span class=\\\"hljs-number\\\">1000</span>)\\n<span class=\\\"hljs-keyword\\\">let</span> _ = <span class=\\\"hljs-type\\\">Js</span>.log p</code></pre>\\n      </div>\\n    </div>\\n  \\n<br/>\\n<p><a id=\\\"Values\\\"></a></p>\\n<h3 id=\\\"getting-values-from-promises\\\"><a href=\\\"#getting-values-from-promises\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Getting values from promises</h3>\\n<p>To do something once a promise is resolved, use <a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L35-L37\\\"><code>Promise.get</code></a>:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> (p, resolve) = <span class=\\\"hljs-type\\\">Promise</span>.pending();\\n\\np-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-keyword\\\">get</span>(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(s));\\n\\nresolve(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>);   <span class=\\\"hljs-comment\\\">/* Prints \\\"Hello\\\". */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<br/>\\n<p><a id=\\\"Transforming\\\"></a></p>\\n<h3 id=\\\"transforming-promises\\\"><a href=\\\"#transforming-promises\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Transforming promises</h3>\\n<p>Use <a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L43-L45\\\"><code>Promise.map</code></a> to transform the value inside a promise:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> (p, resolve) = <span class=\\\"hljs-type\\\">Promise</span>.pending();\\n\\np\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-built_in\\\">map</span>(s =&gt; s ++ <span class=\\\"hljs-string\\\">\\\" world\\\"</span>)\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-keyword\\\">get</span>(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(s));\\n\\nresolve(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>);   <span class=\\\"hljs-comment\\\">/* Hello world */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>To be precise, <code>Promise.map</code> creates a <em>new</em> promise with the transformed value.</p>\\n<p>If the function you are using to transform the value also returns a promise,\\nuse <a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L47-L49\\\"><code>Promise.flatMap</code></a> instead of <code>Promise.map</code>. <code>Promise.flatMap</code>\\nwill flatten the nested promise.</p>\\n<br/>\\n<p><a id=\\\"Tracing\\\"></a></p>\\n<h3 id=\\\"tracing\\\"><a href=\\\"#tracing\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tracing</h3>\\n<p>If you have a chain of promise operations, and you'd like to inspect the value\\nin the middle of the chain, use <a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L39-L41\\\"><code>Promise.tap</code></a>:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> (p, resolve) = <span class=\\\"hljs-type\\\">Promise</span>.pending();\\n\\np\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.tap(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-string\\\">\\\"Value is now: \\\"</span> ++ s))\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-built_in\\\">map</span>(s =&gt; s ++ <span class=\\\"hljs-string\\\">\\\" world\\\"</span>)\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.tap(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-string\\\">\\\"Value is now: \\\"</span> ++ s))\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-keyword\\\">get</span>(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(s));\\n\\nresolve(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>);\\n\\n<span class=\\\"hljs-comment\\\">/*\\nValue is now: Hello\\nValue is now: Hello world\\nHello world\\n*/</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<br/>\\n<p><a id=\\\"Combining\\\"></a></p>\\n<h3 id=\\\"concurrent-combinations\\\"><a href=\\\"#concurrent-combinations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Concurrent combinations</h3>\\n<p><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L123-L125\\\"><code>Promise.race</code></a> waits for <em>one</em> of the promises passed to it to resolve:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code>[@bs.<span class=\\\"hljs-keyword\\\">val</span>]\\nexternal setTimeout: (unit =&gt; unit, int) =&gt; unit = <span class=\\\"hljs-string\\\">\\\"setTimeout\\\"</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> one_second = <span class=\\\"hljs-type\\\">Promise</span>.exec(resolve =&gt; setTimeout(resolve, <span class=\\\"hljs-number\\\">1000</span>));\\n<span class=\\\"hljs-keyword\\\">let</span> five_seconds = <span class=\\\"hljs-type\\\">Promise</span>.exec(resolve =&gt; setTimeout(resolve, <span class=\\\"hljs-number\\\">5000</span>));\\n\\n<span class=\\\"hljs-type\\\">Promise</span>.race([one_second, five_seconds])\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-keyword\\\">get</span>(() =&gt; { <span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>); exit(<span class=\\\"hljs-number\\\">0</span>); });\\n\\n<span class=\\\"hljs-comment\\\">/* Prints \\\"Hello\\\" after one second. */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L127-L129\\\"><code>Promise.all</code></a> instead waits for <em>all</em> of the promises passed to it,\\nconcurrently:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code>[@bs.<span class=\\\"hljs-keyword\\\">val</span>]\\nexternal setTimeout: (unit =&gt; unit, int) =&gt; unit = <span class=\\\"hljs-string\\\">\\\"setTimeout\\\"</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> one_second = <span class=\\\"hljs-type\\\">Promise</span>.exec(resolve =&gt; setTimeout(resolve, <span class=\\\"hljs-number\\\">1000</span>));\\n<span class=\\\"hljs-keyword\\\">let</span> five_seconds = <span class=\\\"hljs-type\\\">Promise</span>.exec(resolve =&gt; setTimeout(resolve, <span class=\\\"hljs-number\\\">5000</span>));\\n\\n<span class=\\\"hljs-type\\\">Promise</span>.all([one_second, five_seconds])\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-keyword\\\">get</span>(<span class=\\\"hljs-number\\\">_</span> =&gt; { <span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>); exit(<span class=\\\"hljs-number\\\">0</span>); });\\n\\n<span class=\\\"hljs-comment\\\">/* Prints \\\"Hello\\\" after five seconds. */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>For convenience, there are several variants of <code>Promise.all</code>:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L135-L137\\\"><code>Promise.all2</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L139-L141\\\"><code>Promise.all3</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L143-L145\\\"><code>Promise.all4</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L147-L149\\\"><code>Promise.all5</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L151-L158\\\"><code>Promise.all6</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L131-L133\\\"><code>Promise.allArray</code></a></li>\\n</ul>\\n<br/>\\n<p><a id=\\\"Errors\\\"></a></p>\\n<h3 id=\\\"handling-errors-with-result\\\"><a href=\\\"#handling-errors-with-result\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Handling errors with <code>Result</code></h3>\\n<p>Promises that can fail are represented using the standard library's\\n<a href=\\\"https://bucklescript.github.io/bucklescript/api/Belt.Result.html\\\"><code>Result</code></a>, and its constructors <code>Ok</code> and <code>Error</code>:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code>open <span class=\\\"hljs-type\\\">Belt</span>.<span class=\\\"hljs-type\\\">Result</span>;\\n\\n<span class=\\\"hljs-type\\\">Promise</span>.resolved(<span class=\\\"hljs-type\\\">Ok</span>(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>))\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.getOk(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(s));      <span class=\\\"hljs-comment\\\">/* Hello */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L57-L59\\\"><code>Promise.getOk</code></a> waits for <code>p</code> to have a value, and runs its function\\nonly if that value is <code>Ok(_)</code>. If you instead resolve the promise with\\n<code>Error(_)</code>, there will be no output:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code>open <span class=\\\"hljs-type\\\">Belt</span>.<span class=\\\"hljs-type\\\">Result</span>;\\n\\n<span class=\\\"hljs-type\\\">Promise</span>.resolved(<span class=\\\"hljs-type\\\">Error</span>(<span class=\\\"hljs-string\\\">\\\"Failed\\\"</span>))\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.getOk(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(s));      <span class=\\\"hljs-comment\\\">/* Program just exits. */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>You can wait for either kind of value by calling <a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L57-L59\\\"><code>Promise.getOk</code></a> and\\n<a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L73-L75\\\"><code>Promise.getError</code></a>:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code>open <span class=\\\"hljs-type\\\">Belt</span>.<span class=\\\"hljs-type\\\">Result</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> () = {\\n  <span class=\\\"hljs-keyword\\\">let</span> p = <span class=\\\"hljs-type\\\">Promise</span>.resolved(<span class=\\\"hljs-type\\\">Error</span>(<span class=\\\"hljs-string\\\">\\\"Failed\\\"</span>));\\n  p-&gt;<span class=\\\"hljs-type\\\">Promise</span>.getOk(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(s));\\n  p-&gt;<span class=\\\"hljs-type\\\">Promise</span>.getError(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-string\\\">\\\"Error: \\\"</span> ++ s));\\n};                                    <span class=\\\"hljs-comment\\\">/* Error: Failed */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">967</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>...or respond to all outcomes using the ordinary <a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L35-L37\\\"><code>Promise.get</code></a>:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code>open <span class=\\\"hljs-type\\\">Belt</span>.<span class=\\\"hljs-type\\\">Result</span>;\\n\\n<span class=\\\"hljs-type\\\">Promise</span>.resolved(<span class=\\\"hljs-type\\\">Error</span>(<span class=\\\"hljs-string\\\">\\\"Failed\\\"</span>))\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-keyword\\\">get</span>(result =&gt;\\n  <span class=\\\"hljs-keyword\\\">switch</span> (result) {\\n  | <span class=\\\"hljs-type\\\">Ok</span>(s) =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(s);\\n  | <span class=\\\"hljs-type\\\">Error</span>(s) =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-string\\\">\\\"Error: \\\"</span> ++ s);\\n  });                                 <span class=\\\"hljs-comment\\\">/* Error: Failed */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>The full set of functions for handling results is:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L57-L59\\\"><code>Promise.getOk</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L61-L63\\\"><code>Promise.tapOk</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L65-L67\\\"><code>Promise.mapOk</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L69-L71\\\"><code>Promise.flatMapOk</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L73-L75\\\"><code>Promise.getError</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L77-L79\\\"><code>Promise.tapError</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L81-L83\\\"><code>Promise.mapError</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L85-L87\\\"><code>Promise.flatMapError</code></a></li>\\n</ul>\\n<p>There are also similar functions for working with <a href=\\\"https://bucklescript.github.io/bucklescript/api/Belt.Option.html\\\"><code>Option</code></a>:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L104-L106\\\"><code>Promise.getSome</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L108-L110\\\"><code>Promise.tapSome</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L112-L114\\\"><code>Promise.mapSome</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L116-L118\\\"><code>Promise.flatMapSome</code></a></li>\\n</ul>\\n<p>In addition, there is also a set of variants of <code>Promise.all</code> for results, which\\npropagate any <code>Error(_)</code> as soon as it is received:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/8142b0c4cb5e88e0241c3a6926fdf096b1b96935/src/js/promise.rei#L160-L162\\\"><code>Promise.allOk</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/8142b0c4cb5e88e0241c3a6926fdf096b1b96935/src/js/promise.rei#L168-L170\\\"><code>Promise.allOk2</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/8142b0c4cb5e88e0241c3a6926fdf096b1b96935/src/js/promise.rei#L172-L176\\\"><code>Promise.allOk3</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/8142b0c4cb5e88e0241c3a6926fdf096b1b96935/src/js/promise.rei#L178-L183\\\"><code>Promise.allOk4</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/8142b0c4cb5e88e0241c3a6926fdf096b1b96935/src/js/promise.rei#L185-L191\\\"><code>Promise.allOk5</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/8142b0c4cb5e88e0241c3a6926fdf096b1b96935/src/js/promise.rei#L193-L200\\\"><code>Promise.allOk6</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/8142b0c4cb5e88e0241c3a6926fdf096b1b96935/src/js/promise.rei#L164-L166\\\"><code>Promise.allOkArray</code></a></li>\\n</ul>\\n<p>If you'd like instead to fully wait for all the promises to resolve with either\\n<code>Ok(_)</code> or <code>Error(_)</code>, you can use the ordinary <code>Promise.all</code> and its variants.</p>\\n<br/>\\n<p><a id=\\\"Rejection\\\"></a></p>\\n<h3 id=\\\"advanced-rejection\\\"><a href=\\\"#advanced-rejection\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Advanced: Rejection</h3>\\n<p>As you can see from <a href=\\\"#Errors\\\">Handling errors</a>, <code>Promise</code> doesn't use rejection\\nfor errors — but JavaScript promises do. In order to support bindings to\\nJavaScript libraries, which often return promises that can be rejected,\\n<code>Promise</code> provides the <a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L163\\\"><code>Promise.Js</code></a> helper module.</p>\\n<p><code>Promise.Js</code> works the same way as <code>Promise</code>. It similarly has:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L180-L182\\\"><code>Promise.Js.get</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L184-L186\\\"><code>Promise.Js.tap</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L188-L190\\\"><code>Promise.Js.map</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L192-L194\\\"><code>Promise.Js.flatMap</code></a></li>\\n</ul>\\n<p>However, because <code>Promise.Js</code> uses JS rejection for error handling rather than\\n<code>Result</code> or <code>Option</code>,</p>\\n<ul>\\n<li>There are no helpers for <code>Result</code> and <code>Option</code>.</li>\\n<li>There is <a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L197-L199\\\"><code>Promise.Js.catch</code></a> for handling rejection.</li>\\n<li>There is <a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L175-L177\\\"><code>Promise.Js.rejected</code></a> for creating an\\nalready-rejected promise.</li>\\n</ul>\\n<p>Underneath, <code>Promise</code> and <code>Promise.Js</code> have the same implementation:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> <span class=\\\"hljs-type\\\">Promise</span>.t('a) = <span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-type\\\">Js</span>.t('a, never);</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">3647</span>: &lt;<span class=\\\"hljs-type\\\">UNKNOWN</span> <span class=\\\"hljs-type\\\">SYNTAX</span> <span class=\\\"hljs-type\\\">ERROR</span>&gt;</code></pre>\\n      </div>\\n    </div>\\n  \\n<p>That is, <code>Promise</code> is really <code>Promise.Js</code> that has no rejection type, and no\\nexposed helpers for rejection.</p>\\n<p>There are several helpers for converting between <code>Promise</code> and <code>Promise.Js</code>:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L211-L213\\\"><code>Promise.Js.relax</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L215-L217\\\"><code>Promise.Js.toResult</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L219-L221\\\"><code>Promise.Js.fromResult</code></a></li>\\n</ul>\\n<p><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L197-L199\\\"><code>Promise.Js.catch</code></a> can also perform a conversion to <code>Promise</code>, if\\nyou simply convert a rejection to a resolution. In the next example, note the\\nfinal line is no longer using <code>Promise.Js</code>, but <code>Promise</code>:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-type\\\">Js</span>.rejected(<span class=\\\"hljs-string\\\">\\\"Failed\\\"</span>)\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-type\\\">Js</span>.catch(s =&gt; <span class=\\\"hljs-type\\\">Promise</span>.resolved(<span class=\\\"hljs-string\\\">\\\"Error: \\\"</span> ++ s))\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-keyword\\\">get</span>(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(s));        <span class=\\\"hljs-comment\\\">/* Error: Failed */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>There are also two functions for converting between <code>Promise.Js</code> and the current\\npromise binding in the BuckleScript standard libarary, <code>Js.Promise</code>:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L223-L225\\\"><code>Promise.Js.fromBsPromise</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L227-L229\\\"><code>Promise.Js.toBsPromise</code></a></li>\\n</ul>\\n<p>Because both libraries are bindings for the same exact kind of value, these are\\nboth no-op identity functions that only change the type.</p>\\n<br>\\n<p><a id=\\\"Bindings\\\"></a></p>\\n<h3 id=\\\"advanced-bindings\\\"><a href=\\\"#advanced-bindings\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Advanced: Bindings</h3>\\n<p>Refer to the <a href=\\\"https://github.com/aantron/promise-example-binding\\\">example node-fetch binding repo</a>.</p>\\n<p>When you want to bind a JS function that <em>returns</em> a promise, you can use\\n<code>Promise</code> directly in its return value:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* A mock JS library. */</span>\\n[%%bs.raw {|\\nfunction delay(value, milliseconds) {\\n  <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-type\\\">Promise</span>(function(resolve) {\\n    setTimeout(function() { resolve(value); }, milliseconds)\\n  });\\n}|}]\\n\\n<span class=\\\"hljs-comment\\\">/* Our binding. */</span>\\n[@bs.<span class=\\\"hljs-keyword\\\">val</span>]\\nexternal delay: ('a, int) =&gt; <span class=\\\"hljs-type\\\">Promise</span>.t('a) = <span class=\\\"hljs-string\\\">\\\"delay\\\"</span>;\\n\\n<span class=\\\"hljs-comment\\\">/* Usage. */</span>\\ndelay(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>, <span class=\\\"hljs-number\\\">1000</span>)\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-keyword\\\">get</span>(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(s));\\n\\n<span class=\\\"hljs-comment\\\">/* Prints \\\"Hello\\\" after one second. */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2305</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>If the promise can be rejected, you should use <code>Promise.Js</code> instead, and\\n<a href=\\\"#Rejection\\\">convert to <code>Promise</code></a> as quickly as possible, with intelligent\\nhandling of rejection. Here is one way to do that:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* Mock JS library. */</span>\\n[%%bs.raw {|\\nfunction delayReject(value, milliseconds) {\\n  <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-type\\\">Promise</span>(function(resolve, reject) {\\n    setTimeout(function() { reject(value); }, milliseconds)\\n  });\\n}|}]\\n\\n<span class=\\\"hljs-comment\\\">/* Binding. */</span>\\n[@bs.<span class=\\\"hljs-keyword\\\">val</span>]\\nexternal delayRejectRaw: ('a, int) =&gt; <span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-type\\\">Js</span>.t(<span class=\\\"hljs-number\\\">_</span>, 'a) = <span class=\\\"hljs-string\\\">\\\"delayReject\\\"</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> delayReject = (value, milliseconds) =&gt;\\n  delayRejectRaw(value, milliseconds)\\n  -&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-type\\\">Js</span>.toResult;\\n\\n<span class=\\\"hljs-comment\\\">/* Usage. */</span>\\ndelayReject(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>, <span class=\\\"hljs-number\\\">1000</span>)\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.getError(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(s));\\n\\n<span class=\\\"hljs-comment\\\">/* Prints \\\"Hello\\\" after one second. */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2305</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>Note that this binding has two steps: there is a raw binding, and then an extra\\nwrapper that converts rejections into <code>Result</code>s. If the potential rejections\\nare messy, this is a good place to insert additional logic for converting them\\nto nice Reason values :)</p>\\n<p>When <em>passing</em> a promise to JS, it is generally safe to use <code>Promise</code> rather\\nthan <code>Promise.Js</code>:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* Mock JS library. */</span>\\n[%%bs.raw {|\\nfunction log(p) {\\n  p.then(function (v) { console.log(v); });\\n}|}]\\n\\n<span class=\\\"hljs-comment\\\">/* Binding. */</span>\\n[@bs.<span class=\\\"hljs-keyword\\\">val</span>]\\nexternal log: <span class=\\\"hljs-type\\\">Promise</span>.t('a) =&gt; unit = <span class=\\\"hljs-string\\\">\\\"log\\\"</span>;\\n\\n<span class=\\\"hljs-comment\\\">/* Usage. */</span>\\nlog(<span class=\\\"hljs-type\\\">Promise</span>.resolved(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>));       <span class=\\\"hljs-comment\\\">/* Hello */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2305</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<br/>\\n<p><a id=\\\"JSPromiseFlattening\\\"></a></p>\\n<h3 id=\\\"discussion-why-js-promises-are-unsafe\\\"><a href=\\\"#discussion-why-js-promises-are-unsafe\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Discussion: Why JS promises are unsafe</h3>\\n<p>The JS function <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\\\"><code>Promise.resolve</code></a> has a special case, which\\nis triggered when you try to resolve a promise with another, nested promise.\\nUnfortunately, this special case makes it impossible to assign\\n<code>Promise.resolve</code> a consistent type in Reason (and most type systems).</p>\\n<p>Here are the details. The code will use\\n<a href=\\\"https://bucklescript.github.io/bucklescript/api/Js.Promise.html#VALresolve\\\"><code>Js.Promise.resolve</code></a>, BuckleScript's direct binding to\\nJS's <code>Promise.resolve</code>.</p>\\n<p><code>Js.Promise.resolve</code> takes a value, and creates a promise containing that value:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.resolve(<span class=\\\"hljs-number\\\">1</span>));\\n<span class=\\\"hljs-comment\\\">/* Promise { 1 } */</span>\\n\\n<span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.resolve(<span class=\\\"hljs-string\\\">\\\"foo\\\"</span>));\\n<span class=\\\"hljs-comment\\\">/* Promise { 'foo' } */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> _ = <span class=\\\"hljs-type\\\">Js</span>.log (<span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.resolve <span class=\\\"hljs-number\\\">1</span>)\\n<span class=\\\"hljs-keyword\\\">let</span> _ = <span class=\\\"hljs-type\\\">Js</span>.log (<span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.resolve <span class=\\\"hljs-string\\\">\\\"foo\\\"</span>)</code></pre>\\n      </div>\\n    </div>\\n  \\n<p>So, we should give it the type</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.resolve: 'a =&gt; <span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.t('a);</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>and, indeed, that's the type it <a href=\\\"https://bucklescript.github.io/bucklescript/api/Js.Promise.html#VALresolve\\\">has</a> in BuckleScript.</p>\\n<p>Following the pattern, we would <em>expect</em>:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> nestedPromise = <span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.resolve(<span class=\\\"hljs-number\\\">1</span>);\\n\\n<span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.resolve(nestedPromise));\\n<span class=\\\"hljs-comment\\\">/* Promise { Promise { 1 } } */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> nestedPromise = <span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.resolve <span class=\\\"hljs-number\\\">1</span>\\n<span class=\\\"hljs-keyword\\\">let</span> _ = <span class=\\\"hljs-type\\\">Js</span>.log (<span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.resolve nestedPromise)</code></pre>\\n      </div>\\n    </div>\\n  \\n<p>But that's not what happens! Instead, the output is just</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* Promise { 1 } */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>The nested promise is missing! But the type system, following the pattern,\\nstill thinks that this resulting value has type</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.t(<span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.t(int))</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> _ = <span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.t (<span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.t <span class=\\\"hljs-built_in\\\">int</span>)</code></pre>\\n      </div>\\n    </div>\\n  \\n<p>i.e., the type of the value we were (reasonably) expecting.</p>\\n<p>When you pass <code>nestedPromise</code> to <code>Js.Promise.resolve</code>, JS unwraps\\n<code>nestedPromise</code>, violating the type! There is no easy way to encode such special\\ncasing in the type system — especially since JS does it not only to\\nnested promises, but to any would-be nested object that has a <code>.then</code> method.</p>\\n<p>The result is, if your program executes something like this, it will have\\nordinary values in places where it expects another level of promises. For\\nexample, if you do</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> nestedPromise = <span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.resolve(<span class=\\\"hljs-number\\\">1</span>);\\n\\n<span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.resolve(nestedPromise)\\n-&gt;<span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.then_(p =&gt; <span class=\\\"hljs-comment\\\">/* ... */</span>)</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>you would <em>expect</em> <code>p</code> in the callback to be a promise containing <code>1</code>, and the\\ntype of <code>p</code> is indeed <code>Js.Promise.t(int)</code>. Instead, however, <code>p</code> is just the\\nbare value <code>1</code>. That means the callback will cause a runtime error as soon as\\nit tries to use promise functions on the <code>1</code>. Worse, you might store <code>p</code> in a\\ndata structure, and the runtime error will occur at a very distant place in the\\ncode. The type system is supposed to prevent such errors! That's part of the\\npoint of using Reason.</p>\\n<p>The same special casing occurs throughout the JS <code>Promise</code> API — for\\nexample, when you return a promise from the callback of <code>then_</code>. This means that\\n<em>most</em> of the JS <code>Promise</code> functions can't be assigned a correct type and\\ndirectly, safely be used from Reason.</p>\\n<br/>\\n<p><a id=\\\"TypeSafety\\\"></a></p>\\n<h3 id=\\\"discussion-how-reason-promise-makes-promises-type-safe\\\"><a href=\\\"#discussion-how-reason-promise-makes-promises-type-safe\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Discussion: How <code>reason-promise</code> makes promises type-safe</h3>\\n<p>The <a href=\\\"#JSPromiseFlattening\\\">previous section</a> shows that JS promise functions are\\nbroken. An important observation is that it is only the <em>functions</em> that are\\nbroken — the promise <em>data structure</em> is not. That means that to make JS\\npromises type-safe, we can keep the existing JS data structure, and just provide\\nsafe replacement functions to use with it in Reason. This is good news\\nfor interop :)</p>\\n<p>To fix the functions, only the <a href=\\\"#JSPromiseFlattening\\\">special-case flattening</a>\\nhas to be undone. So, when you call <code>reason-promise</code>'s\\n<a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L24-L26\\\"><code>Promise.resolved(value)</code></a>, it checks whether <code>value</code> is a promise\\nor not, and...</p>\\n<ul>\\n<li>\\n<p>If <code>value</code> <em>is not</em> a promise, <code>reason-promise</code> just passes it to JS's\\n<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\\\"><code>Promise.resolve</code></a>, because JS will do the right thing.</p>\\n</li>\\n<li>\\n<p>If <code>value</code> <em>is</em> a promise, it's not safe to simply pass it to JS, because it\\nwill trigger the special-casing. So, <code>reason-promise</code> boxes the nested\\npromise:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> nestedPromise = <span class=\\\"hljs-type\\\">Promise</span>.resolved(<span class=\\\"hljs-number\\\">1</span>);\\n\\n<span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-type\\\">Promise</span>.resolved(nestedPromise));\\n<span class=\\\"hljs-comment\\\">/* Promise { PromiseBox { Promise { 1 } } } */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> nestedPromise = <span class=\\\"hljs-type\\\">Promise</span>.resolved <span class=\\\"hljs-number\\\">1</span>\\n<span class=\\\"hljs-keyword\\\">let</span> _ = <span class=\\\"hljs-type\\\">Js</span>.log (<span class=\\\"hljs-type\\\">Promise</span>.resolved nestedPromise)</code></pre>\\n      </div>\\n    </div>\\n  \\n<p>This box, of course, is not a promise, so inserting it in the middle is\\nenough to suppress the special-casing.</p>\\n<p>Whenever you try to take the value out of this resulting structure (for\\nexample, by calling <a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L35-L37\\\"><code>Promise.get</code></a> on it), <code>reason-promise</code>\\ntransparently unboxes the <code>PromiseBox</code> and passes the nested promise to your\\ncallback — as your callback would expect.</p>\\n</li>\\n</ul>\\n<p>This conditional boxing and unboxing is done throughout <code>reason-promise</code>. It\\nonly happens for nested promises, and anything else with a <code>.then</code> method. For\\nall other values, <code>reason-promise</code> behaves, internally, exactly like JS\\n<code>Promise</code> (though with a cleaner outer API). This is enough to make promises\\ntype-safe.</p>\\n<p>This is a simple scheme, but <code>reason-promise</code> includes a very thorough\\n<a href=\\\"https://github.com/aantron/promise/tree/master/test\\\">test suite</a> to be extra sure that it always manages the boxing\\ncorrectly.</p>\\n<p>This conditional boxing is similar to how unboxed optionals are implemented in\\nBuckleScript. Optionals are almost always unboxed, but when BuckleScript isn't\\nsure that the unboxing will be safe, it inserts a runtime check that boxes some\\nvalues, while still keeping most values unboxed.</p>\\n<!-- YOU HAVE FOUND THE SECRET EASTER EGG! -->\\n\",\"homepageUrl\":\"https://github.com/aantron/promise\",\"repositoryUrl\":\"https://github.com/aantron/promise\",\"npmUrl\":\"https://www.npmjs.com/package/reason-promise\",\"issuesUrl\":\"https://github.com/aantron/promise/issues\",\"slug\":\"/package/reason-promise\"}},\"pathContext\":{\"id\":\"reason-promise\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---package-reason-promise-ffd6d595756ecb6353c5.js","module.exports = {\"data\":{\"package\":{\"type\":\"published\",\"id\":\"reason-promise\",\"name\":\"reason-promise\",\"version\":\"1.1.1\",\"category\":\"binding\",\"flags\":[],\"platforms\":[\"browser\",\"node\",\"native\"],\"description\":\"Light and type-safe binding to JS promises\",\"keywords\":[\"async\"],\"license\":\"MIT\",\"updated\":\"2020-06-21T13:20:01.408Z\",\"stars\":274,\"score\":0.67959580125452,\"quality\":0.9327981663728103,\"popularity\":0.14221078354463446,\"maintenance\":0.9999502202915855,\"readme\":\"<h1 id=\\\"promise-----version-travis-status-coverage\\\"><a href=\\\"#promise-----version-travis-status-coverage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Promise     <a href=\\\"https://github.com/aantron/promise/releases\\\"><img src=\\\"https://img.shields.io/badge/version-1.1.1-blue.svg\\\" alt=\\\"Version\\\"></a> <a href=\\\"https://travis-ci.org/aantron/promise/branches\\\"><img src=\\\"https://img.shields.io/travis/aantron/promise/master.svg?label=travis\\\" alt=\\\"Travis status\\\"></a> <a href=\\\"https://coveralls.io/github/aantron/promise?branch=master\\\"><img src=\\\"https://img.shields.io/coveralls/aantron/promise/master.svg\\\" alt=\\\"Coverage\\\"></a></h1>\\n<p>A lightweight, type-safe binding to JS promises:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-type\\\">Promise</span>.resolved(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>));  <span class=\\\"hljs-comment\\\">/* Promise { 'Hello' } */</span>\\n\\n<span class=\\\"hljs-type\\\">Promise</span>.resolved(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>)\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-built_in\\\">map</span>(s =&gt; s ++ <span class=\\\"hljs-string\\\">\\\" world!\\\"</span>)\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-keyword\\\">get</span>(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(s));      <span class=\\\"hljs-comment\\\">/* Hello world! */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>As you can see on the first line, <code>Promise.t</code> maps directly to familiar JS\\npromises from your JS runtime. That means...</p>\\n<ul>\\n<li>You can use <code>reason-promise</code> directly to <a href=\\\"#Bindings\\\">write JS bindings</a>.</li>\\n<li>All JS tooling for promises immediately works with <code>reason-promise</code>.</li>\\n<li>Even if you do something exotic, like switch out the promise implementation at\\nthe JS level, for, say, better stack traces, <code>reason-promise</code> still binds to\\nit!</li>\\n</ul>\\n<br/>\\n<p>There is only one exception to the rule that <code>Promise.t</code> maps directly to JS\\npromises: when there is a promise nested inside another promise. JS <a href=\\\"#JSPromiseFlattening\\\">breaks the\\ntype safety</a> of promises in a misguided attempt to\\ndisallow nesting. <a href=\\\"#TypeSafety\\\"><code>reason-promise</code> instead emulates it in a way that makes\\npromises type-safe again</a>. This is in contrast to BuckleScript's\\nbuilt-in <code>Js.Promise</code>, which directly exposes the JS behavior, and so is not\\ntype-safe.</p>\\n<br/>\\n<p>In addition:</p>\\n<ul>\\n<li><code>reason-promise</code> offers a clean functional API, which replaces rejection with\\n<a href=\\\"#Errors\\\">helpers for <code>Result</code> and <code>Option</code></a>.</li>\\n<li><code>reason-promise</code> is tiny. It weighs in at about <a href=\\\"https://travis-ci.org/github/aantron/promise/jobs/700562910#L210\\\">1K bundled</a>.</li>\\n<li><code>reason-promise</code> also has a full, standalone <a href=\\\"https://github.com/aantron/promise/tree/master/src/native\\\">pure-Reason\\nimplementation</a>, which passes all the same tests. It can be used for\\nnative code or in JS.</li>\\n</ul>\\n<br>\\n<h2 id=\\\"tutorial\\\"><a href=\\\"#tutorial\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tutorial</h2>\\n<ul>\\n<li><a href=\\\"#Installing\\\">Installing</a></li>\\n<li><a href=\\\"#GettingStarted\\\">Getting started</a></li>\\n<li><a href=\\\"#Creating\\\">Creating new promises</a></li>\\n<li><a href=\\\"#Values\\\">Getting values from promises</a></li>\\n<li><a href=\\\"#Transforming\\\">Transforming promises</a></li>\\n<li><a href=\\\"#Tracing\\\">Tracing</a></li>\\n<li><a href=\\\"#Combining\\\">Concurrent combinations</a></li>\\n<li><a href=\\\"#Errors\\\">Handling errors with <code>Result</code></a></li>\\n<li><a href=\\\"#Rejection\\\">Advanced: Rejection</a></li>\\n<li><a href=\\\"#Bindings\\\">Advanced: Bindings</a></li>\\n<li><a href=\\\"#JSPromiseFlattening\\\">Discussion: Why JS promises are unsafe</a></li>\\n<li><a href=\\\"#TypeSafety\\\">Discussion: How <code>reason-promise</code> makes promises type-safe</a></li>\\n</ul>\\n<br/>\\n<p><a id=\\\"Installing\\\"></a></p>\\n<h3 id=\\\"installing\\\"><a href=\\\"#installing\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Installing</h3>\\n<div class=\\\"redex-codeblock\\\"><pre class=\\\"hljs lang-none\\\"><code>npm install reason-promise</code></pre></div>\\n<p>Then, add <code>reason-promise</code> to your <code>bsconfig.json</code>:</p>\\n<div class=\\\"redex-codeblock\\\"><pre class=\\\"hljs lang-json\\\"><code>{\\n  <span class=\\\"hljs-string\\\">\\\"bs-dependencies\\\"</span>: [\\n    <span class=\\\"hljs-string\\\">\\\"reason-promise\\\"</span>\\n  ]\\n}</code></pre></div>\\n<br/>\\n<p><a id=\\\"GettingStarted\\\"></a></p>\\n<h3 id=\\\"getting-started\\\"><a href=\\\"#getting-started\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Getting started</h3>\\n<p>To quickly get a project for pasting the code examples, clone the\\n<a href=\\\"https://github.com/aantron/promise-example-bsb\\\">example repo</a>. The code is in <code>main.re</code>.</p>\\n<div class=\\\"redex-codeblock\\\"><pre class=\\\"hljs lang-none\\\"><code>git <span class=\\\"hljs-built_in\\\">clone</span> https://github.com/aantron/promise-example-bsb\\n<span class=\\\"hljs-built_in\\\">cd</span> promise-example-bsb\\nnpm install\\nnpm run <span class=\\\"hljs-built_in\\\">test</span>    <span class=\\\"hljs-comment\\\"># To run each example.</span></code></pre></div>\\n<p>There it also an example repo with\\n<a href=\\\"https://github.com/aantron/promise-example-binding\\\">a trivial binding to parts of node-fetch</a>.</p>\\n<p>While reading the tutorial, it can be useful to glance at the <a href=\\\"https://github.com/aantron/promise/blob/c68b1feefdd5efc0397ba92f392d6cc47233f161/src/js/promise.rei#L15\\\">type\\nsignatures</a> of the functions from time to time. They provide a neat summary\\nof what each function does and what it expects from its callback.</p>\\n<br/>\\n<p><a id=\\\"Creating\\\"></a></p>\\n<h3 id=\\\"creating-new-promises\\\"><a href=\\\"#creating-new-promises\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Creating new promises</h3>\\n<p>The most basic function for creating a new promise is\\n<a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L20-L22\\\"><code>Promise.pending</code></a>:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> (p, resolve) = <span class=\\\"hljs-type\\\">Promise</span>.pending();\\n<span class=\\\"hljs-type\\\">Js</span>.log(p);    <span class=\\\"hljs-comment\\\">/* Promise { &lt;pending&gt; } */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> (p,resolve) = <span class=\\\"hljs-type\\\">Promise</span>.pending <span class=\\\"hljs-literal\\\">()</span>\\n<span class=\\\"hljs-keyword\\\">let</span> _ = <span class=\\\"hljs-type\\\">Js</span>.log p</code></pre>\\n      </div>\\n    </div>\\n  \\n<p>The second value returned, <code>resolve</code>, is a function for resolving the promise:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> (p, resolve) = <span class=\\\"hljs-type\\\">Promise</span>.pending();\\nresolve(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>);\\n<span class=\\\"hljs-type\\\">Js</span>.log(p);    <span class=\\\"hljs-comment\\\">/* Promise { 'Hello' } */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> (p,resolve) = <span class=\\\"hljs-type\\\">Promise</span>.pending <span class=\\\"hljs-literal\\\">()</span>\\n<span class=\\\"hljs-keyword\\\">let</span> _ = resolve <span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>\\n<span class=\\\"hljs-keyword\\\">let</span> _ = <span class=\\\"hljs-type\\\">Js</span>.log p</code></pre>\\n      </div>\\n    </div>\\n  \\n<p><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L24-L26\\\"><code>Promise.resolved</code></a> is a helper that returns an already-resolved\\npromise:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> p = <span class=\\\"hljs-type\\\">Promise</span>.resolved(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>);\\n<span class=\\\"hljs-type\\\">Js</span>.log(p);    <span class=\\\"hljs-comment\\\">/* Promise { 'Hello' } */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> p = <span class=\\\"hljs-type\\\">Promise</span>.resolved <span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>\\n<span class=\\\"hljs-keyword\\\">let</span> _ = <span class=\\\"hljs-type\\\">Js</span>.log p</code></pre>\\n      </div>\\n    </div>\\n  \\n<p>...and <a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L28-L30\\\"><code>Promise.exec</code></a> is for wrapping functions that take callbacks:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code>[@bs.<span class=\\\"hljs-keyword\\\">val</span>]\\nexternal setTimeout: (unit =&gt; unit, int) =&gt; unit = <span class=\\\"hljs-string\\\">\\\"setTimeout\\\"</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> p = <span class=\\\"hljs-type\\\">Promise</span>.exec(resolve =&gt; setTimeout(resolve, <span class=\\\"hljs-number\\\">1000</span>));\\n<span class=\\\"hljs-type\\\">Js</span>.log(p);    <span class=\\\"hljs-comment\\\">/* Promise { &lt;pending&gt; } */</span>\\n\\n<span class=\\\"hljs-comment\\\">/* Program then waits for one second before exiting. */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">external</span> setTimeout : (<span class=\\\"hljs-built_in\\\">unit</span> -&gt; <span class=\\\"hljs-built_in\\\">unit</span>) -&gt; <span class=\\\"hljs-built_in\\\">int</span> -&gt; <span class=\\\"hljs-built_in\\\">unit</span> = <span class=\\\"hljs-string\\\">\\\"setTimeout\\\"</span>[@@bs.<span class=\\\"hljs-keyword\\\">val</span> ]\\n<span class=\\\"hljs-keyword\\\">let</span> p = <span class=\\\"hljs-type\\\">Promise</span>.exec (<span class=\\\"hljs-keyword\\\">fun</span> resolve  -&gt; setTimeout resolve <span class=\\\"hljs-number\\\">1000</span>)\\n<span class=\\\"hljs-keyword\\\">let</span> _ = <span class=\\\"hljs-type\\\">Js</span>.log p</code></pre>\\n      </div>\\n    </div>\\n  \\n<br/>\\n<p><a id=\\\"Values\\\"></a></p>\\n<h3 id=\\\"getting-values-from-promises\\\"><a href=\\\"#getting-values-from-promises\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Getting values from promises</h3>\\n<p>To do something once a promise is resolved, use <a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L35-L37\\\"><code>Promise.get</code></a>:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> (p, resolve) = <span class=\\\"hljs-type\\\">Promise</span>.pending();\\n\\np-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-keyword\\\">get</span>(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(s));\\n\\nresolve(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>);   <span class=\\\"hljs-comment\\\">/* Prints \\\"Hello\\\". */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<br/>\\n<p><a id=\\\"Transforming\\\"></a></p>\\n<h3 id=\\\"transforming-promises\\\"><a href=\\\"#transforming-promises\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Transforming promises</h3>\\n<p>Use <a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L43-L45\\\"><code>Promise.map</code></a> to transform the value inside a promise:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> (p, resolve) = <span class=\\\"hljs-type\\\">Promise</span>.pending();\\n\\np\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-built_in\\\">map</span>(s =&gt; s ++ <span class=\\\"hljs-string\\\">\\\" world\\\"</span>)\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-keyword\\\">get</span>(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(s));\\n\\nresolve(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>);   <span class=\\\"hljs-comment\\\">/* Hello world */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>To be precise, <code>Promise.map</code> creates a <em>new</em> promise with the transformed value.</p>\\n<p>If the function you are using to transform the value also returns a promise,\\nuse <a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L47-L49\\\"><code>Promise.flatMap</code></a> instead of <code>Promise.map</code>. <code>Promise.flatMap</code>\\nwill flatten the nested promise.</p>\\n<br/>\\n<p><a id=\\\"Tracing\\\"></a></p>\\n<h3 id=\\\"tracing\\\"><a href=\\\"#tracing\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tracing</h3>\\n<p>If you have a chain of promise operations, and you'd like to inspect the value\\nin the middle of the chain, use <a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L39-L41\\\"><code>Promise.tap</code></a>:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> (p, resolve) = <span class=\\\"hljs-type\\\">Promise</span>.pending();\\n\\np\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.tap(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-string\\\">\\\"Value is now: \\\"</span> ++ s))\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-built_in\\\">map</span>(s =&gt; s ++ <span class=\\\"hljs-string\\\">\\\" world\\\"</span>)\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.tap(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-string\\\">\\\"Value is now: \\\"</span> ++ s))\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-keyword\\\">get</span>(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(s));\\n\\nresolve(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>);\\n\\n<span class=\\\"hljs-comment\\\">/*\\nValue is now: Hello\\nValue is now: Hello world\\nHello world\\n*/</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<br/>\\n<p><a id=\\\"Combining\\\"></a></p>\\n<h3 id=\\\"concurrent-combinations\\\"><a href=\\\"#concurrent-combinations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Concurrent combinations</h3>\\n<p><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L123-L125\\\"><code>Promise.race</code></a> waits for <em>one</em> of the promises passed to it to resolve:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code>[@bs.<span class=\\\"hljs-keyword\\\">val</span>]\\nexternal setTimeout: (unit =&gt; unit, int) =&gt; unit = <span class=\\\"hljs-string\\\">\\\"setTimeout\\\"</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> one_second = <span class=\\\"hljs-type\\\">Promise</span>.exec(resolve =&gt; setTimeout(resolve, <span class=\\\"hljs-number\\\">1000</span>));\\n<span class=\\\"hljs-keyword\\\">let</span> five_seconds = <span class=\\\"hljs-type\\\">Promise</span>.exec(resolve =&gt; setTimeout(resolve, <span class=\\\"hljs-number\\\">5000</span>));\\n\\n<span class=\\\"hljs-type\\\">Promise</span>.race([one_second, five_seconds])\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-keyword\\\">get</span>(() =&gt; { <span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>); exit(<span class=\\\"hljs-number\\\">0</span>); });\\n\\n<span class=\\\"hljs-comment\\\">/* Prints \\\"Hello\\\" after one second. */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L127-L129\\\"><code>Promise.all</code></a> instead waits for <em>all</em> of the promises passed to it,\\nconcurrently:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code>[@bs.<span class=\\\"hljs-keyword\\\">val</span>]\\nexternal setTimeout: (unit =&gt; unit, int) =&gt; unit = <span class=\\\"hljs-string\\\">\\\"setTimeout\\\"</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> one_second = <span class=\\\"hljs-type\\\">Promise</span>.exec(resolve =&gt; setTimeout(resolve, <span class=\\\"hljs-number\\\">1000</span>));\\n<span class=\\\"hljs-keyword\\\">let</span> five_seconds = <span class=\\\"hljs-type\\\">Promise</span>.exec(resolve =&gt; setTimeout(resolve, <span class=\\\"hljs-number\\\">5000</span>));\\n\\n<span class=\\\"hljs-type\\\">Promise</span>.all([one_second, five_seconds])\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-keyword\\\">get</span>(<span class=\\\"hljs-number\\\">_</span> =&gt; { <span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>); exit(<span class=\\\"hljs-number\\\">0</span>); });\\n\\n<span class=\\\"hljs-comment\\\">/* Prints \\\"Hello\\\" after five seconds. */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>For convenience, there are several variants of <code>Promise.all</code>:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L135-L137\\\"><code>Promise.all2</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L139-L141\\\"><code>Promise.all3</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L143-L145\\\"><code>Promise.all4</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L147-L149\\\"><code>Promise.all5</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L151-L158\\\"><code>Promise.all6</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L131-L133\\\"><code>Promise.allArray</code></a></li>\\n</ul>\\n<br/>\\n<p><a id=\\\"Errors\\\"></a></p>\\n<h3 id=\\\"handling-errors-with-result\\\"><a href=\\\"#handling-errors-with-result\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Handling errors with <code>Result</code></h3>\\n<p>Promises that can fail are represented using the standard library's\\n<a href=\\\"https://bucklescript.github.io/bucklescript/api/Belt.Result.html\\\"><code>Result</code></a>, and its constructors <code>Ok</code> and <code>Error</code>:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code>open <span class=\\\"hljs-type\\\">Belt</span>.<span class=\\\"hljs-type\\\">Result</span>;\\n\\n<span class=\\\"hljs-type\\\">Promise</span>.resolved(<span class=\\\"hljs-type\\\">Ok</span>(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>))\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.getOk(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(s));      <span class=\\\"hljs-comment\\\">/* Hello */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L57-L59\\\"><code>Promise.getOk</code></a> waits for <code>p</code> to have a value, and runs its function\\nonly if that value is <code>Ok(_)</code>. If you instead resolve the promise with\\n<code>Error(_)</code>, there will be no output:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code>open <span class=\\\"hljs-type\\\">Belt</span>.<span class=\\\"hljs-type\\\">Result</span>;\\n\\n<span class=\\\"hljs-type\\\">Promise</span>.resolved(<span class=\\\"hljs-type\\\">Error</span>(<span class=\\\"hljs-string\\\">\\\"Failed\\\"</span>))\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.getOk(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(s));      <span class=\\\"hljs-comment\\\">/* Program just exits. */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>You can wait for either kind of value by calling <a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L57-L59\\\"><code>Promise.getOk</code></a> and\\n<a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L73-L75\\\"><code>Promise.getError</code></a>:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code>open <span class=\\\"hljs-type\\\">Belt</span>.<span class=\\\"hljs-type\\\">Result</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> () = {\\n  <span class=\\\"hljs-keyword\\\">let</span> p = <span class=\\\"hljs-type\\\">Promise</span>.resolved(<span class=\\\"hljs-type\\\">Error</span>(<span class=\\\"hljs-string\\\">\\\"Failed\\\"</span>));\\n  p-&gt;<span class=\\\"hljs-type\\\">Promise</span>.getOk(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(s));\\n  p-&gt;<span class=\\\"hljs-type\\\">Promise</span>.getError(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-string\\\">\\\"Error: \\\"</span> ++ s));\\n};                                    <span class=\\\"hljs-comment\\\">/* Error: Failed */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">967</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>...or respond to all outcomes using the ordinary <a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L35-L37\\\"><code>Promise.get</code></a>:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code>open <span class=\\\"hljs-type\\\">Belt</span>.<span class=\\\"hljs-type\\\">Result</span>;\\n\\n<span class=\\\"hljs-type\\\">Promise</span>.resolved(<span class=\\\"hljs-type\\\">Error</span>(<span class=\\\"hljs-string\\\">\\\"Failed\\\"</span>))\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-keyword\\\">get</span>(result =&gt;\\n  <span class=\\\"hljs-keyword\\\">switch</span> (result) {\\n  | <span class=\\\"hljs-type\\\">Ok</span>(s) =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(s);\\n  | <span class=\\\"hljs-type\\\">Error</span>(s) =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-string\\\">\\\"Error: \\\"</span> ++ s);\\n  });                                 <span class=\\\"hljs-comment\\\">/* Error: Failed */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>The full set of functions for handling results is:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L57-L59\\\"><code>Promise.getOk</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L61-L63\\\"><code>Promise.tapOk</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L65-L67\\\"><code>Promise.mapOk</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L69-L71\\\"><code>Promise.flatMapOk</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L73-L75\\\"><code>Promise.getError</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L77-L79\\\"><code>Promise.tapError</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L81-L83\\\"><code>Promise.mapError</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L85-L87\\\"><code>Promise.flatMapError</code></a></li>\\n</ul>\\n<p>There are also similar functions for working with <a href=\\\"https://bucklescript.github.io/bucklescript/api/Belt.Option.html\\\"><code>Option</code></a>:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L104-L106\\\"><code>Promise.getSome</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L108-L110\\\"><code>Promise.tapSome</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L112-L114\\\"><code>Promise.mapSome</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L116-L118\\\"><code>Promise.flatMapSome</code></a></li>\\n</ul>\\n<p>In addition, there is also a set of variants of <code>Promise.all</code> for results, which\\npropagate any <code>Error(_)</code> as soon as it is received:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/8142b0c4cb5e88e0241c3a6926fdf096b1b96935/src/js/promise.rei#L160-L162\\\"><code>Promise.allOk</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/8142b0c4cb5e88e0241c3a6926fdf096b1b96935/src/js/promise.rei#L168-L170\\\"><code>Promise.allOk2</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/8142b0c4cb5e88e0241c3a6926fdf096b1b96935/src/js/promise.rei#L172-L176\\\"><code>Promise.allOk3</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/8142b0c4cb5e88e0241c3a6926fdf096b1b96935/src/js/promise.rei#L178-L183\\\"><code>Promise.allOk4</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/8142b0c4cb5e88e0241c3a6926fdf096b1b96935/src/js/promise.rei#L185-L191\\\"><code>Promise.allOk5</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/8142b0c4cb5e88e0241c3a6926fdf096b1b96935/src/js/promise.rei#L193-L200\\\"><code>Promise.allOk6</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/8142b0c4cb5e88e0241c3a6926fdf096b1b96935/src/js/promise.rei#L164-L166\\\"><code>Promise.allOkArray</code></a></li>\\n</ul>\\n<p>If you'd like instead to fully wait for all the promises to resolve with either\\n<code>Ok(_)</code> or <code>Error(_)</code>, you can use the ordinary <code>Promise.all</code> and its variants.</p>\\n<br/>\\n<p><a id=\\\"Rejection\\\"></a></p>\\n<h3 id=\\\"advanced-rejection\\\"><a href=\\\"#advanced-rejection\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Advanced: Rejection</h3>\\n<p>As you can see from <a href=\\\"#Errors\\\">Handling errors</a>, <code>Promise</code> doesn't use rejection\\nfor errors — but JavaScript promises do. In order to support bindings to\\nJavaScript libraries, which often return promises that can be rejected,\\n<code>Promise</code> provides the <a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L163\\\"><code>Promise.Js</code></a> helper module.</p>\\n<p><code>Promise.Js</code> works the same way as <code>Promise</code>. It similarly has:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L180-L182\\\"><code>Promise.Js.get</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L184-L186\\\"><code>Promise.Js.tap</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L188-L190\\\"><code>Promise.Js.map</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L192-L194\\\"><code>Promise.Js.flatMap</code></a></li>\\n</ul>\\n<p>However, because <code>Promise.Js</code> uses JS rejection for error handling rather than\\n<code>Result</code> or <code>Option</code>,</p>\\n<ul>\\n<li>There are no helpers for <code>Result</code> and <code>Option</code>.</li>\\n<li>There is <a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L197-L199\\\"><code>Promise.Js.catch</code></a> for handling rejection.</li>\\n<li>There is <a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L175-L177\\\"><code>Promise.Js.rejected</code></a> for creating an\\nalready-rejected promise.</li>\\n</ul>\\n<p>Underneath, <code>Promise</code> and <code>Promise.Js</code> have the same implementation:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> <span class=\\\"hljs-type\\\">Promise</span>.t('a) = <span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-type\\\">Js</span>.t('a, never);</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">3647</span>: &lt;<span class=\\\"hljs-type\\\">UNKNOWN</span> <span class=\\\"hljs-type\\\">SYNTAX</span> <span class=\\\"hljs-type\\\">ERROR</span>&gt;</code></pre>\\n      </div>\\n    </div>\\n  \\n<p>That is, <code>Promise</code> is really <code>Promise.Js</code> that has no rejection type, and no\\nexposed helpers for rejection.</p>\\n<p>There are several helpers for converting between <code>Promise</code> and <code>Promise.Js</code>:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L211-L213\\\"><code>Promise.Js.relax</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L215-L217\\\"><code>Promise.Js.toResult</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L219-L221\\\"><code>Promise.Js.fromResult</code></a></li>\\n</ul>\\n<p><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L197-L199\\\"><code>Promise.Js.catch</code></a> can also perform a conversion to <code>Promise</code>, if\\nyou simply convert a rejection to a resolution. In the next example, note the\\nfinal line is no longer using <code>Promise.Js</code>, but <code>Promise</code>:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-type\\\">Js</span>.rejected(<span class=\\\"hljs-string\\\">\\\"Failed\\\"</span>)\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-type\\\">Js</span>.catch(s =&gt; <span class=\\\"hljs-type\\\">Promise</span>.resolved(<span class=\\\"hljs-string\\\">\\\"Error: \\\"</span> ++ s))\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-keyword\\\">get</span>(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(s));        <span class=\\\"hljs-comment\\\">/* Error: Failed */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>There are also two functions for converting between <code>Promise.Js</code> and the current\\npromise binding in the BuckleScript standard libarary, <code>Js.Promise</code>:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L223-L225\\\"><code>Promise.Js.fromBsPromise</code></a></li>\\n<li><a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L227-L229\\\"><code>Promise.Js.toBsPromise</code></a></li>\\n</ul>\\n<p>Because both libraries are bindings for the same exact kind of value, these are\\nboth no-op identity functions that only change the type.</p>\\n<br>\\n<p><a id=\\\"Bindings\\\"></a></p>\\n<h3 id=\\\"advanced-bindings\\\"><a href=\\\"#advanced-bindings\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Advanced: Bindings</h3>\\n<p>Refer to the <a href=\\\"https://github.com/aantron/promise-example-binding\\\">example node-fetch binding repo</a>.</p>\\n<p>When you want to bind a JS function that <em>returns</em> a promise, you can use\\n<code>Promise</code> directly in its return value:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* A mock JS library. */</span>\\n[%%bs.raw {|\\nfunction delay(value, milliseconds) {\\n  <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-type\\\">Promise</span>(function(resolve) {\\n    setTimeout(function() { resolve(value); }, milliseconds)\\n  });\\n}|}]\\n\\n<span class=\\\"hljs-comment\\\">/* Our binding. */</span>\\n[@bs.<span class=\\\"hljs-keyword\\\">val</span>]\\nexternal delay: ('a, int) =&gt; <span class=\\\"hljs-type\\\">Promise</span>.t('a) = <span class=\\\"hljs-string\\\">\\\"delay\\\"</span>;\\n\\n<span class=\\\"hljs-comment\\\">/* Usage. */</span>\\ndelay(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>, <span class=\\\"hljs-number\\\">1000</span>)\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-keyword\\\">get</span>(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(s));\\n\\n<span class=\\\"hljs-comment\\\">/* Prints \\\"Hello\\\" after one second. */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2305</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>If the promise can be rejected, you should use <code>Promise.Js</code> instead, and\\n<a href=\\\"#Rejection\\\">convert to <code>Promise</code></a> as quickly as possible, with intelligent\\nhandling of rejection. Here is one way to do that:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* Mock JS library. */</span>\\n[%%bs.raw {|\\nfunction delayReject(value, milliseconds) {\\n  <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-type\\\">Promise</span>(function(resolve, reject) {\\n    setTimeout(function() { reject(value); }, milliseconds)\\n  });\\n}|}]\\n\\n<span class=\\\"hljs-comment\\\">/* Binding. */</span>\\n[@bs.<span class=\\\"hljs-keyword\\\">val</span>]\\nexternal delayRejectRaw: ('a, int) =&gt; <span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-type\\\">Js</span>.t(<span class=\\\"hljs-number\\\">_</span>, 'a) = <span class=\\\"hljs-string\\\">\\\"delayReject\\\"</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> delayReject = (value, milliseconds) =&gt;\\n  delayRejectRaw(value, milliseconds)\\n  -&gt;<span class=\\\"hljs-type\\\">Promise</span>.<span class=\\\"hljs-type\\\">Js</span>.toResult;\\n\\n<span class=\\\"hljs-comment\\\">/* Usage. */</span>\\ndelayReject(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>, <span class=\\\"hljs-number\\\">1000</span>)\\n-&gt;<span class=\\\"hljs-type\\\">Promise</span>.getError(s =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(s));\\n\\n<span class=\\\"hljs-comment\\\">/* Prints \\\"Hello\\\" after one second. */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2305</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>Note that this binding has two steps: there is a raw binding, and then an extra\\nwrapper that converts rejections into <code>Result</code>s. If the potential rejections\\nare messy, this is a good place to insert additional logic for converting them\\nto nice Reason values :)</p>\\n<p>When <em>passing</em> a promise to JS, it is generally safe to use <code>Promise</code> rather\\nthan <code>Promise.Js</code>:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* Mock JS library. */</span>\\n[%%bs.raw {|\\nfunction log(p) {\\n  p.then(function (v) { console.log(v); });\\n}|}]\\n\\n<span class=\\\"hljs-comment\\\">/* Binding. */</span>\\n[@bs.<span class=\\\"hljs-keyword\\\">val</span>]\\nexternal log: <span class=\\\"hljs-type\\\">Promise</span>.t('a) =&gt; unit = <span class=\\\"hljs-string\\\">\\\"log\\\"</span>;\\n\\n<span class=\\\"hljs-comment\\\">/* Usage. */</span>\\nlog(<span class=\\\"hljs-type\\\">Promise</span>.resolved(<span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>));       <span class=\\\"hljs-comment\\\">/* Hello */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2305</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<br/>\\n<p><a id=\\\"JSPromiseFlattening\\\"></a></p>\\n<h3 id=\\\"discussion-why-js-promises-are-unsafe\\\"><a href=\\\"#discussion-why-js-promises-are-unsafe\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Discussion: Why JS promises are unsafe</h3>\\n<p>The JS function <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\\\"><code>Promise.resolve</code></a> has a special case, which\\nis triggered when you try to resolve a promise with another, nested promise.\\nUnfortunately, this special case makes it impossible to assign\\n<code>Promise.resolve</code> a consistent type in Reason (and most type systems).</p>\\n<p>Here are the details. The code will use\\n<a href=\\\"https://bucklescript.github.io/bucklescript/api/Js.Promise.html#VALresolve\\\"><code>Js.Promise.resolve</code></a>, BuckleScript's direct binding to\\nJS's <code>Promise.resolve</code>.</p>\\n<p><code>Js.Promise.resolve</code> takes a value, and creates a promise containing that value:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.resolve(<span class=\\\"hljs-number\\\">1</span>));\\n<span class=\\\"hljs-comment\\\">/* Promise { 1 } */</span>\\n\\n<span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.resolve(<span class=\\\"hljs-string\\\">\\\"foo\\\"</span>));\\n<span class=\\\"hljs-comment\\\">/* Promise { 'foo' } */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> _ = <span class=\\\"hljs-type\\\">Js</span>.log (<span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.resolve <span class=\\\"hljs-number\\\">1</span>)\\n<span class=\\\"hljs-keyword\\\">let</span> _ = <span class=\\\"hljs-type\\\">Js</span>.log (<span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.resolve <span class=\\\"hljs-string\\\">\\\"foo\\\"</span>)</code></pre>\\n      </div>\\n    </div>\\n  \\n<p>So, we should give it the type</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.resolve: 'a =&gt; <span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.t('a);</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>and, indeed, that's the type it <a href=\\\"https://bucklescript.github.io/bucklescript/api/Js.Promise.html#VALresolve\\\">has</a> in BuckleScript.</p>\\n<p>Following the pattern, we would <em>expect</em>:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> nestedPromise = <span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.resolve(<span class=\\\"hljs-number\\\">1</span>);\\n\\n<span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.resolve(nestedPromise));\\n<span class=\\\"hljs-comment\\\">/* Promise { Promise { 1 } } */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> nestedPromise = <span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.resolve <span class=\\\"hljs-number\\\">1</span>\\n<span class=\\\"hljs-keyword\\\">let</span> _ = <span class=\\\"hljs-type\\\">Js</span>.log (<span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.resolve nestedPromise)</code></pre>\\n      </div>\\n    </div>\\n  \\n<p>But that's not what happens! Instead, the output is just</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* Promise { 1 } */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>The nested promise is missing! But the type system, following the pattern,\\nstill thinks that this resulting value has type</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.t(<span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.t(int))</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> _ = <span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.t (<span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.t <span class=\\\"hljs-built_in\\\">int</span>)</code></pre>\\n      </div>\\n    </div>\\n  \\n<p>i.e., the type of the value we were (reasonably) expecting.</p>\\n<p>When you pass <code>nestedPromise</code> to <code>Js.Promise.resolve</code>, JS unwraps\\n<code>nestedPromise</code>, violating the type! There is no easy way to encode such special\\ncasing in the type system — especially since JS does it not only to\\nnested promises, but to any would-be nested object that has a <code>.then</code> method.</p>\\n<p>The result is, if your program executes something like this, it will have\\nordinary values in places where it expects another level of promises. For\\nexample, if you do</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> nestedPromise = <span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.resolve(<span class=\\\"hljs-number\\\">1</span>);\\n\\n<span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.resolve(nestedPromise)\\n-&gt;<span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.then_(p =&gt; <span class=\\\"hljs-comment\\\">/* ... */</span>)</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<p>you would <em>expect</em> <code>p</code> in the callback to be a promise containing <code>1</code>, and the\\ntype of <code>p</code> is indeed <code>Js.Promise.t(int)</code>. Instead, however, <code>p</code> is just the\\nbare value <code>1</code>. That means the callback will cause a runtime error as soon as\\nit tries to use promise functions on the <code>1</code>. Worse, you might store <code>p</code> in a\\ndata structure, and the runtime error will occur at a very distant place in the\\ncode. The type system is supposed to prevent such errors! That's part of the\\npoint of using Reason.</p>\\n<p>The same special casing occurs throughout the JS <code>Promise</code> API — for\\nexample, when you return a promise from the callback of <code>then_</code>. This means that\\n<em>most</em> of the JS <code>Promise</code> functions can't be assigned a correct type and\\ndirectly, safely be used from Reason.</p>\\n<br/>\\n<p><a id=\\\"TypeSafety\\\"></a></p>\\n<h3 id=\\\"discussion-how-reason-promise-makes-promises-type-safe\\\"><a href=\\\"#discussion-how-reason-promise-makes-promises-type-safe\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Discussion: How <code>reason-promise</code> makes promises type-safe</h3>\\n<p>The <a href=\\\"#JSPromiseFlattening\\\">previous section</a> shows that JS promise functions are\\nbroken. An important observation is that it is only the <em>functions</em> that are\\nbroken — the promise <em>data structure</em> is not. That means that to make JS\\npromises type-safe, we can keep the existing JS data structure, and just provide\\nsafe replacement functions to use with it in Reason. This is good news\\nfor interop :)</p>\\n<p>To fix the functions, only the <a href=\\\"#JSPromiseFlattening\\\">special-case flattening</a>\\nhas to be undone. So, when you call <code>reason-promise</code>'s\\n<a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L24-L26\\\"><code>Promise.resolved(value)</code></a>, it checks whether <code>value</code> is a promise\\nor not, and...</p>\\n<ul>\\n<li>\\n<p>If <code>value</code> <em>is not</em> a promise, <code>reason-promise</code> just passes it to JS's\\n<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\\\"><code>Promise.resolve</code></a>, because JS will do the right thing.</p>\\n</li>\\n<li>\\n<p>If <code>value</code> <em>is</em> a promise, it's not safe to simply pass it to JS, because it\\nwill trigger the special-casing. So, <code>reason-promise</code> boxes the nested\\npromise:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> nestedPromise = <span class=\\\"hljs-type\\\">Promise</span>.resolved(<span class=\\\"hljs-number\\\">1</span>);\\n\\n<span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-type\\\">Promise</span>.resolved(nestedPromise));\\n<span class=\\\"hljs-comment\\\">/* Promise { PromiseBox { Promise { 1 } } } */</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> nestedPromise = <span class=\\\"hljs-type\\\">Promise</span>.resolved <span class=\\\"hljs-number\\\">1</span>\\n<span class=\\\"hljs-keyword\\\">let</span> _ = <span class=\\\"hljs-type\\\">Js</span>.log (<span class=\\\"hljs-type\\\">Promise</span>.resolved nestedPromise)</code></pre>\\n      </div>\\n    </div>\\n  \\n<p>This box, of course, is not a promise, so inserting it in the middle is\\nenough to suppress the special-casing.</p>\\n<p>Whenever you try to take the value out of this resulting structure (for\\nexample, by calling <a href=\\\"https://github.com/aantron/promise/blob/51001f911ff31ecf51a633fba9f782769a2726c9/src/js/promise.rei#L35-L37\\\"><code>Promise.get</code></a> on it), <code>reason-promise</code>\\ntransparently unboxes the <code>PromiseBox</code> and passes the nested promise to your\\ncallback — as your callback would expect.</p>\\n</li>\\n</ul>\\n<p>This conditional boxing and unboxing is done throughout <code>reason-promise</code>. It\\nonly happens for nested promises, and anything else with a <code>.then</code> method. For\\nall other values, <code>reason-promise</code> behaves, internally, exactly like JS\\n<code>Promise</code> (though with a cleaner outer API). This is enough to make promises\\ntype-safe.</p>\\n<p>This is a simple scheme, but <code>reason-promise</code> includes a very thorough\\n<a href=\\\"https://github.com/aantron/promise/tree/master/test\\\">test suite</a> to be extra sure that it always manages the boxing\\ncorrectly.</p>\\n<p>This conditional boxing is similar to how unboxed optionals are implemented in\\nBuckleScript. Optionals are almost always unboxed, but when BuckleScript isn't\\nsure that the unboxing will be safe, it inserts a runtime check that boxes some\\nvalues, while still keeping most values unboxed.</p>\\n<!-- YOU HAVE FOUND THE SECRET EASTER EGG! -->\\n\",\"homepageUrl\":\"https://github.com/aantron/promise\",\"repositoryUrl\":\"https://github.com/aantron/promise\",\"npmUrl\":\"https://www.npmjs.com/package/reason-promise\",\"issuesUrl\":\"https://github.com/aantron/promise/issues\",\"slug\":\"/package/reason-promise\"}},\"pathContext\":{\"id\":\"reason-promise\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/package-reason-promise.json\n// module id = 1381\n// module chunks = 127111391366410"],"sourceRoot":""}