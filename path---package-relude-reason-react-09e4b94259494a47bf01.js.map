{"version":3,"sources":["webpack:///path---package-relude-reason-react-09e4b94259494a47bf01.js","webpack:///./.cache/json/package-relude-reason-react.json"],"names":["webpackJsonp","1401","module","exports","data","package","type","id","name","version","category","flags","platforms","description","keywords","license","updated","stars","score","quality","popularity","maintenance","readme","homepageUrl","repositoryUrl","npmUrl","issuesUrl","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,SAAWC,KAAA,YAAAC,GAAA,sBAAAC,KAAA,sBAAAC,QAAA,QAAAC,SAAA,UAAAC,SAAAC,WAAA,WAAAC,YAAA,yCAAAC,UAAA,iCAAAC,QAAA,MAAAC,QAAA,2BAAAC,MAAA,GAAAC,MAAA,kBAAAC,QAAA,kBAAAC,WAAA,mBAAAC,YAAA,iBAAAC,OAAA;AAAsvxCC,YAAA,gDAAAC,cAAA,gDAAAC,OAAA,oDAAAC,UAAA,uDAAAC,KAAA,iCAAwUC,aAAgBrB,GAAA","file":"path---package-relude-reason-react-09e4b94259494a47bf01.js","sourcesContent":["webpackJsonp([72388055383548],{\n\n/***/ 1401:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"package\":{\"type\":\"published\",\"id\":\"relude-reason-react\",\"name\":\"relude-reason-react\",\"version\":\"0.8.1\",\"category\":\"library\",\"flags\":[],\"platforms\":[\"browser\"],\"description\":\"Relude-based utilities for ReasonReact\",\"keywords\":[\"state management\",\"react\",\"ui\"],\"license\":\"MIT\",\"updated\":\"2020-01-27T15:08:29.701Z\",\"stars\":27,\"score\":0.6220243113278466,\"quality\":0.8304821684688354,\"popularity\":0.06596875419363962,\"maintenance\":0.999401705198349,\"readme\":\"<h1 id=\\\"relude-reason-react\\\"><a href=\\\"#relude-reason-react\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>relude-reason-react</h1>\\n<p><a href=\\\"https://github.com/reazen/relude-reason-react/actions\\\"><img src=\\\"https://img.shields.io/github/workflow/status/reazen/relude-reason-react/CI/master\\\" alt=\\\"GitHub CI\\\"></a>\\n<a href=\\\"https://www.npmjs.com/package/relude-reason-react\\\"><img src=\\\"https://img.shields.io/npm/v/relude-reason-react.svg\\\" alt=\\\"npm\\\"></a></p>\\n<h1 id=\\\"overview\\\"><a href=\\\"#overview\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Overview</h1>\\n<p>Relude-based utilities for ReasonReact</p>\\n<h1 id=\\\"documentation\\\"><a href=\\\"#documentation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Documentation</h1>\\n<h2 id=\\\"reludereactreducerusereducer-hook\\\"><a href=\\\"#reludereactreducerusereducer-hook\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>ReludeReact.Reducer.useReducer</code> hook</h2>\\n<p>The <code>ReludeReact.Reducer.useReducer</code> hook was inspired by the original/pre-hooks <a href=\\\"https://reasonml.github.io/reason-react/docs/fr/jsx-2\\\">ReasonReact record API</a>, and the hooks-based <a href=\\\"https://github.com/bloodyowl/reason-react-update\\\">reason-react-update</a> libray by <a href=\\\"https://github.com/bloodyowl\\\">Matthias Le Brun (bloodyowl)</a>.</p>\\n<p><code>ReludeReact.Reducer.useReducer</code> is similar to the <a href=\\\"https://reactjs.org/docs/hooks-reference.html#usereducer\\\">React <code>useReducer</code> hook</a> with the key difference that the React <code>useReducer</code> only allows\\nyou to change the state, whereas the <code>ReludeReact.Reducer.useReducer</code> allows you to both change the state, and to safely emit side effects or <code>Relude.IO</code>-based actions, which can result in the emission of further actions.</p>\\n<p>To use the <code>ReludeReact.Reducer.useReducer</code> hook, you must provide a reducer function of the following type:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> reducer('action, 'state) = ('state, 'action) =&gt; update('action, 'state);</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">type</span> (<span class=\\\"hljs-symbol\\\">'action</span>,<span class=\\\"hljs-symbol\\\">'state</span>) reducer = <span class=\\\"hljs-symbol\\\">'state</span> -&gt; <span class=\\\"hljs-symbol\\\">'action</span> -&gt; (<span class=\\\"hljs-symbol\\\">'action</span>,<span class=\\\"hljs-symbol\\\">'state</span>) update</code></pre>\\n      </div>\\n    </div>\\n  \\n<p>A function that accepts the current <code>'state</code> and an <code>'action</code>, and returns a value of type <code>update('action, 'state)</code></p>\\n<p>The <code>update</code> value is a variant with the following type:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> update('action, 'state) =\\n  | <span class=\\\"hljs-type\\\">NoUpdate</span>\\n  | <span class=\\\"hljs-type\\\">Update</span>('state)\\n  | <span class=\\\"hljs-type\\\">UpdateWithSideEffect</span>('state, <span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Uncancelable</span>.t('action, 'state))\\n  | <span class=\\\"hljs-type\\\">SideEffect</span>(<span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Uncancelable</span>.t('action, 'state))\\n  | <span class=\\\"hljs-type\\\">UpdateWithCancelableSideEffect</span>(\\n      'state,\\n      <span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Cancelable</span>.t('action, 'state),\\n    )\\n  | <span class=\\\"hljs-type\\\">CancelableSideEffect</span>(<span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Cancelable</span>.t('action, 'state))\\n  | <span class=\\\"hljs-type\\\">UpdateWithIO</span>('state, <span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Uncancelable</span>.<span class=\\\"hljs-type\\\">IO</span>.t('action, 'state))\\n  | <span class=\\\"hljs-type\\\">IO</span>(<span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Uncancelable</span>.<span class=\\\"hljs-type\\\">IO</span>.t('action, 'state));</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">type</span> (<span class=\\\"hljs-symbol\\\">'action</span>,<span class=\\\"hljs-symbol\\\">'state</span>) update =\\n  | <span class=\\\"hljs-type\\\">NoUpdate</span>\\n  | <span class=\\\"hljs-type\\\">Update</span> <span class=\\\"hljs-keyword\\\">of</span> <span class=\\\"hljs-symbol\\\">'state</span>\\n  | <span class=\\\"hljs-type\\\">UpdateWithSideEffect</span> <span class=\\\"hljs-keyword\\\">of</span> <span class=\\\"hljs-symbol\\\">'state</span>* (<span class=\\\"hljs-symbol\\\">'action</span>,<span class=\\\"hljs-symbol\\\">'state</span>)\\n  <span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Uncancelable</span>.t\\n  | <span class=\\\"hljs-type\\\">SideEffect</span> <span class=\\\"hljs-keyword\\\">of</span> (<span class=\\\"hljs-symbol\\\">'action</span>,<span class=\\\"hljs-symbol\\\">'state</span>) <span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Uncancelable</span>.t\\n  | <span class=\\\"hljs-type\\\">UpdateWithCancelableSideEffect</span> <span class=\\\"hljs-keyword\\\">of</span> <span class=\\\"hljs-symbol\\\">'state</span>* (<span class=\\\"hljs-symbol\\\">'action</span>,<span class=\\\"hljs-symbol\\\">'state</span>)\\n  <span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Cancelable</span>.t\\n  | <span class=\\\"hljs-type\\\">CancelableSideEffect</span> <span class=\\\"hljs-keyword\\\">of</span> (<span class=\\\"hljs-symbol\\\">'action</span>,<span class=\\\"hljs-symbol\\\">'state</span>) <span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Cancelable</span>.t\\n  | <span class=\\\"hljs-type\\\">UpdateWithIO</span> <span class=\\\"hljs-keyword\\\">of</span> <span class=\\\"hljs-symbol\\\">'state</span>* (<span class=\\\"hljs-symbol\\\">'action</span>,<span class=\\\"hljs-symbol\\\">'state</span>) <span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Uncancelable</span>.<span class=\\\"hljs-type\\\">IO</span>.t\\n  | <span class=\\\"hljs-type\\\">IO</span> <span class=\\\"hljs-keyword\\\">of</span> (<span class=\\\"hljs-symbol\\\">'action</span>,<span class=\\\"hljs-symbol\\\">'state</span>) <span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Uncancelable</span>.<span class=\\\"hljs-type\\\">IO</span>.t</code></pre>\\n      </div>\\n    </div>\\n  \\n<p>Basically, this means that in your <code>ReludeReact.useReducer</code> component, for any action that occurs,\\nyou can respond to the action by doing any of the following things:</p>\\n<h3 id=\\\"noupdate\\\"><a href=\\\"#noupdate\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>NoUpdate</code></h3>\\n<p>Don't change the state, and don't perform an side effects or IO-based effects.  Basically a no-op - useful as a placeholder or to stub out actions prior to providing the implementations.</p>\\n<h3 id=\\\"updatestate\\\"><a href=\\\"#updatestate\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>Update(state)</code></h3>\\n<p>Update the component state to the given value, but don't perform any side effects or IO-based effects.</p>\\n<h3 id=\\\"updatewithsideeffectstate-state-send--unit\\\"><a href=\\\"#updatewithsideeffectstate-state-send--unit\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>UpdateWithSideEffect(state, {state, send} => unit)</code></h3>\\n<p>Update the component state to the given value, and perform the given side effect (basically a function that is given a context record of <code>state</code> and <code>send</code> and is allowed to perform any type of sync or async side effect, and emit additional actions via <code>send</code>, which is a function of type  <code>action => unit</code>, and ultimately return unit <code>()</code>.  In this case, the side effect is Uncancelable, which means, there is no way to cancel it later.</p>\\n<p>These types of side effects are useful for doing things like pushing a history state to navigate to a different URL, doing one-off DOM manipulations, or other types of things you don't want or need to manage or control.</p>\\n<h3 id=\\\"sideeffectstate-send--unit\\\"><a href=\\\"#sideeffectstate-send--unit\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>SideEffect({state, send} => unit)</code></h3>\\n<p>Same as <code>UpdateWithSideEffect</code>, but with no state update.</p>\\n<h3 id=\\\"updatewithcancelablesideeffectstate-state-send--unit--unit\\\"><a href=\\\"#updatewithcancelablesideeffectstate-state-send--unit--unit\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>UpdateWithCancelableSideEffect(state, {state, send} => (unit => unit))</code></h3>\\n<p>Same as <code>UpdateWithSideEffect</code>, but the side effect can be cancelled via a returned canceler function.</p>\\n<h3 id=\\\"cancelablesideeffectstate-send--unit-unit\\\"><a href=\\\"#cancelablesideeffectstate-send--unit-unit\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>CancelableSideEffect({state, send} => (unit, unit))</code></h3>\\n<p>Same as <code>UpdateWithCancelableSideEffect</code>, but with no state update.</p>\\n<h3 id=\\\"updatewithiostate-reludeiotaction-action\\\"><a href=\\\"#updatewithiostate-reludeiotaction-action\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>UpdateWithIO(state, Relude.IO.t(action, action))</code></h3>\\n<p>Similar to <code>UpdateWithSideEffect</code>, but instead of a function that accepts the side effect context and returns <code>()</code>, you return a <code>Relude.IO.t('action, 'action)</code>.  An <code>IO</code> is a data type which can perform any type of synchronous or asynchronous side effect - see below.  <code>Relude.IO</code> is a bi-functior which has a typed error channel, and a typed \\\"success\\\" channel.  In this case the success and error channels are both constrained to the type <code>'action</code>, which means that your <code>IO</code>, when executed, must produce an <code>'action</code> to dispatch on either success or failure.</p>\\n<p>A common pattern with component actions is to perform some async action (which typically can fail, e.g. an AJAX/fetch call), and then send a new <code>'action</code> when the async invocation either succeeds or fails.  This patterns is exactly what's captured by the <code>Relude.IO.t('action, 'action)</code> type.  See below for a more illustrative example.</p>\\n<h3 id=\\\"ioreludeiotaction-action\\\"><a href=\\\"#ioreludeiotaction-action\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>IO(Relude.IO.t(action, action))</code></h3>\\n<p>Similar to <code>UpdateWithIO</code>, but with no initial state update.</p>\\n<h4 id=\\\"reludeio-aside\\\"><a href=\\\"#reludeio-aside\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>Relude.IO</code> Aside</h4>\\n<p><code>Relude.IO</code> is a data type that can be used to execute side effects in a purely functional way.\\nFor those coming from the JavaScript world, you can think of <code>IO</code> as something similar to a lazy\\npromise, but with lots of extra capabilities, brought to you by the power of math and functional programming.</p>\\n<p>Using <code>IO</code> rather than ad-hoc side effect functions gives you all sorts of useful functions for\\nmapping/flatMapping results and errors, catching and transforming errors, combining multiple async results, and so much more.</p>\\n<p>See <a href=\\\"https://reazen.github.io/relude/#/api/IO\\\">Relude IO documentation</a> for more information.</p>\\n<h2 id=\\\"reludereacteffect-hooks\\\"><a href=\\\"#reludereacteffect-hooks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>ReludeReact.Effect</code> hooks</h2>\\n<h3 id=\\\"useonmount\\\"><a href=\\\"#useonmount\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>useOnMount</code></h3>\\n<p><code>ReludeReact.useOnMount</code> is a simple shortcut which allows you to register a simple <code>unit => unit</code> function to run when a component is first mounted.  This is typically used to send an initial <code>'action</code> into your reducer for initializing the component (e.g. fetch any initial data).</p>\\n<h3 id=\\\"useioonmount-hook\\\"><a href=\\\"#useioonmount-hook\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>useIOOnMount</code> hook</h3>\\n<p><code>ReludeReact.Effect.useIOOnMount</code> (and it's variations) allows you to trigger a <code>Relude.IO</code>-based action when the component is mounted, and handle the final resulting value (either success or failure) using a side-effect callback.</p>\\n<p>This could be useful if you need to dispatch a fetch request on mount, and then dispatch some reducer actions on success and/or failure, or if you need to store the result of the fetch request\\nin localStorage, etc.</p>\\n<p>Variations of this function exist which allow different types of result callbacks - i.e. a callback from <code>Belt.Result.t('a, 'e) => unit</code>, separate <code>'a => unit</code> and <code>'e => unit</code> callbacks, etc.</p>\\n<h3 id=\\\"useeffect1withequseeffect5witheq\\\"><a href=\\\"#useeffect1withequseeffect5witheq\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>useEffect1WithEq</code>...<code>useEffect5WithEq</code></h3>\\n<p>These effect hooks are very similar to their <code>React.useEffectN</code> counterparts, except that you provide your own equality function along with any values the hook depends upon for re-running.</p>\\n<p>React's <code>useEffect</code> dependencies are simply checked by <code>(===)</code>, which is fast but may lead to false positives when deciding if a hook dependencies have changed (particularly with complex types like records and lists). In cases where running an effect may be expensive, <code>useEffectNWithEq</code> allows much more control over whether that effect should run.</p>\\n<h2 id=\\\"reludereactrender-utilities\\\"><a href=\\\"#reludereactrender-utilities\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>ReludeReact.Render</code> utilities</h2>\\n<p><code>ReludeReact.Render</code> contains a variety of useful functions for rendering different data types, to avoid extra boilerplate/noise in your components.  The purpose of these functions is to try to streamline conditional rendering, so you don't have to write lots of <code>_ => React.null</code> cases when rendering conditional values, variants like <code>Relude.AsyncResult.t('a, 'e)</code>, etc.</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.<span class=\\\"hljs-forDocGrammarHighlighting\\\">ifTrue</span>\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.ifTrueLazy\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.<span class=\\\"hljs-forDocGrammarHighlighting\\\">ifFalse</span>\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.ifFalseLazy\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.option\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.optionLazy\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.optionIfSome\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.result\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.resultIfOk\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.resultIfError\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.asyncData\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.asyncDataLazy\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.asyncDataByValue\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.asyncDataLazyByValue\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.asyncResult\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.asyncResultLazy\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.asyncResultByValue\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.asyncResultLazyByValue\\n<span class=\\\"hljs-comment\\\">// And many more!</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<h2 id=\\\"examples\\\"><a href=\\\"#examples\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Examples</h2>\\n<p>See the demo app in <code>examples/demo</code></p>\\n<div class=\\\"redex-codeblock\\\"><pre class=\\\"hljs lang-none\\\"><code>&gt; npm run demo</code></pre></div>\\n<p>Below is a somewhat contrived/simple example of what a <code>ReludeReact</code> component might look like.</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">// AnimalListView.re</span>\\nopen <span class=\\\"hljs-type\\\">Relude</span>.<span class=\\\"hljs-type\\\">Globals</span>;\\n\\n<span class=\\\"hljs-comment\\\">// The state of this component</span>\\n<span class=\\\"hljs-comment\\\">// We're using a Relude.AsyncResult to represent the state of animals, which are loaded asynchronously and can fail.</span>\\n<span class=\\\"hljs-keyword\\\">type</span> state = {\\n  title: string,\\n  animalsResult: <span class=\\\"hljs-type\\\">AsyncResult</span>.t(list(<span class=\\\"hljs-type\\\">Animal</span>.t), <span class=\\\"hljs-type\\\">Error</span>.t),\\n};\\n\\n<span class=\\\"hljs-comment\\\">// The initial state for the component (used in the reducer initialization below)</span>\\n<span class=\\\"hljs-keyword\\\">let</span> initialState = {title: <span class=\\\"hljs-string\\\">\\\"Animals\\\"</span>, animalsResult: <span class=\\\"hljs-type\\\">AsyncResult</span>.<span class=\\\"hljs-keyword\\\">init</span>};\\n\\n<span class=\\\"hljs-comment\\\">// The actions that our component emits and handles in the reducer</span>\\n<span class=\\\"hljs-keyword\\\">type</span> action =\\n  | <span class=\\\"hljs-type\\\">FetchAnimals</span>\\n  | <span class=\\\"hljs-type\\\">FetchAnimalsSuccess</span>(list(<span class=\\\"hljs-type\\\">Animal</span>.t))\\n  | <span class=\\\"hljs-type\\\">FetchAnimalsError</span>(<span class=\\\"hljs-type\\\">Error</span>.t)\\n  | <span class=\\\"hljs-type\\\">ViewCreateForm</span>\\n  | <span class=\\\"hljs-type\\\">ViewAnimal</span>(<span class=\\\"hljs-type\\\">Animal</span>.t)\\n  | <span class=\\\"hljs-type\\\">DeleteAnimal</span>(<span class=\\\"hljs-type\\\">Animal</span>.t)\\n  | <span class=\\\"hljs-type\\\">NoOp</span>;\\n\\n<span class=\\\"hljs-comment\\\">// The reducer function which accepts and action and the current state, and emits</span>\\n<span class=\\\"hljs-comment\\\">// an \\\"update\\\" which can do things like updating the state, running raw or IO-based effects</span>\\n<span class=\\\"hljs-keyword\\\">let</span> reducer =\\n    (state: state, action: action): <span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Reducer</span>.update(action, state) =&gt;\\n  <span class=\\\"hljs-keyword\\\">switch</span> (action) {\\n  | <span class=\\\"hljs-type\\\">FetchAnimals</span> =&gt;\\n    <span class=\\\"hljs-type\\\">UpdateWithIO</span>(\\n      {...state, animalsResult: state.animalsResult |&gt; <span class=\\\"hljs-type\\\">AsyncResult</span>.toBusy},\\n      <span class=\\\"hljs-type\\\">API</span>.fetchAnimals\\n      |&gt; <span class=\\\"hljs-type\\\">IO</span>.bimap(a =&gt; <span class=\\\"hljs-type\\\">FetchAnimalsSuccess</span>(a), e =&gt; <span class=\\\"hljs-type\\\">FetchAnimalsError</span>(e)),\\n    )\\n\\n  | <span class=\\\"hljs-type\\\">FetchAnimalsSuccess</span>(animals) =&gt;\\n    <span class=\\\"hljs-type\\\">Update</span>({...state, animalsResult: <span class=\\\"hljs-type\\\">AsyncResult</span>.completeOk(animals)})\\n\\n  | <span class=\\\"hljs-type\\\">FetchAnimalsError</span>(error) =&gt;\\n    <span class=\\\"hljs-type\\\">Update</span>({...state, animalsResult: <span class=\\\"hljs-type\\\">AsyncResult</span>.completeError(error)})\\n\\n  | <span class=\\\"hljs-type\\\">ViewCreateForm</span> =&gt; <span class=\\\"hljs-type\\\">SideEffect</span>(<span class=\\\"hljs-number\\\">_</span> =&gt; <span class=\\\"hljs-type\\\">ReasonReactRouter</span>.push(<span class=\\\"hljs-string\\\">\\\"/create\\\"</span>))\\n\\n  | <span class=\\\"hljs-type\\\">ViewAnimal</span>(_animal) =&gt; <span class=\\\"hljs-type\\\">NoUpdate</span>\\n\\n  | <span class=\\\"hljs-type\\\">DeleteAnimal</span>(_animal) =&gt; <span class=\\\"hljs-type\\\">NoUpdate</span>\\n\\n  | <span class=\\\"hljs-type\\\">NoOp</span> =&gt; <span class=\\\"hljs-type\\\">NoUpdate</span>\\n  };\\n\\n<span class=\\\"hljs-comment\\\">// Various inline components</span>\\n\\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">AnimalsLoading</span> = </span>{\\n  [@react.component]\\n  <span class=\\\"hljs-keyword\\\">let</span> make = () =&gt; {\\n    &lt;div&gt; {<span class=\\\"hljs-type\\\">React</span>.string(<span class=\\\"hljs-string\\\">\\\"Loading animals...\\\"</span>)} &lt;/div&gt;;\\n  };\\n};\\n\\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">AnimalsTable</span> = </span>{\\n  [@react.component]\\n  <span class=\\\"hljs-keyword\\\">let</span> make = (~animals: list(<span class=\\\"hljs-type\\\">Animal</span>.t), ~send: action =&gt; unit) =&gt; {\\n    <span class=\\\"hljs-keyword\\\">let</span> <span class=\\\"hljs-number\\\">_</span> = send; <span class=\\\"hljs-comment\\\">// TODO</span>\\n    &lt;div&gt;\\n      {<span class=\\\"hljs-type\\\">React</span>.string(<span class=\\\"hljs-string\\\">\\\"Animals: \\\"</span> ++ string_of_int(<span class=\\\"hljs-type\\\">List</span>.length(animals)))}\\n    &lt;/div&gt;;\\n  };\\n};\\n\\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">AnimalsError</span> = </span>{\\n  [@react.component]\\n  <span class=\\\"hljs-keyword\\\">let</span> make = (~error: <span class=\\\"hljs-type\\\">Error</span>.t) =&gt;\\n    &lt;div&gt; {<span class=\\\"hljs-type\\\">React</span>.string(<span class=\\\"hljs-type\\\">Error</span>.show(error))} &lt;/div&gt;;\\n};\\n\\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">AnimalsResult</span> = </span>{\\n  [@react.component]\\n  <span class=\\\"hljs-keyword\\\">let</span> make = (~result: <span class=\\\"hljs-type\\\">AsyncResult</span>.t(list(<span class=\\\"hljs-type\\\">Animal</span>.t), <span class=\\\"hljs-type\\\">Error</span>.t), ~send) =&gt;\\n    result\\n    |&gt; <span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.asyncResultByValueLazy(\\n         <span class=\\\"hljs-number\\\">_</span> =&gt; &lt;<span class=\\\"hljs-type\\\">AnimalsLoading</span> /&gt;,\\n         animals =&gt; &lt;<span class=\\\"hljs-type\\\">AnimalsTable</span> animals send /&gt;,\\n         error =&gt; &lt;<span class=\\\"hljs-type\\\">AnimalsError</span> error /&gt;,\\n       );\\n};\\n\\n<span class=\\\"hljs-comment\\\">// The main view - accepts the state and send values we get from the reducer</span>\\n\\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">Main</span> = </span>{\\n  [@react.component]\\n  <span class=\\\"hljs-keyword\\\">let</span> make = (~state, ~send) =&gt; {\\n    &lt;div&gt;\\n      &lt;h1&gt; {<span class=\\\"hljs-type\\\">React</span>.string(state.title)} &lt;/h1&gt;\\n      &lt;div&gt;\\n        &lt;button\\n          onClick={e =&gt; {\\n            <span class=\\\"hljs-type\\\">ReactEvent</span>.<span class=\\\"hljs-type\\\">Synthetic</span>.preventDefault(e);\\n            send(<span class=\\\"hljs-type\\\">ViewCreateForm</span>);\\n          }}&gt;\\n          {<span class=\\\"hljs-type\\\">React</span>.string(<span class=\\\"hljs-string\\\">\\\"Create\\\"</span>)}\\n        &lt;/button&gt;\\n        &lt;button\\n          href=<span class=\\\"hljs-string\\\">\\\"#\\\"</span>\\n          onClick={e =&gt; {\\n            <span class=\\\"hljs-type\\\">ReactEvent</span>.<span class=\\\"hljs-type\\\">Synthetic</span>.preventDefault(e);\\n            send(<span class=\\\"hljs-type\\\">NoOp</span>);\\n          }}&gt;\\n          {<span class=\\\"hljs-type\\\">React</span>.string(<span class=\\\"hljs-string\\\">\\\"No-Op Action\\\"</span>)}\\n        &lt;/button&gt;\\n      &lt;/div&gt;\\n      &lt;<span class=\\\"hljs-type\\\">AnimalsResult</span> send result={state.animalsResult} /&gt;\\n    &lt;/div&gt;;\\n  };\\n};\\n\\n<span class=\\\"hljs-comment\\\">// The main component definition</span>\\n<span class=\\\"hljs-comment\\\">// Here, we invoke our hooks and render the main view</span>\\n\\n[@react.component]\\n<span class=\\\"hljs-keyword\\\">let</span> make = () =&gt; {\\n  <span class=\\\"hljs-comment\\\">// Initialize the ReludeReact reducer</span>\\n  <span class=\\\"hljs-keyword\\\">let</span> (state, send) = <span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Reducer</span>.useReducer(reducer, initialState);\\n\\n  <span class=\\\"hljs-comment\\\">// Trigger an initialization action on mount</span>\\n  <span class=\\\"hljs-comment\\\">// This is just using the send function from our reducer to send an action,</span>\\n  <span class=\\\"hljs-comment\\\">// which is handled by the reducer</span>\\n  <span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Effect</span>.useOnMount(() =&gt; send(<span class=\\\"hljs-type\\\">FetchAnimals</span>));\\n\\n  <span class=\\\"hljs-comment\\\">// This is just demonstrating triggering an IO action on mount, and handling</span>\\n  <span class=\\\"hljs-comment\\\">// the result via side-effecting functions</span>\\n  <span class=\\\"hljs-comment\\\">// In reality, the IO would probably be making a fetch request, or doing some</span>\\n  <span class=\\\"hljs-comment\\\">// other async action and then storing or dispatching the results.</span>\\n  <span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Effect</span>.useIOOnMount(\\n    <span class=\\\"hljs-type\\\">IO</span>.suspend(() =&gt; {\\n      <span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-string\\\">\\\"Suspend 42\\\"</span>);\\n      <span class=\\\"hljs-number\\\">42</span>;\\n    }),\\n    intValue =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-string\\\">\\\"Got suspended value: \\\"</span> ++ string_of_int(intValue)),\\n    _error =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-string\\\">\\\"Suspend 42 failed\\\"</span>),\\n  );\\n\\n  <span class=\\\"hljs-comment\\\">// This just demonstrates that with our special effect hooks, you can provide</span>\\n  <span class=\\\"hljs-comment\\\">// a custom EQ function that will prevent a hook from running even if React's</span>\\n  <span class=\\\"hljs-comment\\\">// basic (===) check thinks the value has changed</span>\\n  <span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Effect</span>.useEffect1WithEq(\\n    () =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-string\\\">\\\"Running effect because some array has changed!\\\"</span>),\\n    (a, b) =&gt; <span class=\\\"hljs-type\\\">List</span>.<span class=\\\"hljs-type\\\">String</span>.(eq(<span class=\\\"hljs-built_in\\\">sort</span>(a), <span class=\\\"hljs-built_in\\\">sort</span>(b))),\\n    <span class=\\\"hljs-type\\\">List</span>.shuffle([<span class=\\\"hljs-string\\\">\\\"a\\\"</span>, <span class=\\\"hljs-string\\\">\\\"b\\\"</span>, <span class=\\\"hljs-string\\\">\\\"c\\\"</span>, <span class=\\\"hljs-string\\\">\\\"d\\\"</span>]),\\n  );\\n\\n  <span class=\\\"hljs-comment\\\">// Render our main view, passing the state and dispatcher function down</span>\\n  &lt;<span class=\\\"hljs-type\\\">Main</span> state send /&gt;;\\n};</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">0</span>: &lt;<span class=\\\"hljs-type\\\">UNKNOWN</span> <span class=\\\"hljs-type\\\">SYNTAX</span> <span class=\\\"hljs-type\\\">ERROR</span>&gt;</code></pre>\\n      </div>\\n    </div>\\n  \\n<h2 id=\\\"developer-info\\\"><a href=\\\"#developer-info\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Developer info</h2>\\n<h3 id=\\\"project-setup\\\"><a href=\\\"#project-setup\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Project setup</h3>\\n<div class=\\\"redex-codeblock\\\"><pre class=\\\"hljs lang-none\\\"><code>&gt; git <span class=\\\"hljs-built_in\\\">clone</span> git@github.com:reazen/relude-reason-react\\n&gt; <span class=\\\"hljs-built_in\\\">cd</span> relude-reason-react\\n&gt; npm install\\n&gt; npm run server:demo</code></pre></div>\\n<h3 id=\\\"scripts\\\"><a href=\\\"#scripts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Scripts</h3>\\n<div class=\\\"redex-codeblock\\\"><pre class=\\\"hljs lang-none\\\"><code>&gt; npm run clean\\n&gt; npm run build\\n&gt; npm run cleanbuild\\n&gt; npm run <span class=\\\"hljs-built_in\\\">test</span>\\n&gt; npm run cleantest\\n&gt; npm run watch\\n&gt; npm run demo</code></pre></div>\\n<h3 id=\\\"publishing-to-npm\\\"><a href=\\\"#publishing-to-npm\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Publishing to npm</h3>\\n<div class=\\\"redex-codeblock\\\"><pre class=\\\"hljs lang-none\\\"><code>&gt; npm version major|minor|patch\\n&gt; git push origin --follow-tags\\n&gt; git push upstream --follow-tags\\n&gt; npm publish</code></pre></div>\\n<h3 id=\\\"nixos\\\"><a href=\\\"#nixos\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>NixOS</h3>\\n<p>If you have trouble building/installing the Bucklescript/Reason tools try this:</p>\\n<div class=\\\"redex-codeblock\\\"><pre class=\\\"hljs lang-none\\\"><code>&gt; nix-shell\\n%nix%&gt; npm install</code></pre></div>\\n\",\"homepageUrl\":\"https://github.com/reazen/relude-reason-react\",\"repositoryUrl\":\"https://github.com/reazen/relude-reason-react\",\"npmUrl\":\"https://www.npmjs.com/package/relude-reason-react\",\"issuesUrl\":\"https://github.com/reazen/relude-reason-react/issues\",\"slug\":\"/package/relude-reason-react\"}},\"pathContext\":{\"id\":\"relude-reason-react\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---package-relude-reason-react-09e4b94259494a47bf01.js","module.exports = {\"data\":{\"package\":{\"type\":\"published\",\"id\":\"relude-reason-react\",\"name\":\"relude-reason-react\",\"version\":\"0.8.1\",\"category\":\"library\",\"flags\":[],\"platforms\":[\"browser\"],\"description\":\"Relude-based utilities for ReasonReact\",\"keywords\":[\"state management\",\"react\",\"ui\"],\"license\":\"MIT\",\"updated\":\"2020-01-27T15:08:29.701Z\",\"stars\":27,\"score\":0.6220243113278466,\"quality\":0.8304821684688354,\"popularity\":0.06596875419363962,\"maintenance\":0.999401705198349,\"readme\":\"<h1 id=\\\"relude-reason-react\\\"><a href=\\\"#relude-reason-react\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>relude-reason-react</h1>\\n<p><a href=\\\"https://github.com/reazen/relude-reason-react/actions\\\"><img src=\\\"https://img.shields.io/github/workflow/status/reazen/relude-reason-react/CI/master\\\" alt=\\\"GitHub CI\\\"></a>\\n<a href=\\\"https://www.npmjs.com/package/relude-reason-react\\\"><img src=\\\"https://img.shields.io/npm/v/relude-reason-react.svg\\\" alt=\\\"npm\\\"></a></p>\\n<h1 id=\\\"overview\\\"><a href=\\\"#overview\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Overview</h1>\\n<p>Relude-based utilities for ReasonReact</p>\\n<h1 id=\\\"documentation\\\"><a href=\\\"#documentation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Documentation</h1>\\n<h2 id=\\\"reludereactreducerusereducer-hook\\\"><a href=\\\"#reludereactreducerusereducer-hook\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>ReludeReact.Reducer.useReducer</code> hook</h2>\\n<p>The <code>ReludeReact.Reducer.useReducer</code> hook was inspired by the original/pre-hooks <a href=\\\"https://reasonml.github.io/reason-react/docs/fr/jsx-2\\\">ReasonReact record API</a>, and the hooks-based <a href=\\\"https://github.com/bloodyowl/reason-react-update\\\">reason-react-update</a> libray by <a href=\\\"https://github.com/bloodyowl\\\">Matthias Le Brun (bloodyowl)</a>.</p>\\n<p><code>ReludeReact.Reducer.useReducer</code> is similar to the <a href=\\\"https://reactjs.org/docs/hooks-reference.html#usereducer\\\">React <code>useReducer</code> hook</a> with the key difference that the React <code>useReducer</code> only allows\\nyou to change the state, whereas the <code>ReludeReact.Reducer.useReducer</code> allows you to both change the state, and to safely emit side effects or <code>Relude.IO</code>-based actions, which can result in the emission of further actions.</p>\\n<p>To use the <code>ReludeReact.Reducer.useReducer</code> hook, you must provide a reducer function of the following type:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> reducer('action, 'state) = ('state, 'action) =&gt; update('action, 'state);</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">type</span> (<span class=\\\"hljs-symbol\\\">'action</span>,<span class=\\\"hljs-symbol\\\">'state</span>) reducer = <span class=\\\"hljs-symbol\\\">'state</span> -&gt; <span class=\\\"hljs-symbol\\\">'action</span> -&gt; (<span class=\\\"hljs-symbol\\\">'action</span>,<span class=\\\"hljs-symbol\\\">'state</span>) update</code></pre>\\n      </div>\\n    </div>\\n  \\n<p>A function that accepts the current <code>'state</code> and an <code>'action</code>, and returns a value of type <code>update('action, 'state)</code></p>\\n<p>The <code>update</code> value is a variant with the following type:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> update('action, 'state) =\\n  | <span class=\\\"hljs-type\\\">NoUpdate</span>\\n  | <span class=\\\"hljs-type\\\">Update</span>('state)\\n  | <span class=\\\"hljs-type\\\">UpdateWithSideEffect</span>('state, <span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Uncancelable</span>.t('action, 'state))\\n  | <span class=\\\"hljs-type\\\">SideEffect</span>(<span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Uncancelable</span>.t('action, 'state))\\n  | <span class=\\\"hljs-type\\\">UpdateWithCancelableSideEffect</span>(\\n      'state,\\n      <span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Cancelable</span>.t('action, 'state),\\n    )\\n  | <span class=\\\"hljs-type\\\">CancelableSideEffect</span>(<span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Cancelable</span>.t('action, 'state))\\n  | <span class=\\\"hljs-type\\\">UpdateWithIO</span>('state, <span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Uncancelable</span>.<span class=\\\"hljs-type\\\">IO</span>.t('action, 'state))\\n  | <span class=\\\"hljs-type\\\">IO</span>(<span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Uncancelable</span>.<span class=\\\"hljs-type\\\">IO</span>.t('action, 'state));</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">type</span> (<span class=\\\"hljs-symbol\\\">'action</span>,<span class=\\\"hljs-symbol\\\">'state</span>) update =\\n  | <span class=\\\"hljs-type\\\">NoUpdate</span>\\n  | <span class=\\\"hljs-type\\\">Update</span> <span class=\\\"hljs-keyword\\\">of</span> <span class=\\\"hljs-symbol\\\">'state</span>\\n  | <span class=\\\"hljs-type\\\">UpdateWithSideEffect</span> <span class=\\\"hljs-keyword\\\">of</span> <span class=\\\"hljs-symbol\\\">'state</span>* (<span class=\\\"hljs-symbol\\\">'action</span>,<span class=\\\"hljs-symbol\\\">'state</span>)\\n  <span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Uncancelable</span>.t\\n  | <span class=\\\"hljs-type\\\">SideEffect</span> <span class=\\\"hljs-keyword\\\">of</span> (<span class=\\\"hljs-symbol\\\">'action</span>,<span class=\\\"hljs-symbol\\\">'state</span>) <span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Uncancelable</span>.t\\n  | <span class=\\\"hljs-type\\\">UpdateWithCancelableSideEffect</span> <span class=\\\"hljs-keyword\\\">of</span> <span class=\\\"hljs-symbol\\\">'state</span>* (<span class=\\\"hljs-symbol\\\">'action</span>,<span class=\\\"hljs-symbol\\\">'state</span>)\\n  <span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Cancelable</span>.t\\n  | <span class=\\\"hljs-type\\\">CancelableSideEffect</span> <span class=\\\"hljs-keyword\\\">of</span> (<span class=\\\"hljs-symbol\\\">'action</span>,<span class=\\\"hljs-symbol\\\">'state</span>) <span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Cancelable</span>.t\\n  | <span class=\\\"hljs-type\\\">UpdateWithIO</span> <span class=\\\"hljs-keyword\\\">of</span> <span class=\\\"hljs-symbol\\\">'state</span>* (<span class=\\\"hljs-symbol\\\">'action</span>,<span class=\\\"hljs-symbol\\\">'state</span>) <span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Uncancelable</span>.<span class=\\\"hljs-type\\\">IO</span>.t\\n  | <span class=\\\"hljs-type\\\">IO</span> <span class=\\\"hljs-keyword\\\">of</span> (<span class=\\\"hljs-symbol\\\">'action</span>,<span class=\\\"hljs-symbol\\\">'state</span>) <span class=\\\"hljs-type\\\">SideEffect</span>.<span class=\\\"hljs-type\\\">Uncancelable</span>.<span class=\\\"hljs-type\\\">IO</span>.t</code></pre>\\n      </div>\\n    </div>\\n  \\n<p>Basically, this means that in your <code>ReludeReact.useReducer</code> component, for any action that occurs,\\nyou can respond to the action by doing any of the following things:</p>\\n<h3 id=\\\"noupdate\\\"><a href=\\\"#noupdate\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>NoUpdate</code></h3>\\n<p>Don't change the state, and don't perform an side effects or IO-based effects.  Basically a no-op - useful as a placeholder or to stub out actions prior to providing the implementations.</p>\\n<h3 id=\\\"updatestate\\\"><a href=\\\"#updatestate\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>Update(state)</code></h3>\\n<p>Update the component state to the given value, but don't perform any side effects or IO-based effects.</p>\\n<h3 id=\\\"updatewithsideeffectstate-state-send--unit\\\"><a href=\\\"#updatewithsideeffectstate-state-send--unit\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>UpdateWithSideEffect(state, {state, send} => unit)</code></h3>\\n<p>Update the component state to the given value, and perform the given side effect (basically a function that is given a context record of <code>state</code> and <code>send</code> and is allowed to perform any type of sync or async side effect, and emit additional actions via <code>send</code>, which is a function of type  <code>action => unit</code>, and ultimately return unit <code>()</code>.  In this case, the side effect is Uncancelable, which means, there is no way to cancel it later.</p>\\n<p>These types of side effects are useful for doing things like pushing a history state to navigate to a different URL, doing one-off DOM manipulations, or other types of things you don't want or need to manage or control.</p>\\n<h3 id=\\\"sideeffectstate-send--unit\\\"><a href=\\\"#sideeffectstate-send--unit\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>SideEffect({state, send} => unit)</code></h3>\\n<p>Same as <code>UpdateWithSideEffect</code>, but with no state update.</p>\\n<h3 id=\\\"updatewithcancelablesideeffectstate-state-send--unit--unit\\\"><a href=\\\"#updatewithcancelablesideeffectstate-state-send--unit--unit\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>UpdateWithCancelableSideEffect(state, {state, send} => (unit => unit))</code></h3>\\n<p>Same as <code>UpdateWithSideEffect</code>, but the side effect can be cancelled via a returned canceler function.</p>\\n<h3 id=\\\"cancelablesideeffectstate-send--unit-unit\\\"><a href=\\\"#cancelablesideeffectstate-send--unit-unit\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>CancelableSideEffect({state, send} => (unit, unit))</code></h3>\\n<p>Same as <code>UpdateWithCancelableSideEffect</code>, but with no state update.</p>\\n<h3 id=\\\"updatewithiostate-reludeiotaction-action\\\"><a href=\\\"#updatewithiostate-reludeiotaction-action\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>UpdateWithIO(state, Relude.IO.t(action, action))</code></h3>\\n<p>Similar to <code>UpdateWithSideEffect</code>, but instead of a function that accepts the side effect context and returns <code>()</code>, you return a <code>Relude.IO.t('action, 'action)</code>.  An <code>IO</code> is a data type which can perform any type of synchronous or asynchronous side effect - see below.  <code>Relude.IO</code> is a bi-functior which has a typed error channel, and a typed \\\"success\\\" channel.  In this case the success and error channels are both constrained to the type <code>'action</code>, which means that your <code>IO</code>, when executed, must produce an <code>'action</code> to dispatch on either success or failure.</p>\\n<p>A common pattern with component actions is to perform some async action (which typically can fail, e.g. an AJAX/fetch call), and then send a new <code>'action</code> when the async invocation either succeeds or fails.  This patterns is exactly what's captured by the <code>Relude.IO.t('action, 'action)</code> type.  See below for a more illustrative example.</p>\\n<h3 id=\\\"ioreludeiotaction-action\\\"><a href=\\\"#ioreludeiotaction-action\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>IO(Relude.IO.t(action, action))</code></h3>\\n<p>Similar to <code>UpdateWithIO</code>, but with no initial state update.</p>\\n<h4 id=\\\"reludeio-aside\\\"><a href=\\\"#reludeio-aside\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>Relude.IO</code> Aside</h4>\\n<p><code>Relude.IO</code> is a data type that can be used to execute side effects in a purely functional way.\\nFor those coming from the JavaScript world, you can think of <code>IO</code> as something similar to a lazy\\npromise, but with lots of extra capabilities, brought to you by the power of math and functional programming.</p>\\n<p>Using <code>IO</code> rather than ad-hoc side effect functions gives you all sorts of useful functions for\\nmapping/flatMapping results and errors, catching and transforming errors, combining multiple async results, and so much more.</p>\\n<p>See <a href=\\\"https://reazen.github.io/relude/#/api/IO\\\">Relude IO documentation</a> for more information.</p>\\n<h2 id=\\\"reludereacteffect-hooks\\\"><a href=\\\"#reludereacteffect-hooks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>ReludeReact.Effect</code> hooks</h2>\\n<h3 id=\\\"useonmount\\\"><a href=\\\"#useonmount\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>useOnMount</code></h3>\\n<p><code>ReludeReact.useOnMount</code> is a simple shortcut which allows you to register a simple <code>unit => unit</code> function to run when a component is first mounted.  This is typically used to send an initial <code>'action</code> into your reducer for initializing the component (e.g. fetch any initial data).</p>\\n<h3 id=\\\"useioonmount-hook\\\"><a href=\\\"#useioonmount-hook\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>useIOOnMount</code> hook</h3>\\n<p><code>ReludeReact.Effect.useIOOnMount</code> (and it's variations) allows you to trigger a <code>Relude.IO</code>-based action when the component is mounted, and handle the final resulting value (either success or failure) using a side-effect callback.</p>\\n<p>This could be useful if you need to dispatch a fetch request on mount, and then dispatch some reducer actions on success and/or failure, or if you need to store the result of the fetch request\\nin localStorage, etc.</p>\\n<p>Variations of this function exist which allow different types of result callbacks - i.e. a callback from <code>Belt.Result.t('a, 'e) => unit</code>, separate <code>'a => unit</code> and <code>'e => unit</code> callbacks, etc.</p>\\n<h3 id=\\\"useeffect1withequseeffect5witheq\\\"><a href=\\\"#useeffect1withequseeffect5witheq\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>useEffect1WithEq</code>...<code>useEffect5WithEq</code></h3>\\n<p>These effect hooks are very similar to their <code>React.useEffectN</code> counterparts, except that you provide your own equality function along with any values the hook depends upon for re-running.</p>\\n<p>React's <code>useEffect</code> dependencies are simply checked by <code>(===)</code>, which is fast but may lead to false positives when deciding if a hook dependencies have changed (particularly with complex types like records and lists). In cases where running an effect may be expensive, <code>useEffectNWithEq</code> allows much more control over whether that effect should run.</p>\\n<h2 id=\\\"reludereactrender-utilities\\\"><a href=\\\"#reludereactrender-utilities\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>ReludeReact.Render</code> utilities</h2>\\n<p><code>ReludeReact.Render</code> contains a variety of useful functions for rendering different data types, to avoid extra boilerplate/noise in your components.  The purpose of these functions is to try to streamline conditional rendering, so you don't have to write lots of <code>_ => React.null</code> cases when rendering conditional values, variants like <code>Relude.AsyncResult.t('a, 'e)</code>, etc.</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.<span class=\\\"hljs-forDocGrammarHighlighting\\\">ifTrue</span>\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.ifTrueLazy\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.<span class=\\\"hljs-forDocGrammarHighlighting\\\">ifFalse</span>\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.ifFalseLazy\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.option\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.optionLazy\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.optionIfSome\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.result\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.resultIfOk\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.resultIfError\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.asyncData\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.asyncDataLazy\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.asyncDataByValue\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.asyncDataLazyByValue\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.asyncResult\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.asyncResultLazy\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.asyncResultByValue\\n<span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.asyncResultLazyByValue\\n<span class=\\\"hljs-comment\\\">// And many more!</span></code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2310</span>: syntax error, consider adding a `;<span class=\\\"hljs-char\\\">' before</span></code></pre>\\n      </div>\\n    </div>\\n  \\n<h2 id=\\\"examples\\\"><a href=\\\"#examples\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Examples</h2>\\n<p>See the demo app in <code>examples/demo</code></p>\\n<div class=\\\"redex-codeblock\\\"><pre class=\\\"hljs lang-none\\\"><code>&gt; npm run demo</code></pre></div>\\n<p>Below is a somewhat contrived/simple example of what a <code>ReludeReact</code> component might look like.</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">// AnimalListView.re</span>\\nopen <span class=\\\"hljs-type\\\">Relude</span>.<span class=\\\"hljs-type\\\">Globals</span>;\\n\\n<span class=\\\"hljs-comment\\\">// The state of this component</span>\\n<span class=\\\"hljs-comment\\\">// We're using a Relude.AsyncResult to represent the state of animals, which are loaded asynchronously and can fail.</span>\\n<span class=\\\"hljs-keyword\\\">type</span> state = {\\n  title: string,\\n  animalsResult: <span class=\\\"hljs-type\\\">AsyncResult</span>.t(list(<span class=\\\"hljs-type\\\">Animal</span>.t), <span class=\\\"hljs-type\\\">Error</span>.t),\\n};\\n\\n<span class=\\\"hljs-comment\\\">// The initial state for the component (used in the reducer initialization below)</span>\\n<span class=\\\"hljs-keyword\\\">let</span> initialState = {title: <span class=\\\"hljs-string\\\">\\\"Animals\\\"</span>, animalsResult: <span class=\\\"hljs-type\\\">AsyncResult</span>.<span class=\\\"hljs-keyword\\\">init</span>};\\n\\n<span class=\\\"hljs-comment\\\">// The actions that our component emits and handles in the reducer</span>\\n<span class=\\\"hljs-keyword\\\">type</span> action =\\n  | <span class=\\\"hljs-type\\\">FetchAnimals</span>\\n  | <span class=\\\"hljs-type\\\">FetchAnimalsSuccess</span>(list(<span class=\\\"hljs-type\\\">Animal</span>.t))\\n  | <span class=\\\"hljs-type\\\">FetchAnimalsError</span>(<span class=\\\"hljs-type\\\">Error</span>.t)\\n  | <span class=\\\"hljs-type\\\">ViewCreateForm</span>\\n  | <span class=\\\"hljs-type\\\">ViewAnimal</span>(<span class=\\\"hljs-type\\\">Animal</span>.t)\\n  | <span class=\\\"hljs-type\\\">DeleteAnimal</span>(<span class=\\\"hljs-type\\\">Animal</span>.t)\\n  | <span class=\\\"hljs-type\\\">NoOp</span>;\\n\\n<span class=\\\"hljs-comment\\\">// The reducer function which accepts and action and the current state, and emits</span>\\n<span class=\\\"hljs-comment\\\">// an \\\"update\\\" which can do things like updating the state, running raw or IO-based effects</span>\\n<span class=\\\"hljs-keyword\\\">let</span> reducer =\\n    (state: state, action: action): <span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Reducer</span>.update(action, state) =&gt;\\n  <span class=\\\"hljs-keyword\\\">switch</span> (action) {\\n  | <span class=\\\"hljs-type\\\">FetchAnimals</span> =&gt;\\n    <span class=\\\"hljs-type\\\">UpdateWithIO</span>(\\n      {...state, animalsResult: state.animalsResult |&gt; <span class=\\\"hljs-type\\\">AsyncResult</span>.toBusy},\\n      <span class=\\\"hljs-type\\\">API</span>.fetchAnimals\\n      |&gt; <span class=\\\"hljs-type\\\">IO</span>.bimap(a =&gt; <span class=\\\"hljs-type\\\">FetchAnimalsSuccess</span>(a), e =&gt; <span class=\\\"hljs-type\\\">FetchAnimalsError</span>(e)),\\n    )\\n\\n  | <span class=\\\"hljs-type\\\">FetchAnimalsSuccess</span>(animals) =&gt;\\n    <span class=\\\"hljs-type\\\">Update</span>({...state, animalsResult: <span class=\\\"hljs-type\\\">AsyncResult</span>.completeOk(animals)})\\n\\n  | <span class=\\\"hljs-type\\\">FetchAnimalsError</span>(error) =&gt;\\n    <span class=\\\"hljs-type\\\">Update</span>({...state, animalsResult: <span class=\\\"hljs-type\\\">AsyncResult</span>.completeError(error)})\\n\\n  | <span class=\\\"hljs-type\\\">ViewCreateForm</span> =&gt; <span class=\\\"hljs-type\\\">SideEffect</span>(<span class=\\\"hljs-number\\\">_</span> =&gt; <span class=\\\"hljs-type\\\">ReasonReactRouter</span>.push(<span class=\\\"hljs-string\\\">\\\"/create\\\"</span>))\\n\\n  | <span class=\\\"hljs-type\\\">ViewAnimal</span>(_animal) =&gt; <span class=\\\"hljs-type\\\">NoUpdate</span>\\n\\n  | <span class=\\\"hljs-type\\\">DeleteAnimal</span>(_animal) =&gt; <span class=\\\"hljs-type\\\">NoUpdate</span>\\n\\n  | <span class=\\\"hljs-type\\\">NoOp</span> =&gt; <span class=\\\"hljs-type\\\">NoUpdate</span>\\n  };\\n\\n<span class=\\\"hljs-comment\\\">// Various inline components</span>\\n\\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">AnimalsLoading</span> = </span>{\\n  [@react.component]\\n  <span class=\\\"hljs-keyword\\\">let</span> make = () =&gt; {\\n    &lt;div&gt; {<span class=\\\"hljs-type\\\">React</span>.string(<span class=\\\"hljs-string\\\">\\\"Loading animals...\\\"</span>)} &lt;/div&gt;;\\n  };\\n};\\n\\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">AnimalsTable</span> = </span>{\\n  [@react.component]\\n  <span class=\\\"hljs-keyword\\\">let</span> make = (~animals: list(<span class=\\\"hljs-type\\\">Animal</span>.t), ~send: action =&gt; unit) =&gt; {\\n    <span class=\\\"hljs-keyword\\\">let</span> <span class=\\\"hljs-number\\\">_</span> = send; <span class=\\\"hljs-comment\\\">// TODO</span>\\n    &lt;div&gt;\\n      {<span class=\\\"hljs-type\\\">React</span>.string(<span class=\\\"hljs-string\\\">\\\"Animals: \\\"</span> ++ string_of_int(<span class=\\\"hljs-type\\\">List</span>.length(animals)))}\\n    &lt;/div&gt;;\\n  };\\n};\\n\\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">AnimalsError</span> = </span>{\\n  [@react.component]\\n  <span class=\\\"hljs-keyword\\\">let</span> make = (~error: <span class=\\\"hljs-type\\\">Error</span>.t) =&gt;\\n    &lt;div&gt; {<span class=\\\"hljs-type\\\">React</span>.string(<span class=\\\"hljs-type\\\">Error</span>.show(error))} &lt;/div&gt;;\\n};\\n\\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">AnimalsResult</span> = </span>{\\n  [@react.component]\\n  <span class=\\\"hljs-keyword\\\">let</span> make = (~result: <span class=\\\"hljs-type\\\">AsyncResult</span>.t(list(<span class=\\\"hljs-type\\\">Animal</span>.t), <span class=\\\"hljs-type\\\">Error</span>.t), ~send) =&gt;\\n    result\\n    |&gt; <span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Render</span>.asyncResultByValueLazy(\\n         <span class=\\\"hljs-number\\\">_</span> =&gt; &lt;<span class=\\\"hljs-type\\\">AnimalsLoading</span> /&gt;,\\n         animals =&gt; &lt;<span class=\\\"hljs-type\\\">AnimalsTable</span> animals send /&gt;,\\n         error =&gt; &lt;<span class=\\\"hljs-type\\\">AnimalsError</span> error /&gt;,\\n       );\\n};\\n\\n<span class=\\\"hljs-comment\\\">// The main view - accepts the state and send values we get from the reducer</span>\\n\\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">Main</span> = </span>{\\n  [@react.component]\\n  <span class=\\\"hljs-keyword\\\">let</span> make = (~state, ~send) =&gt; {\\n    &lt;div&gt;\\n      &lt;h1&gt; {<span class=\\\"hljs-type\\\">React</span>.string(state.title)} &lt;/h1&gt;\\n      &lt;div&gt;\\n        &lt;button\\n          onClick={e =&gt; {\\n            <span class=\\\"hljs-type\\\">ReactEvent</span>.<span class=\\\"hljs-type\\\">Synthetic</span>.preventDefault(e);\\n            send(<span class=\\\"hljs-type\\\">ViewCreateForm</span>);\\n          }}&gt;\\n          {<span class=\\\"hljs-type\\\">React</span>.string(<span class=\\\"hljs-string\\\">\\\"Create\\\"</span>)}\\n        &lt;/button&gt;\\n        &lt;button\\n          href=<span class=\\\"hljs-string\\\">\\\"#\\\"</span>\\n          onClick={e =&gt; {\\n            <span class=\\\"hljs-type\\\">ReactEvent</span>.<span class=\\\"hljs-type\\\">Synthetic</span>.preventDefault(e);\\n            send(<span class=\\\"hljs-type\\\">NoOp</span>);\\n          }}&gt;\\n          {<span class=\\\"hljs-type\\\">React</span>.string(<span class=\\\"hljs-string\\\">\\\"No-Op Action\\\"</span>)}\\n        &lt;/button&gt;\\n      &lt;/div&gt;\\n      &lt;<span class=\\\"hljs-type\\\">AnimalsResult</span> send result={state.animalsResult} /&gt;\\n    &lt;/div&gt;;\\n  };\\n};\\n\\n<span class=\\\"hljs-comment\\\">// The main component definition</span>\\n<span class=\\\"hljs-comment\\\">// Here, we invoke our hooks and render the main view</span>\\n\\n[@react.component]\\n<span class=\\\"hljs-keyword\\\">let</span> make = () =&gt; {\\n  <span class=\\\"hljs-comment\\\">// Initialize the ReludeReact reducer</span>\\n  <span class=\\\"hljs-keyword\\\">let</span> (state, send) = <span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Reducer</span>.useReducer(reducer, initialState);\\n\\n  <span class=\\\"hljs-comment\\\">// Trigger an initialization action on mount</span>\\n  <span class=\\\"hljs-comment\\\">// This is just using the send function from our reducer to send an action,</span>\\n  <span class=\\\"hljs-comment\\\">// which is handled by the reducer</span>\\n  <span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Effect</span>.useOnMount(() =&gt; send(<span class=\\\"hljs-type\\\">FetchAnimals</span>));\\n\\n  <span class=\\\"hljs-comment\\\">// This is just demonstrating triggering an IO action on mount, and handling</span>\\n  <span class=\\\"hljs-comment\\\">// the result via side-effecting functions</span>\\n  <span class=\\\"hljs-comment\\\">// In reality, the IO would probably be making a fetch request, or doing some</span>\\n  <span class=\\\"hljs-comment\\\">// other async action and then storing or dispatching the results.</span>\\n  <span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Effect</span>.useIOOnMount(\\n    <span class=\\\"hljs-type\\\">IO</span>.suspend(() =&gt; {\\n      <span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-string\\\">\\\"Suspend 42\\\"</span>);\\n      <span class=\\\"hljs-number\\\">42</span>;\\n    }),\\n    intValue =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-string\\\">\\\"Got suspended value: \\\"</span> ++ string_of_int(intValue)),\\n    _error =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-string\\\">\\\"Suspend 42 failed\\\"</span>),\\n  );\\n\\n  <span class=\\\"hljs-comment\\\">// This just demonstrates that with our special effect hooks, you can provide</span>\\n  <span class=\\\"hljs-comment\\\">// a custom EQ function that will prevent a hook from running even if React's</span>\\n  <span class=\\\"hljs-comment\\\">// basic (===) check thinks the value has changed</span>\\n  <span class=\\\"hljs-type\\\">ReludeReact</span>.<span class=\\\"hljs-type\\\">Effect</span>.useEffect1WithEq(\\n    () =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-string\\\">\\\"Running effect because some array has changed!\\\"</span>),\\n    (a, b) =&gt; <span class=\\\"hljs-type\\\">List</span>.<span class=\\\"hljs-type\\\">String</span>.(eq(<span class=\\\"hljs-built_in\\\">sort</span>(a), <span class=\\\"hljs-built_in\\\">sort</span>(b))),\\n    <span class=\\\"hljs-type\\\">List</span>.shuffle([<span class=\\\"hljs-string\\\">\\\"a\\\"</span>, <span class=\\\"hljs-string\\\">\\\"b\\\"</span>, <span class=\\\"hljs-string\\\">\\\"c\\\"</span>, <span class=\\\"hljs-string\\\">\\\"d\\\"</span>]),\\n  );\\n\\n  <span class=\\\"hljs-comment\\\">// Render our main view, passing the state and dispatcher function down</span>\\n  &lt;<span class=\\\"hljs-type\\\">Main</span> state send /&gt;;\\n};</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">0</span>: &lt;<span class=\\\"hljs-type\\\">UNKNOWN</span> <span class=\\\"hljs-type\\\">SYNTAX</span> <span class=\\\"hljs-type\\\">ERROR</span>&gt;</code></pre>\\n      </div>\\n    </div>\\n  \\n<h2 id=\\\"developer-info\\\"><a href=\\\"#developer-info\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Developer info</h2>\\n<h3 id=\\\"project-setup\\\"><a href=\\\"#project-setup\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Project setup</h3>\\n<div class=\\\"redex-codeblock\\\"><pre class=\\\"hljs lang-none\\\"><code>&gt; git <span class=\\\"hljs-built_in\\\">clone</span> git@github.com:reazen/relude-reason-react\\n&gt; <span class=\\\"hljs-built_in\\\">cd</span> relude-reason-react\\n&gt; npm install\\n&gt; npm run server:demo</code></pre></div>\\n<h3 id=\\\"scripts\\\"><a href=\\\"#scripts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Scripts</h3>\\n<div class=\\\"redex-codeblock\\\"><pre class=\\\"hljs lang-none\\\"><code>&gt; npm run clean\\n&gt; npm run build\\n&gt; npm run cleanbuild\\n&gt; npm run <span class=\\\"hljs-built_in\\\">test</span>\\n&gt; npm run cleantest\\n&gt; npm run watch\\n&gt; npm run demo</code></pre></div>\\n<h3 id=\\\"publishing-to-npm\\\"><a href=\\\"#publishing-to-npm\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Publishing to npm</h3>\\n<div class=\\\"redex-codeblock\\\"><pre class=\\\"hljs lang-none\\\"><code>&gt; npm version major|minor|patch\\n&gt; git push origin --follow-tags\\n&gt; git push upstream --follow-tags\\n&gt; npm publish</code></pre></div>\\n<h3 id=\\\"nixos\\\"><a href=\\\"#nixos\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>NixOS</h3>\\n<p>If you have trouble building/installing the Bucklescript/Reason tools try this:</p>\\n<div class=\\\"redex-codeblock\\\"><pre class=\\\"hljs lang-none\\\"><code>&gt; nix-shell\\n%nix%&gt; npm install</code></pre></div>\\n\",\"homepageUrl\":\"https://github.com/reazen/relude-reason-react\",\"repositoryUrl\":\"https://github.com/reazen/relude-reason-react\",\"npmUrl\":\"https://www.npmjs.com/package/relude-reason-react\",\"issuesUrl\":\"https://github.com/reazen/relude-reason-react/issues\",\"slug\":\"/package/relude-reason-react\"}},\"pathContext\":{\"id\":\"relude-reason-react\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/package-relude-reason-react.json\n// module id = 1401\n// module chunks = 72388055383548"],"sourceRoot":""}