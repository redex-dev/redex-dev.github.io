webpackJsonp([0xd7371fb45e09],{1316:function(s,e){s.exports={data:{package:{type:"published",id:"child-reprocess",name:"child-reprocess",version:"0.1.2",category:"binding",flags:[],platforms:["node"],description:"ReasonML bindings for Node's child_process modules",keywords:["utilities"],license:"MIT",updated:"2020-07-19T14:07:22.579Z",stars:0,score:.47881584835469704,quality:.41146600726439553,popularity:.019553625187427058,maintenance:.9958065067422255,readme:'<h1 id="child-reprocess"><a href="#child-reprocess" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Child-ReProcess</h1>\n<p>ReasonML bindings for Node.js child_process module</p>\n<h2 id="installation"><a href="#installation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>\n<div class="redex-codeblock"><pre class="hljs lang-sh"><code>npm i child-reprocess</code></pre></div>\n<p>then add it as a dependency to <code>bsconfig.json</code></p>\n<div class="redex-codeblock"><pre class="hljs lang-js"><code>{\n    ...\n    <span class="hljs-string">"bs-dependencies"</span>: [<span class="hljs-string">"child-reprocess"</span>]\n}</code></pre></div>\n<h2 id="design-decisions"><a href="#design-decisions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Design decisions</h2>\n<ol>\n<li>\n<p>Module Structure:</p>\n<ul>\n<li>\n<p>ChildReprocess : the main module</p>\n<ul>\n<li>Util         : unrelated utility functions/operators</li>\n<li>\n<p>StdStream    : simple event-focused stream bindings</p>\n<ul>\n<li>Writeable  : writeable stream event bindings (stdout, stderr)</li>\n<li>Readable   : readable stream event bindings (stdin)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>~option</code> objects are pure javascript objects (<code>Js.t({..})</code>)</p>\n</li>\n<li>\n<p>Event handlers are defined as separate functions. Example:</p>\n<div class="redex-codeblock"><pre class="hljs lang-javascript"><code>const cp = require(<span class="hljs-string">"child_process"</span>)\n<span class="hljs-keyword">let</span> process = cp.spawn(\n  <span class="hljs-string">"youtube-dl"</span>, \n  [<span class="hljs-string">"https://www.youtube.com/watch?v=15CXY6JAqbk"</span>]\n);\n\nprocess.stdout.on(\n  <span class="hljs-string">"data"</span>, \n  chunk =&gt; console.log(<span class="hljs-type">String</span>(chunk)),\n);</code></pre></div>\n<p>is equivalent to:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>open <span class="hljs-type">ChildReprocess</span>.<span class="hljs-type">Util</span>;      <span class="hljs-comment">/* &lt;.&gt; (functional composition) */</span>\nopen <span class="hljs-type">ChildReprocess</span>.<span class="hljs-type">StdStream</span>; <span class="hljs-comment">/* Readable */</span>\n\n<span class="hljs-keyword">let</span> process =\n  <span class="hljs-type">ChildReprocess</span>.spawn(\n    <span class="hljs-string">"youtube-dl"</span>,\n    [|<span class="hljs-string">"https://www.youtube.com/watch?v=15CXY6JAqbk"</span>|],\n    (),\n  );\nprocess\n  -&gt;child_stdout\n  -&gt;<span class="hljs-type">Readable</span>.on_data(\n    <span class="hljs-type">Js</span>.log &lt;.&gt; <span class="hljs-type">Node_buffer</span>.<span class="hljs-built_in">toString</span>\n  );</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2310</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n</li>\n</ol>\n',homepageUrl:"https://github.com/DerivedMate/child-reprocess#child-reprocess",repositoryUrl:"https://github.com/DerivedMate/child-reprocess",npmUrl:"https://www.npmjs.com/package/child-reprocess",issuesUrl:"https://github.com/DerivedMate/child-reprocess/issues",slug:"/package/child-reprocess"}},pathContext:{id:"child-reprocess"}}}});
//# sourceMappingURL=path---package-child-reprocess-b83b211c466e29219cec.js.map