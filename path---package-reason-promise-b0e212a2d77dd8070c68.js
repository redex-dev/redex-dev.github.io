webpackJsonp([0x739b6d544d0a],{1370:function(s,e){s.exports={data:{package:{type:"published",id:"reason-promise",name:"reason-promise",version:"1.0.2",category:"binding",flags:[],platforms:["browser","node","native"],description:"Light and type-safe binding to JS promises",keywords:["async"],license:"MIT",updated:"2020-01-18T06:38:42.886Z",stars:240,score:.6818414034160508,quality:.966555912337353,popularity:.11969137753994284,maintenance:.9999504216453285,readme:'<h1 id="promise-----version-102-travis-status-coverage"><a href="#promise-----version-102-travis-status-coverage" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Promise     <a href="https://github.com/aantron/promise/releases"><img src="https://img.shields.io/badge/version-1.0.2-blue.svg" alt="Version 1.0.2"></a> <a href="https://travis-ci.org/aantron/promise/branches"><img src="https://img.shields.io/travis/aantron/promise/master.svg?label=travis" alt="Travis status"></a> <a href="https://coveralls.io/github/aantron/promise?branch=master"><img src="https://img.shields.io/coveralls/aantron/promise/master.svg" alt="Coverage"></a></h1>\n<p>A super light and type-safe binding to JS promises.</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> p = <span class="hljs-type">Promise</span>.resolved(<span class="hljs-string">"Hello"</span>);\n<span class="hljs-type">Js</span>.log(p);\n\n<span class="hljs-comment">/* Promise { \'Hello\' } */</span>\n\np\n-&gt;<span class="hljs-type">Promise</span>.<span class="hljs-built_in">map</span>(s =&gt; s ++ <span class="hljs-string">" world!"</span>)\n-&gt;<span class="hljs-type">Promise</span>.<span class="hljs-keyword">get</span>(s =&gt; <span class="hljs-type">Js</span>.log(s));\n\n<span class="hljs-comment">/* Hello world! */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2310</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n<p>As you can see from <code>Js.log(p)</code>, each <code>Promise</code> is an ordinary, familiar JS\npromise. So, you can use <code>Promise</code> directly to <a href="#Bindings">write JS bindings</a>.</p>\n<p>There is only one exception to this: when there is a promise nested inside\nanother promise. JS doesn\'t allow this. <code>Promise</code> automatically handles that\nfor you. The way <code>Promise</code> does that makes JS promises type-safe in Reason.</p>\n<p><code>Promise</code> also offers a cleaner API, as we would expect in ReasonML :)</p>\n<p><code>Promise</code> is just a tiny binding with a few small tricks. It weighs in at about\n1K bundled.</p>\n<p><code>Promise</code> also comes with a pure-Reason implementation, which passes all the\nsame tests. The plan for that is to make <code>Promise</code> interop with Lwt, libuv,\nand js_of_ocaml.</p>\n<br/>\n<h2 id="installing"><a href="#installing" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installing</h2>\n<p>Run</p>\n<div class="redex-codeblock"><pre class="hljs lang-none"><code>npm install reason-promise</code></pre></div>\n<p>Then, add <code>reason-promise</code> to your <code>bsconfig.json</code>:</p>\n<div class="redex-codeblock"><pre class="hljs lang-json"><code>{\n  <span class="hljs-string">"bs-dependencies"</span>: [\n    <span class="hljs-string">"reason-promise"</span>\n  ]\n}</code></pre></div>\n<br/>\n<h2 id="tutorial"><a href="#tutorial" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tutorial</h2>\n<p>To quickly get a project for pasting the code examples, clone the\n<a href="https://github.com/aantron/promise-example-bsb">example repo</a>. The code is in <code>main.re</code>.</p>\n<div class="redex-codeblock"><pre class="hljs lang-none"><code>git <span class="hljs-built_in">clone</span> https://github.com/aantron/promise-example-bsb\n<span class="hljs-built_in">cd</span> promise-example-bsb\nnpm install\nnpm run <span class="hljs-built_in">test</span>    <span class="hljs-comment"># To run each example.</span></code></pre></div>\n<p>There it also an example repo with\n<a href="https://github.com/aantron/promise-example-binding">a trivial binding to parts of node-fetch</a>.</p>\n<br>\n<ul>\n<li><a href="#Creating">Creating new promises</a></li>\n<li><a href="#Values">Getting values from promises</a></li>\n<li><a href="#Transforming">Transforming promises</a></li>\n<li><a href="#Tracing">Tracing</a></li>\n<li><a href="#Combining">Concurrent combinations</a></li>\n<li><a href="#Errors">Handling errors</a></li>\n<li><a href="#Rejection">Advanced: Rejection</a></li>\n<li><a href="#Bindings">Advanced: Bindings</a></li>\n</ul>\n<br/>\n<p><a id="Creating"></a></p>\n<h3 id="creating-new-promises"><a href="#creating-new-promises" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating new promises</h3>\n<p>The most basic function for creating a new promise is\n<a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L16-L18"><code>Promise.pending</code></a>, which gives you a promise and a function for\nresolving it:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> (p, resolve) = <span class="hljs-type">Promise</span>.pending();\n<span class="hljs-type">Js</span>.log(p);    <span class="hljs-comment">/* Promise { &lt;pending&gt; } */</span>\n\nresolve(<span class="hljs-string">"Hello"</span>);\n<span class="hljs-type">Js</span>.log(p);    <span class="hljs-comment">/* Promise { \'Hello\' } */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> (p,resolve) = <span class="hljs-type">Promise</span>.pending <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> _ = <span class="hljs-type">Js</span>.log p\n<span class="hljs-keyword">let</span> _ = resolve <span class="hljs-string">"Hello"</span>\n<span class="hljs-keyword">let</span> _ = <span class="hljs-type">Js</span>.log p</code></pre>\n      </div>\n    </div>\n  \n<p><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L20-L22"><code>Promise.resolved</code></a> is a helper that returns an already-resolved\npromise:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> p = <span class="hljs-type">Promise</span>.resolved(<span class="hljs-string">"Hello"</span>);\n<span class="hljs-type">Js</span>.log(p);    <span class="hljs-comment">/* Promise { \'Hello\' } */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> p = <span class="hljs-type">Promise</span>.resolved <span class="hljs-string">"Hello"</span>\n<span class="hljs-keyword">let</span> _ = <span class="hljs-type">Js</span>.log p</code></pre>\n      </div>\n    </div>\n  \n<p>...and <a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L24-L26"><code>Promise.exec</code></a> is for running functions that take callbacks:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>[@bs.<span class="hljs-keyword">val</span>]\nexternal setTimeout: (unit =&gt; unit, int) =&gt; unit = <span class="hljs-string">"setTimeout"</span>;\n\n<span class="hljs-keyword">let</span> p =\n  <span class="hljs-type">Promise</span>.exec(resolve =&gt; setTimeout(resolve, <span class="hljs-number">1000</span>))\n<span class="hljs-type">Js</span>.log(p);    <span class="hljs-comment">/* Promise { &lt;pending&gt; } */</span>\n\n<span class="hljs-comment">/* Program then waits for one second before exiting. */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">967</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n<br/>\n<p><a id="Values"></a></p>\n<h3 id="getting-values-from-promises"><a href="#getting-values-from-promises" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Getting values from promises</h3>\n<p>To do something once a promise is resolved, use <a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L31-L33"><code>Promise.get</code></a>:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> (p, resolve) = <span class="hljs-type">Promise</span>.pending();\n\np-&gt;<span class="hljs-type">Promise</span>.<span class="hljs-keyword">get</span>(s =&gt; <span class="hljs-type">Js</span>.log(s));\n\nresolve(<span class="hljs-string">"Hello"</span>);   <span class="hljs-comment">/* "Hello" is logged. */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2310</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n<br/>\n<p><a id="Transforming"></a></p>\n<h3 id="transforming-promises"><a href="#transforming-promises" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Transforming promises</h3>\n<p>Use <a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L39-L41"><code>Promise.map</code></a> to transform the value inside a promise:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> (p, resolve) = <span class="hljs-type">Promise</span>.pending();\n\np\n-&gt;<span class="hljs-type">Promise</span>.<span class="hljs-built_in">map</span>(s =&gt; s ++ <span class="hljs-string">" world"</span>)\n-&gt;<span class="hljs-type">Promise</span>.<span class="hljs-keyword">get</span>(s =&gt; <span class="hljs-type">Js</span>.log(s));\n\nresolve(<span class="hljs-string">"Hello"</span>);   <span class="hljs-comment">/* Hello world */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2310</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n<p>To be precise, <code>Promise.map</code> creates a <em>new</em> promise with the transformed value.</p>\n<p>If the function you are using to transform the value also returns a promise,\nuse <a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L43-L45"><code>Promise.flatMap</code></a> instead of <code>Promise.map</code>. <code>Promise.flatMap</code>\nwill flatten the nested promise.</p>\n<br/>\n<p><a id="Tracing"></a></p>\n<h3 id="tracing"><a href="#tracing" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tracing</h3>\n<p>If you have a chain of promise operations, and you\'d like to inspect the value\nin the middle of the chain, use <a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L35-L37"><code>Promise.tap</code></a>:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> (p, resolve) = <span class="hljs-type">Promise</span>.pending();\n\np\n-&gt;<span class="hljs-type">Promise</span>.tap(s =&gt; <span class="hljs-type">Js</span>.log(<span class="hljs-string">"Value is now: "</span> ++ s))\n-&gt;<span class="hljs-type">Promise</span>.<span class="hljs-built_in">map</span>(s =&gt; s ++ <span class="hljs-string">" world"</span>)\n-&gt;<span class="hljs-type">Promise</span>.tap(s =&gt; <span class="hljs-type">Js</span>.log(<span class="hljs-string">"Value is now: "</span> ++ s))\n-&gt;<span class="hljs-type">Promise</span>.<span class="hljs-keyword">get</span>(s =&gt; <span class="hljs-type">Js</span>.log(s));\n\nresolve(<span class="hljs-string">"Hello"</span>);\n\n<span class="hljs-comment">/*\nValue is now: Hello\nValue is now: Hello world\nHello world\n*/</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2310</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n<br/>\n<p><a id="Combining"></a></p>\n<h3 id="concurrent-combinations"><a href="#concurrent-combinations" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Concurrent combinations</h3>\n<p><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L117-L119"><code>Promise.race</code></a> waits for <em>one</em> of the promises passed to it to resolve:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>[@bs.<span class="hljs-keyword">val</span>]\nexternal setTimeout: (unit =&gt; unit, int) =&gt; unit = <span class="hljs-string">"setTimeout"</span>;\n\n<span class="hljs-keyword">let</span> one_second = <span class="hljs-type">Promise</span>.exec(resolve =&gt; setTimeout(resolve, <span class="hljs-number">1000</span>));\n<span class="hljs-keyword">let</span> five_seconds = <span class="hljs-type">Promise</span>.exec(resolve =&gt; setTimeout(resolve, <span class="hljs-number">5000</span>));\n\n<span class="hljs-type">Promise</span>.race([one_second, five_seconds])\n-&gt;<span class="hljs-type">Promise</span>.<span class="hljs-keyword">get</span>(() =&gt; { <span class="hljs-type">Js</span>.log(<span class="hljs-string">"Hello"</span>); exit(<span class="hljs-number">0</span>); });\n\n<span class="hljs-comment">/* Prints "Hello" after one second. */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2310</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n<p><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L121-L123"><code>Promise.all</code></a> instead waits for <em>all</em> of the promises passed to it,\nconcurrently:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>[@bs.<span class="hljs-keyword">val</span>]\nexternal setTimeout: (unit =&gt; unit, int) =&gt; unit = <span class="hljs-string">"setTimeout"</span>;\n\n<span class="hljs-keyword">let</span> one_second = <span class="hljs-type">Promise</span>.exec(resolve =&gt; setTimeout(resolve, <span class="hljs-number">1000</span>));\n<span class="hljs-keyword">let</span> five_seconds = <span class="hljs-type">Promise</span>.exec(resolve =&gt; setTimeout(resolve, <span class="hljs-number">5000</span>));\n\n<span class="hljs-type">Promise</span>.all([one_second, five_seconds])\n-&gt;<span class="hljs-type">Promise</span>.<span class="hljs-keyword">get</span>(<span class="hljs-number">_</span> =&gt; { <span class="hljs-type">Js</span>.log(<span class="hljs-string">"Hello"</span>); exit(<span class="hljs-number">0</span>); });\n\n<span class="hljs-comment">/* Prints "Hello" after five seconds. */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2310</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n<p>For convenience, there are several variants of <code>Promise.all</code>:</p>\n<ul>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L129-L131"><code>Promise.all2</code></a></li>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L133-L135"><code>Promise.all3</code></a></li>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L137-L139"><code>Promise.all4</code></a></li>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L141-L143"><code>Promise.all5</code></a></li>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L145-L152"><code>Promise.all6</code></a></li>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L125-L127"><code>Promise.allArray</code></a></li>\n</ul>\n<br/>\n<p><a id="Errors"></a></p>\n<h3 id="handling-errors"><a href="#handling-errors" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Handling errors</h3>\n<p>Promises that can fail are represented using the standard library\'s\n<a href="https://bucklescript.github.io/bucklescript/api/Belt.Result.html"><code>Result</code></a>, and its constructors <code>Ok</code> and <code>Error</code>:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>open <span class="hljs-type">Belt</span>.<span class="hljs-type">Result</span>;\n\n<span class="hljs-type">Promise</span>.resolved(<span class="hljs-type">Ok</span>(<span class="hljs-string">"Hello"</span>))\n-&gt;<span class="hljs-type">Promise</span>.getOk(s =&gt; <span class="hljs-type">Js</span>.log(s));      <span class="hljs-comment">/* Hello */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2310</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n<p><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L53-L55"><code>Promise.getOk</code></a> waits for <code>p</code> to have a value, and runs its function\nonly if that value is <code>Ok(_)</code>. If you instead resolve the promise with\n<code>Error(_)</code>, there will be no output:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>open <span class="hljs-type">Belt</span>.<span class="hljs-type">Result</span>;\n\n<span class="hljs-type">Promise</span>.resolved(<span class="hljs-type">Error</span>(<span class="hljs-string">"Failed"</span>))\n-&gt;<span class="hljs-type">Promise</span>.getOk(s =&gt; <span class="hljs-type">Js</span>.log(s));      <span class="hljs-comment">/* Program just exits. */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2310</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n<p>You can wait for either kind of value by calling <a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L53-L55"><code>Promise.getOk</code></a> or\n<a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L69-L71"><code>Promise.getError</code></a>:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>open <span class="hljs-type">Belt</span>.<span class="hljs-type">Result</span>;\n\n<span class="hljs-keyword">let</span> () = {\n  <span class="hljs-keyword">let</span> p = <span class="hljs-type">Promise</span>.resolved(<span class="hljs-type">Error</span>(<span class="hljs-string">"Failed"</span>));\n  p-&gt;<span class="hljs-type">Promise</span>.getOk(s =&gt; <span class="hljs-type">Js</span>.log(s));\n  p-&gt;<span class="hljs-type">Promise</span>.getError(s =&gt; <span class="hljs-type">Js</span>.log(<span class="hljs-string">"Error: "</span> ++ s));\n};                                    <span class="hljs-comment">/* Error: Failed */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">967</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n<p>...or respond to all outcomes using the ordinary <a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L31-L33"><code>Promise.get</code></a>:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>open <span class="hljs-type">Belt</span>.<span class="hljs-type">Result</span>;\n\n<span class="hljs-type">Promise</span>.resolved(<span class="hljs-type">Error</span>(<span class="hljs-string">"Failed"</span>))\n-&gt;<span class="hljs-type">Promise</span>.<span class="hljs-keyword">get</span>(result =&gt;\n  <span class="hljs-keyword">switch</span> (result) {\n  | <span class="hljs-type">Ok</span>(s) =&gt; <span class="hljs-type">Js</span>.log(s);\n  | <span class="hljs-type">Error</span>(s) =&gt; <span class="hljs-type">Js</span>.log(<span class="hljs-string">"Error: "</span> ++ s);\n  });                                 <span class="hljs-comment">/* Error: Failed */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2310</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n<p>The full set of functions for handling results is:</p>\n<ul>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L53-L55"><code>Promise.getOk</code></a></li>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L57-L59"><code>Promise.tapOk</code></a></li>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L61-L63"><code>Promise.mapOk</code></a></li>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L65-L67"><code>Promise.flatMapOk</code></a></li>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L69-L71"><code>Promise.getError</code></a></li>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L73-L75"><code>Promise.tapError</code></a></li>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L77-L79"><code>Promise.mapError</code></a></li>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L81-L83"><code>Promise.flatMapError</code></a></li>\n</ul>\n<p>There are also similar functions for working with <a href="https://bucklescript.github.io/bucklescript/api/Belt.Option.html"><code>Option</code></a>:</p>\n<ul>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L98-L100"><code>Promise.getSome</code></a></li>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L102-L104"><code>Promise.tapSome</code></a></li>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L106-L108"><code>Promise.mapSome</code></a></li>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L110-L112"><code>Promise.flatMapSome</code></a></li>\n</ul>\n<br/>\n<p><a id="Rejection"></a></p>\n<h3 id="advanced-rejection"><a href="#advanced-rejection" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Advanced: Rejection</h3>\n<p>As you can see from <a href="#Errors">Handling errors</a>, <code>Promise</code> doesn\'t use rejection\nfor errors — but JavaScript promises do. In order to support bindings to\nJavaScript libraries, which often return promises that can be rejected,\n<code>Promise</code> provides the <code>Promise.Js</code> helper module.</p>\n<p><code>Promise.Js</code> works the same way as <code>Promise</code>. It similarly has:</p>\n<ul>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L174-L176"><code>Promise.Js.get</code></a></li>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L178-L180"><code>Promise.Js.tap</code></a></li>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L182-L184"><code>Promise.Js.map</code></a></li>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L186-L188"><code>Promise.Js.flatMap</code></a></li>\n</ul>\n<p>However, because <code>Promise.Js</code> uses JS rejection for error handling rather than\n<code>Result</code> or <code>Option</code>,</p>\n<ul>\n<li>There are no helpers for <code>Result</code> and <code>Option</code>.</li>\n<li>There is <a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L191-L193"><code>Promise.Js.catch</code></a> for handling rejection.</li>\n<li>There is <a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L169-L171"><code>Promise.Js.rejected</code></a> for creating an\nalready-rejected promise.</li>\n</ul>\n<p>Underneath, <code>Promise</code> and <code>Promise.Js</code> have the same implementation:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">type</span> <span class="hljs-type">Promise</span>.t(\'a) = <span class="hljs-type">Promise</span>.<span class="hljs-type">Js</span>.t(\'a, never);</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">3647</span>: &lt;<span class="hljs-type">UNKNOWN</span> <span class="hljs-type">SYNTAX</span> <span class="hljs-type">ERROR</span>&gt;</code></pre>\n      </div>\n    </div>\n  \n<p>That is, <code>Promise</code> is really <code>Promise.Js</code> that has no rejection type, and no\nexposed helpers for rejection.</p>\n<p>There are several helpers for converting between <code>Promise</code> and <code>Promise.Js</code>:</p>\n<ul>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L205-L207"><code>Promise.Js.relax</code></a></li>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L209-L211"><code>Promise.Js.toResult</code></a></li>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L213-L215"><code>Promise.Js.fromResult</code></a></li>\n</ul>\n<p><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L191-L193"><code>Promise.Js.catch</code></a> can also perform a conversion to <code>Promise</code>, if\nyou simply convert a rejection to a resolution. In the next example, note the\nfinal line is no longer using <code>Promise.Js</code>, but <code>Promise</code>:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-type">Promise</span>.<span class="hljs-type">Js</span>.rejected(<span class="hljs-string">"Failed"</span>)\n-&gt;<span class="hljs-type">Promise</span>.<span class="hljs-type">Js</span>.catch(s =&gt; <span class="hljs-type">Promise</span>.resolved(<span class="hljs-string">"Error: "</span> ++ s))\n-&gt;<span class="hljs-type">Promise</span>.<span class="hljs-keyword">get</span>(s =&gt; <span class="hljs-type">Js</span>.log(s));        <span class="hljs-comment">/* Error: Failed */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2310</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n<p>There are also two functions for converting between <code>Promise.Js</code> and the current\npromise binding in the BuckleScript standard libarary, <code>Js.Promise</code>:</p>\n<ul>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L217-L219"><code>Promise.Js.fromBsPromise</code></a></li>\n<li><a href="https://github.com/aantron/promise/blob/dcbd596fa8207c62b7c26416ff681f25e6eedb67/src/js/promise.rei#L221-L223"><code>Promise.Js.toBsPromise</code></a></li>\n</ul>\n<p>Because both libraries are bindings for the same exact kind of value, these are\nboth no-op identity functions that only change the type.</p>\n<br>\n<p><a id="Bindings"></a></p>\n<h3 id="advanced-bindings"><a href="#advanced-bindings" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Advanced: Bindings</h3>\n<p>Refer to the <a href="https://github.com/aantron/promise-example-binding">example repo</a>.</p>\n<p>When you want to bind a JS function that <em>returns</em> a promise, you can use\n<code>Promise</code> directly in its return value:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>[%%bs.raw {|\nfunction delay(value, milliseconds) {\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">Promise</span>(function(resolve) {\n    setTimeout(function() { resolve(value); }, milliseconds)\n  });\n}|}]\n\n[@bs.<span class="hljs-keyword">val</span>]\nexternal delay: (\'a, int) =&gt; <span class="hljs-type">Promise</span>.t(\'a) = <span class="hljs-string">"delay"</span>;\n\ndelay(<span class="hljs-string">"Hello"</span>, <span class="hljs-number">1000</span>)\n-&gt;<span class="hljs-type">Promise</span>.<span class="hljs-keyword">get</span>(s =&gt; <span class="hljs-type">Js</span>.log(s));\n\n<span class="hljs-comment">/* Prints "Hello" after one second. */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2305</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n<p>If the promise can be rejected, you should use <code>Promise.Js</code> instead, and\n<a href="#Rejection">convert to <code>Promise</code></a> as quickly as possible. Here is one way to\ndo that:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>[%%bs.raw {|\nfunction delayReject(value, milliseconds) {\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">Promise</span>(function(resolve, reject) {\n    setTimeout(function() { reject(value); }, milliseconds)\n  });\n}|}]\n\n[@bs.<span class="hljs-keyword">val</span>]\nexternal delayRejectRaw: (\'a, int) =&gt; <span class="hljs-type">Promise</span>.<span class="hljs-type">Js</span>.t(<span class="hljs-number">_</span>, \'a) = <span class="hljs-string">"delayReject"</span>;\n<span class="hljs-keyword">let</span> delayReject = (value, milliseconds) =&gt;\n  delayRejectRaw(value, milliseconds)\n  -&gt;<span class="hljs-type">Promise</span>.<span class="hljs-type">Js</span>.toResult;\n\ndelayReject(<span class="hljs-string">"Hello"</span>, <span class="hljs-number">1000</span>)\n-&gt;<span class="hljs-type">Promise</span>.getError(s =&gt; <span class="hljs-type">Js</span>.log(s));\n\n<span class="hljs-comment">/* Prints "Hello" after one second. */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2305</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n<p>When <em>passing</em> a promise to JS, it is generally safe to use <code>Promise</code> rather\nthan <code>Promise.Js</code>:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>[%%bs.raw {|\nfunction log(p) {\n  p.then(function (v) { console.log(v); });\n}|}]\n\n[@bs.<span class="hljs-keyword">val</span>]\nexternal log: <span class="hljs-type">Promise</span>.t(\'a) =&gt; unit = <span class="hljs-string">"log"</span>;\n\nlog(<span class="hljs-type">Promise</span>.resolved(<span class="hljs-string">"Hello"</span>));       <span class="hljs-comment">/* Hello */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2305</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n<p>As always, it is important to be careful about the set of values that a promise\ncan be resolved or rejected with, since JS can return anything :) Additional JS\ncode may be necessary to handle this, as with any JS binding.</p>\n<!-- YOU HAVE FOUND THE SECRET EASTER EGG! -->\n',
homepageUrl:"https://github.com/aantron/promise",repositoryUrl:"https://github.com/aantron/promise",npmUrl:"https://www.npmjs.com/package/reason-promise",issuesUrl:"https://github.com/aantron/promise/issues",slug:"/package/reason-promise"}},pathContext:{id:"reason-promise"}}}});
//# sourceMappingURL=path---package-reason-promise-b0e212a2d77dd8070c68.js.map