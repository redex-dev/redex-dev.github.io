webpackJsonp([0xec7a68fdcbcf],{1390:function(s,a){s.exports={data:{package:{type:"published",id:"reductive-observable",name:"reductive-observable",version:"0.1.0",category:"library",flags:[],platforms:["browser","node"],description:"Minimal port of redux-observable to reason reductive",keywords:["development tools","reactive programming"],license:"MIT",updated:"2020-01-27T09:07:05.856Z",stars:0,score:.45394891119576375,quality:.724375661122526,popularity:.013860759539381097,maintenance:.6622427057720645,readme:'<h1 id="reductive-observable"><a href="#reductive-observable" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>reductive-observable</h1>\n<p>Minimal port of <a href="https://github.com/redux-observable/redux-observable">redux-observable</a> to reason reductive.\nCentalized rx side-effects for reductive.</p>\n<h2 id="installation"><a href="#installation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>\n<div class="redex-codeblock"><pre class="hljs lang-none"><code>npm install reductive-observable</code></pre></div>\n<p>Then add <code>reductive-observable</code> into <code>bs-dependencies</code> in your project <code>bsconfig.json</code></p>\n<h2 id="usage"><a href="#usage" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>\n<p>Your side-effect is defined as <code>epic</code>. Epic is an observable operator (transformer function) that takes an <code>Rx.Observable.t(action, state)</code> tuple and returns an <code>Rx.Observable.t(action)</code>, that is an observable that emits actions back to the store. Let\'s look on the following example:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">State</span> </span>{\n  <span class="hljs-keyword">type</span> t = {\n    <span class="hljs-built_in">count</span>: int\n  };\n};\n\n<span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">Action</span> </span>{\n  <span class="hljs-keyword">type</span> t = \n    | <span class="hljs-type">Increment</span> \n    | <span class="hljs-type">Decrement</span> \n    | <span class="hljs-type">StartIncrementing</span>(int) \n    | <span class="hljs-type">StartDecrementing</span>(int)\n};\n\n<span class="hljs-keyword">let</span> reducer = (state: <span class="hljs-type">State</span>.t, action: <span class="hljs-type">Action</span>.t): <span class="hljs-type">State</span>.t =&gt; \n  <span class="hljs-keyword">switch</span>(action){\n  | <span class="hljs-type">Increment</span> =&gt; { <span class="hljs-built_in">count</span>: state.<span class="hljs-built_in">count</span> + <span class="hljs-number">1</span> }\n  | <span class="hljs-type">Decrement</span> =&gt; { <span class="hljs-built_in">count</span>: state.<span class="hljs-built_in">count</span> - <span class="hljs-number">1</span> }\n  | <span class="hljs-type">StartIncrementing</span>(<span class="hljs-number">_</span>) =&gt; state\n  | <span class="hljs-type">StartDecrementing</span>(<span class="hljs-number">_</span>) =&gt; state\n  };\n\n<span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">Epics</span> </span>{\n  <span class="hljs-keyword">let</span> startIncrementing = (ro: <span class="hljs-type">Rx</span>.<span class="hljs-type">Observable</span>.t((<span class="hljs-type">Action</span>.t, <span class="hljs-type">State</span>.t))) =&gt; <span class="hljs-type">ReductiveObservable</span>.<span class="hljs-type">Utils</span>.({ \n    ro\n    |&gt; optmap(<span class="hljs-func"><span class="hljs-keyword">fun</span><span class="hljs-params"> |<span class="hljs-params"> (Action.StartIncrementing(<span class="hljs-built_in">count</span>),<span class="hljs-params"> _store)<span class="hljs-params"> </span></span></span></span></span>=&gt; <span class="hljs-type">Some</span>(<span class="hljs-built_in">count</span>) | <span class="hljs-number">_</span> =&gt; <span class="hljs-type">None</span>)\n    |&gt; <span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span>.mergeMap(`<span class="hljs-type">Observable</span>((<span class="hljs-built_in">count</span>, _idx) =&gt; \n      <span class="hljs-type">Rx</span>.range(~<span class="hljs-built_in">count</span>=<span class="hljs-built_in">count</span>, ())\n      |&gt; <span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span>.<span class="hljs-built_in">map</span>((_value, _idx) =&gt; <span class="hljs-type">Action</span>.<span class="hljs-type">Increment</span>)\n    ))\n  });\n\n  <span class="hljs-keyword">let</span> startDecrementing = (ro: <span class="hljs-type">Rx</span>.<span class="hljs-type">Observable</span>.t((<span class="hljs-type">Action</span>.t, <span class="hljs-type">State</span>.t))) =&gt; <span class="hljs-type">ReductiveObservable</span>.<span class="hljs-type">Utils</span>.({ \n    ro\n    |&gt; optmap(<span class="hljs-func"><span class="hljs-keyword">fun</span><span class="hljs-params"> |<span class="hljs-params"> (Action.StartDecrementing(<span class="hljs-built_in">count</span>),<span class="hljs-params"> _store)<span class="hljs-params"> </span></span></span></span></span>=&gt; <span class="hljs-type">Some</span>(<span class="hljs-built_in">count</span>) | <span class="hljs-number">_</span> =&gt; <span class="hljs-type">None</span>)\n    |&gt; <span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span>.mergeMap(`<span class="hljs-type">Observable</span>((<span class="hljs-built_in">count</span>, _idx) =&gt; \n      <span class="hljs-type">Rx</span>.range(~<span class="hljs-built_in">count</span>=<span class="hljs-built_in">count</span>, ())\n      |&gt; <span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span>.<span class="hljs-built_in">map</span>((_value, _idx) =&gt; <span class="hljs-type">Action</span>.<span class="hljs-type">Decrement</span>)\n    ))\n  });\n\n  <span class="hljs-comment">/**\n    use empty operator when side effect does not need to emit actions back to the store\n   */</span>\n  <span class="hljs-keyword">let</span> logState = (ro: <span class="hljs-type">Rx</span>.<span class="hljs-type">Observable</span>.t((<span class="hljs-type">Action</span>.t, <span class="hljs-type">State</span>.t))) =&gt; \n    ro\n    |&gt; <span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span>.tap(~next=((_action, state)) =&gt; <span class="hljs-type">Js</span>.log(state))\n    |&gt; <span class="hljs-type">ReductiveObservable</span>.<span class="hljs-type">Utils</span>.empty;\n      \n  <span class="hljs-keyword">let</span> root = (ro: <span class="hljs-type">Rx</span>.<span class="hljs-type">Observable</span>.t((<span class="hljs-type">Action</span>.t, <span class="hljs-type">State</span>.t))) =&gt;\n    <span class="hljs-type">Rx</span>.merge([|\n      ro |&gt; startIncrementing,\n      ro |&gt; startDecrementing,\n      ro |&gt; logState\n    |]);\n};</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">module</span> <span class="hljs-type">State</span> = <span class="hljs-keyword">struct</span> <span class="hljs-keyword">type</span> t = {\n                        count: <span class="hljs-built_in">int</span>;} <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">module</span> <span class="hljs-type">Action</span> =\n  <span class="hljs-keyword">struct</span>\n    <span class="hljs-keyword">type</span> t =\n      | <span class="hljs-type">Increment</span>\n      | <span class="hljs-type">Decrement</span>\n      | <span class="hljs-type">StartIncrementing</span> <span class="hljs-keyword">of</span> <span class="hljs-built_in">int</span>\n      | <span class="hljs-type">StartDecrementing</span> <span class="hljs-keyword">of</span> <span class="hljs-built_in">int</span>\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">let</span> reducer (state : <span class="hljs-type">State</span>.t) (action : <span class="hljs-type">Action</span>.t) =\n  (<span class="hljs-keyword">match</span> action <span class="hljs-keyword">with</span>\n   | <span class="hljs-type">Increment</span>  -&gt; { count = (state.count + <span class="hljs-number">1</span>) }\n   | <span class="hljs-type">Decrement</span>  -&gt; { count = (state.count - <span class="hljs-number">1</span>) }\n   | <span class="hljs-type">StartIncrementing</span> _ -&gt; state\n   | <span class="hljs-type">StartDecrementing</span> _ -&gt; state : <span class="hljs-type">State</span>.t)\n<span class="hljs-keyword">module</span> <span class="hljs-type">Epics</span> =\n  <span class="hljs-keyword">struct</span>\n    <span class="hljs-keyword">let</span> startIncrementing (ro : (<span class="hljs-type">Action</span>.t* <span class="hljs-type">State</span>.t) <span class="hljs-type">Rx</span>.<span class="hljs-type">Observable</span>.t) =\n      <span class="hljs-keyword">let</span> <span class="hljs-keyword">open</span> <span class="hljs-type">ReductiveObservable</span>.<span class="hljs-type">Utils</span> <span class="hljs-keyword">in</span>\n        (ro |&gt;\n           (optmap\n              (<span class="hljs-keyword">function</span>\n               | (((<span class="hljs-type">Action</span>.<span class="hljs-type">StartIncrementing</span>\n                  (count))[@explicit_arity ]),_store) -&gt;\n                   ((<span class="hljs-type">Some</span> (count))[@explicit_arity ])\n               | _ -&gt; <span class="hljs-type">None</span>)))\n          |&gt;\n          (<span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span>.mergeMap\n             (<span class="hljs-tag">`Observable</span>\n                (<span class="hljs-keyword">fun</span> count  -&gt;\n                   <span class="hljs-keyword">fun</span> _idx  -&gt;\n                     (<span class="hljs-type">Rx</span>.range ~count <span class="hljs-literal">()</span>) |&gt;\n                       (<span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span>.map\n                          (<span class="hljs-keyword">fun</span> _value  -&gt; <span class="hljs-keyword">fun</span> _idx  -&gt; <span class="hljs-type">Action</span>.<span class="hljs-type">Increment</span>)))))\n    <span class="hljs-keyword">let</span> startDecrementing (ro : (<span class="hljs-type">Action</span>.t* <span class="hljs-type">State</span>.t) <span class="hljs-type">Rx</span>.<span class="hljs-type">Observable</span>.t) =\n      <span class="hljs-keyword">let</span> <span class="hljs-keyword">open</span> <span class="hljs-type">ReductiveObservable</span>.<span class="hljs-type">Utils</span> <span class="hljs-keyword">in</span>\n        (ro |&gt;\n           (optmap\n              (<span class="hljs-keyword">function</span>\n               | (((<span class="hljs-type">Action</span>.<span class="hljs-type">StartDecrementing</span>\n                  (count))[@explicit_arity ]),_store) -&gt;\n                   ((<span class="hljs-type">Some</span> (count))[@explicit_arity ])\n               | _ -&gt; <span class="hljs-type">None</span>)))\n          |&gt;\n          (<span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span>.mergeMap\n             (<span class="hljs-tag">`Observable</span>\n                (<span class="hljs-keyword">fun</span> count  -&gt;\n                   <span class="hljs-keyword">fun</span> _idx  -&gt;\n                     (<span class="hljs-type">Rx</span>.range ~count <span class="hljs-literal">()</span>) |&gt;\n                       (<span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span>.map\n                          (<span class="hljs-keyword">fun</span> _value  -&gt; <span class="hljs-keyword">fun</span> _idx  -&gt; <span class="hljs-type">Action</span>.<span class="hljs-type">Decrement</span>)))))\n    <span class="hljs-keyword">let</span> logState (ro : (<span class="hljs-type">Action</span>.t* <span class="hljs-type">State</span>.t) <span class="hljs-type">Rx</span>.<span class="hljs-type">Observable</span>.t) =\n      (ro |&gt; (<span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span>.tap ~next:(<span class="hljs-keyword">fun</span> (_action,state)  -&gt; <span class="hljs-type">Js</span>.log state)))\n        |&gt; <span class="hljs-type">ReductiveObservable</span>.<span class="hljs-type">Utils</span>.empty[@@ocaml.doc\n                                            <span class="hljs-string">"\\n    use empty operator when side effect does not need to emit actions back to the store\\n   "</span>]\n    <span class="hljs-keyword">let</span> root (ro : (<span class="hljs-type">Action</span>.t* <span class="hljs-type">State</span>.t) <span class="hljs-type">Rx</span>.<span class="hljs-type">Observable</span>.t) =\n      <span class="hljs-type">Rx</span>.merge\n        [|(ro |&gt; startIncrementing);(ro |&gt; startDecrementing);(ro |&gt; logState)|]\n  <span class="hljs-keyword">end</span></code></pre>\n      </div>\n    </div>\n  \n<p>We have 3 epics defined here. Two of them trasform <code>StartDecrementing(count) / StartDecrementing(count)</code> into #count dispatches of <code>Increment / Decrement</code> back to the store via <code>Rx.range</code> observable creator. The third action just logs the state after each action dispatched, and since it doesn\'t need to emit anything back to the store, <code>ReductiveObservable.Utils.empty</code> operator is used to mergeMap observable sequence to <code>Rx.empty</code>.\nTo apply these epics pass them as parameter to <code>ReductiveObservable.middleware</code> which is passed to reductive store creator.</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> store = <span class="hljs-type">Reductive</span>.<span class="hljs-type">Store</span>.create(\n  ~reducer,\n  ~preloadedState={ <span class="hljs-built_in">count</span>: <span class="hljs-number">0</span> },\n  ~enhancer=<span class="hljs-type">ReductiveObservable</span>.middleware(<span class="hljs-type">Rx</span>.of1(<span class="hljs-type">Epics</span>.root)),\n  ()\n);</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> store =\n  <span class="hljs-type">Reductive</span>.<span class="hljs-type">Store</span>.create ~reducer ~preloadedState:{ count = <span class="hljs-number">0</span> }\n    ~enhancer:(<span class="hljs-type">ReductiveObservable</span>.middleware (<span class="hljs-type">Rx</span>.of1 <span class="hljs-type">Epics</span>.root)) <span class="hljs-literal">()</span></code></pre>\n      </div>\n    </div>\n  \n<h2 id="hot-reload-of-epics"><a href="#hot-reload-of-epics" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hot Reload of epics</h2>\n<p>This middleware supports react HMR. For HMR bindings defined as: </p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">type</span> hot;\n[@bs.send] external _accept: (hot, string, unit =&gt; unit) =&gt; unit = <span class="hljs-string">"accept"</span>;\n[@bs.send] external _decline: hot =&gt; unit = <span class="hljs-string">"decline"</span>;\n\n[@bs.deriving abstract]\n<span class="hljs-keyword">type</span> module_type = {\n  hot: <span class="hljs-type">Js</span>.<span class="hljs-type">Undefined</span>.t(hot)\n};\n\n[@bs.<span class="hljs-keyword">val</span>]\nexternal module_: module_type = <span class="hljs-string">"module"</span>; \n\n<span class="hljs-keyword">let</span> isAvailable = (module_) =&gt; \n  module_ \n  |. hotGet \n  |. <span class="hljs-type">Js</span>.<span class="hljs-type">Undefined</span>.toOption\n  |. <span class="hljs-type">Belt</span>.<span class="hljs-type">Option</span>.isSome;\n\n<span class="hljs-keyword">let</span> accept = (module_, path, onHotReload) =&gt; {\n  <span class="hljs-keyword">let</span> hmr = module_ |. hotGet;\n  <span class="hljs-keyword">switch</span>(hmr |. <span class="hljs-type">Js</span>.<span class="hljs-type">Undefined</span>.toOption){\n  | <span class="hljs-type">None</span> =&gt; <span class="hljs-type">Console</span>.warn(<span class="hljs-string">"Webpack HMR is not available, accept did nothing"</span>)\n  | <span class="hljs-type">Some</span>(hmr) =&gt; _accept(hmr, path, onHotReload);\n  };\n}\n\n<span class="hljs-keyword">let</span> decline = (module_) =&gt; {\n  <span class="hljs-keyword">let</span> hmr = module_ |. hotGet;\n  <span class="hljs-keyword">switch</span>(hmr |. <span class="hljs-type">Js</span>.<span class="hljs-type">Undefined</span>.toOption){\n  | <span class="hljs-type">None</span> =&gt; <span class="hljs-type">Console</span>.warn(<span class="hljs-string">"Webpack HMR is not available, decline did nothing"</span>)\n  | <span class="hljs-type">Some</span>(hmr) =&gt; { \n    _decline(hmr); \n  }\n  };  \n}</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">967</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n<p>define you epic as <code>Rx.BehaviourSubject</code>:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> hmrEpic = <span class="hljs-type">Rx</span>.<span class="hljs-type">BehaviorSubject</span>.create(<span class="hljs-type">Epics</span>.root);\n<span class="hljs-keyword">let</span> store = storeCreator(\n  ~reducer=<span class="hljs-type">Reducers</span>.root, \n  ~preloadedState=initial, \n  ~enhancer=<span class="hljs-type">ReductiveObservable</span>.middleware(hmrEpic |&gt; <span class="hljs-type">Rx</span>.<span class="hljs-type">BehaviorSubject</span>.asObservable), \n  ());</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> hmrEpic = <span class="hljs-type">Rx</span>.<span class="hljs-type">BehaviorSubject</span>.create <span class="hljs-type">Epics</span>.root\n<span class="hljs-keyword">let</span> store =\n  storeCreator ~reducer:<span class="hljs-type">Reducers</span>.root ~preloadedState:initial\n    ~enhancer:(<span class="hljs-type">ReductiveObservable</span>.middleware\n                 (hmrEpic |&gt; <span class="hljs-type">Rx</span>.<span class="hljs-type">BehaviorSubject</span>.asObservable)) <span class="hljs-literal">()</span></code></pre>\n      </div>\n    </div>\n  \n<p>then using HMR functionality:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">if</span>(<span class="hljs-type">HMR</span>.isAvailable(<span class="hljs-type">HMR</span>.module_)){\n  <span class="hljs-type">HMR</span>.accept(<span class="hljs-type">HMR</span>.module_, <span class="hljs-string">"./lib/js/src/reductive/epics/Epics.bs.js"</span>, () =&gt; {\n    <span class="hljs-keyword">let</span> hotReloadedRootEpic: (<span class="hljs-type">Rx</span>.<span class="hljs-type">Observable</span>.t((\'action, \'state))) =&gt; <span class="hljs-type">Rx</span>.<span class="hljs-type">Observable</span>.t((\'action)) = [%bs.raw <span class="hljs-string">"require(\'reason/reductive/epics/Epics.bs.js\').epic"</span>];\n    \n    <span class="hljs-comment">/**\n     * this is safe ONLY WHEN epics are stateless\n     * given RxJs nature, it\'s easy to introduce implicit states into epics\n     * when using anything utilizing BehaviourSubject/ReplaySubject/shareReplay etc.\n     * be VERY CAREFUL with it as it can lead to unpredictable states when hot reloaded\n     */</span>\n    hmrEpic \n    |&gt; <span class="hljs-type">Rx</span>.<span class="hljs-type">BehaviorSubject</span>.next(hotReloadedRootEpic);\n    <span class="hljs-type">Js</span>.log(<span class="hljs-string">"[HMR] (Store) ReductiveObservable epics hot reloaded"</span>);\n  });\n};</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> _ =\n  <span class="hljs-keyword">if</span> <span class="hljs-type">HMR</span>.isAvailable <span class="hljs-type">HMR</span>.module_\n  <span class="hljs-keyword">then</span>\n    <span class="hljs-type">HMR</span>.accept <span class="hljs-type">HMR</span>.module_ <span class="hljs-string">"./lib/js/src/reductive/epics/Epics.bs.js"</span>\n      (<span class="hljs-keyword">fun</span> <span class="hljs-literal">()</span>  -&gt;\n         <span class="hljs-keyword">let</span> hotReloadedRootEpic:\n           (<span class="hljs-symbol">\'action</span>* <span class="hljs-symbol">\'state</span>) <span class="hljs-type">Rx</span>.<span class="hljs-type">Observable</span>.t -&gt; <span class="hljs-symbol">\'action</span> <span class="hljs-type">Rx</span>.<span class="hljs-type">Observable</span>.t =\n           [%bs.raw <span class="hljs-string">"require(\'reason/reductive/epics/Epics.bs.js\').epic"</span>] <span class="hljs-keyword">in</span>\n         ((hmrEpic)[@ocaml.doc\n                     <span class="hljs-string">"\\n     * this is safe ONLY WHEN epics are stateless\\n     * given RxJs nature, it\'s easy to introduce implicit states into epics\\n     * when using anything utilizing BehaviourSubject/ReplaySubject/shareReplay etc.\\n     * be VERY CAREFUL with it as it can lead to unpredictable states when hot reloaded\\n     "</span>])\n           |&gt; (<span class="hljs-type">Rx</span>.<span class="hljs-type">BehaviorSubject</span>.next hotReloadedRootEpic);\n         <span class="hljs-type">Js</span>.log <span class="hljs-string">"[HMR] (Store) ReductiveObservable epics hot reloaded"</span>)</code></pre>\n      </div>\n    </div>\n  \n',homepageUrl:"https://github.com/ambientlight/reductive-observable#readme",repositoryUrl:"https://github.com/ambientlight/reductive-observable",npmUrl:"https://www.npmjs.com/package/reductive-observable",issuesUrl:"https://github.com/ambientlight/reductive-observable/issues",slug:"/package/reductive-observable"}},pathContext:{id:"reductive-observable"}}}});
//# sourceMappingURL=path---package-reductive-observable-4c3fb9a34819c85e5dbf.js.map