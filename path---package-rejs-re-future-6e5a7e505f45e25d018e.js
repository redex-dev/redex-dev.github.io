webpackJsonp([82043089047356],{1401:function(s,e){s.exports={data:{package:{type:"published",id:"@rejs/re-future",name:"@rejs/re-future",version:"0.2.2",category:"library",flags:[],platforms:["browser","node"],description:"Future and ResultFuture library for ReasonML",keywords:["async"],license:"MIT",updated:"2020-02-02T23:10:05.420Z",stars:0,score:.5005405971716932,quality:.8785399760818681,popularity:.013697755520470643,maintenance:.6633839711856232,readme:'<h1 id="re-future"><a href="#re-future" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>re-future</h1>\n<p><a href="https://www.npmjs.com/package/@rejs/re-future"><img src="https://img.shields.io/npm/v/@rejs/re-future.svg" alt="npm version"></a>\n<a href="https://travis-ci.org/seprich/re-future"><img src="https://travis-ci.org/seprich/re-future.svg?branch=master" alt="Build Status"></a>\n<a href="https://coveralls.io/github/seprich/re-future?branch=master"><img src="https://coveralls.io/repos/github/seprich/re-future/badge.svg?branch=master" alt="Coverage Status"></a>\n<a href="https://snyk.io/test/github/seprich/re-future"><img src="https://snyk.io/test/github/seprich/re-future/badge.svg" alt="Known Vulnerabilities"></a></p>\n<p>ReasonML library to provide Future and ResultFuture monads as an alternative to Js.Promise.</p>\n<p>Special focus has been given to provide complete and yet compact set of utility functions to work with both Future and ResultFuture entities. Besides test coverage this library also contains a very basic memory performance test to ensure that memory gets freed (garbage collected) when Future has used the binded functions and evaluation is done.</p>\n<h3 id="install"><a href="#install" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Install</h3>\n<div class="redex-codeblock"><pre class="hljs lang-bash"><code>npm install @rejs/re-future</code></pre></div>\n<p>Edit to <code>bsconfig.json</code>:</p>\n<div class="redex-codeblock"><pre class="hljs lang-none"><code><span class="hljs-string">"bs-dependencies"</span>: [..., <span class="hljs-string">"@rejs/re-future"</span>, ...],</code></pre></div>\n<h3 id="future--reasonfuture"><a href="#future--reasonfuture" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Future &#x26; ReasonFuture</h3>\n<p>This library contains two modules <code>Future</code> and <code>ResultFuture</code>. The <code>Future</code> is the most simple unit of evaluable value which presumably resolves at some point in the future. <code>ResultFuture</code> is a future that eventually contains <code>Belt.Result.t</code> result inside. This is the most useful replacement for Js.Promise because Js.Promise also contains the possibility of resolving to Ok value or rejection to Error value.</p>\n<p>This library is namespaced; to simplify access do:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">ResultFuture</span> = <span class="hljs-title">RejsReFuture</span>.<span class="hljs-title">ResultFuture</span>;</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">module</span> <span class="hljs-type">ResultFuture</span> = <span class="hljs-type">RejsReFuture</span>.<span class="hljs-type">ResultFuture</span></code></pre>\n      </div>\n    </div>\n  \n<p>or if you need both at the same time:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>open <span class="hljs-type">RejsReFuture</span>;</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">open</span> <span class="hljs-type">RejsReFuture</span></code></pre>\n      </div>\n    </div>\n  \n<h2 id="module-future"><a href="#module-future" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Module <code>Future</code></h2>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">type</span> t(\'a);  <span class="hljs-comment">// Future.t(\'a) evaluates to type \'a value in future.</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2553</span>: &lt;<span class="hljs-type">UNKNOWN</span> <span class="hljs-type">SYNTAX</span> <span class="hljs-type">ERROR</span>&gt;</code></pre>\n      </div>\n    </div>\n  \n<h4 id="creating"><a href="#creating" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating:</h4>\n<ul>\n<li>\n<p><code>make</code> - Create a Future with callback e.g.:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-comment">/* Resolves to "value" after 1 second: */</span>\n<span class="hljs-keyword">let</span> future = <span class="hljs-type">Future</span>.make(setter =&gt; <span class="hljs-type">Js</span>.<span class="hljs-type">Global</span>.setTimeout(() =&gt; setter(<span class="hljs-string">"value"</span>), <span class="hljs-number">1000</span>) |&gt; ignore);</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> future =\n  <span class="hljs-type">Future</span>.make\n    (<span class="hljs-keyword">fun</span> setter  -&gt;\n       (<span class="hljs-type">Js</span>.<span class="hljs-type">Global</span>.setTimeout (<span class="hljs-keyword">fun</span> <span class="hljs-literal">()</span>  -&gt; setter <span class="hljs-string">"value"</span>) <span class="hljs-number">1000</span>) |&gt; ignore)</code></pre>\n      </div>\n    </div>\n  \n</li>\n<li>\n<p><code>fromValue</code> - Directly e.g.:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> future = <span class="hljs-type">Future</span>.fromValue(<span class="hljs-string">"example"</span>);   <span class="hljs-comment">/* simple, evaluates on creation. */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> future = <span class="hljs-type">Future</span>.fromValue <span class="hljs-string">"example"</span></code></pre>\n      </div>\n    </div>\n  \n</li>\n</ul>\n<h4 id="conversions"><a href="#conversions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Conversions:</h4>\n<ul>\n<li>\n<p><code>toPromise</code> - To promise - resulted promise is always success:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-type">Future</span>.fromValue(<span class="hljs-number">42</span>) |&gt; <span class="hljs-type">Future</span>.toPromise |&gt; <span class="hljs-type">Js</span>.<span class="hljs-type">Promise</span>.then_(value =&gt; { <span class="hljs-type">Js</span>.log(value); <span class="hljs-type">Js</span>.<span class="hljs-type">Promise</span>.resolve(()) }) |&gt; ignore;</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> _ =\n  (((<span class="hljs-type">Future</span>.fromValue <span class="hljs-number">42</span>) |&gt; <span class="hljs-type">Future</span>.toPromise) |&gt;\n     (<span class="hljs-type">Js</span>.<span class="hljs-type">Promise</span>.then_ (<span class="hljs-keyword">fun</span> <span class="hljs-keyword">value</span>  -&gt; <span class="hljs-type">Js</span>.log <span class="hljs-keyword">value</span>; <span class="hljs-type">Js</span>.<span class="hljs-type">Promise</span>.resolve <span class="hljs-literal">()</span>)))\n    |&gt; ignore</code></pre>\n      </div>\n    </div>\n  \n</li>\n</ul>\n<h4 id="effect-functions-do-not-affect-the-value-of-the-future"><a href="#effect-functions-do-not-affect-the-value-of-the-future" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Effect functions do not affect the value of the future</h4>\n<ul>\n<li>\n<p><code>effect</code> - Simple side effect function such as logging e.g.</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> future: <span class="hljs-type">Future</span>.t(string) = <span class="hljs-comment">/* ... implementation */</span>\nfuture                                      <span class="hljs-comment">/* e.g. evaluates to "test" */</span>\n-&gt; <span class="hljs-type">Future</span>.effect(value =&gt; <span class="hljs-type">Js</span>.log(value))    <span class="hljs-comment">/* does not affect value */</span>\n-&gt; <span class="hljs-type">Future</span>...                                <span class="hljs-comment">/* still evaluates to "test" */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">967</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n</li>\n<li>\n<p><code>waitEffect</code> - Async side effect which must be waited upon before continuing e.g.</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> longProcess: string =&gt; <span class="hljs-type">Future</span>.t(unit) = <span class="hljs-comment">/* ... implementation */</span>\nfuture                                      <span class="hljs-comment">/* e.g. evaluates to "test" */</span>\n-&gt; <span class="hljs-type">Future</span>.waitEffect(value =&gt; longProcess(value))\n-&gt; <span class="hljs-type">Future</span>...                                <span class="hljs-comment">/* still evaluates to "test" */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">967</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n</li>\n<li>\n<p><code>get</code> - Operate with final results e.g.</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>future\n-&gt; <span class="hljs-type">Future</span>.<span class="hljs-keyword">get</span>(value =&gt; <span class="hljs-type">Js</span>.log(value));      <span class="hljs-comment">/* Final operation */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2310</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n</li>\n</ul>\n<h4 id="functors"><a href="#functors" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Functors</h4>\n<ul>\n<li>\n<p><code>flatMap</code> bind a function that returns a Future into Future:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> processing: string =&gt; <span class="hljs-type">Future</span>.t(string) = <span class="hljs-comment">/* ... implementation */</span>\nfuture\n-&gt; <span class="hljs-type">Future</span>.flatMap(processing)\n-&gt; <span class="hljs-type">Future</span>...  <span class="hljs-comment">/* value is now whatever was created by `processing` from the initial value */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">967</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n</li>\n<li>\n<p><code>map</code> e.g.:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>future.fromValue(<span class="hljs-string">"Simple Example"</span>)\n-&gt; <span class="hljs-type">Future</span>.<span class="hljs-built_in">map</span>(<span class="hljs-type">Js</span>.<span class="hljs-type">String</span>.toUpperCase)\n-&gt; <span class="hljs-type">Future</span>.<span class="hljs-keyword">get</span>(<span class="hljs-type">Js</span>.log)               <span class="hljs-comment">/* -&gt; "simple example" */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2310</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n</li>\n</ul>\n<h4 id="combining-futures"><a href="#combining-futures" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Combining Futures</h4>\n<ul>\n<li>\n<p><code>all</code> - List of Futures to Future of List:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-type">Future</span>.all([future1, future2, future3])\n-&gt; <span class="hljs-type">Future</span>.<span class="hljs-keyword">get</span>([value1, value2, value3] =&gt; <span class="hljs-comment">/* ... values evaluated from the list of futures */</span>);</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2310</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n</li>\n<li>\n<p><code>combine2</code> ... <code>combine8</code> - Combine heterogenously typed futures into a Future containing a tuple of values.</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-type">Future</span>.combine2((future1, future2))\n-&gt; <span class="hljs-type">Future</span>.<span class="hljs-keyword">get</span>((value1, value2) =&gt; <span class="hljs-comment">/* different kind of values from each future */</span>)</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2310</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n</li>\n</ul>\n<h2 id="module-resultfuture"><a href="#module-resultfuture" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Module <code>ResultFuture</code></h2>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">type</span> gt(\'a, \'e);          <span class="hljs-comment">// Generic type of ResultFuture, where \'a is ok value type and \'e error value type</span>\n<span class="hljs-keyword">type</span> t(\'a) = gt(\'a, exn); <span class="hljs-comment">// ResultFuture.t where error type is exn (recommended for typical usage)</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2553</span>: &lt;<span class="hljs-type">UNKNOWN</span> <span class="hljs-type">SYNTAX</span> <span class="hljs-type">ERROR</span>&gt;</code></pre>\n      </div>\n    </div>\n  \n<p>Most of the functions in the module <code>ResultFuture</code> are typed with the <code>gt</code> type in order to allow maximal flexibility. However\nit is recommended that when using this lib the type <code>t</code> would be preferred.</p>\n<h4 id="creating-1"><a href="#creating-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating</h4>\n<ul>\n<li>\n<p><code>make</code> - Using callbacks:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> resultFuture = <span class="hljs-type">ResultFuture</span>.make((_resolve, reject) =&gt; {\n  <span class="hljs-type">Js</span>.<span class="hljs-type">Global</span>.setTimeout(() =&gt; reject(<span class="hljs-type">Failure</span>(<span class="hljs-string">"oh noes"</span>)), <span class="hljs-number">1000</span>);\n});  <span class="hljs-comment">/* A ResultFuture which resolves into error after 1 second */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> resultFuture =\n  <span class="hljs-type">ResultFuture</span>.make\n    (<span class="hljs-keyword">fun</span> _resolve  -&gt;\n       <span class="hljs-keyword">fun</span> reject  -&gt;\n         <span class="hljs-type">Js</span>.<span class="hljs-type">Global</span>.setTimeout\n           (<span class="hljs-keyword">fun</span> <span class="hljs-literal">()</span>  -&gt; reject ((<span class="hljs-type">Failure</span> (<span class="hljs-string">"oh noes"</span>))[@explicit_arity ])) <span class="hljs-number">1000</span>)</code></pre>\n      </div>\n    </div>\n  \n</li>\n<li>\n<p><code>fromValue</code>:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-type">ResultFuture</span>.fromValue(<span class="hljs-number">42</span>)\n-&gt; <span class="hljs-type">ResultFuture</span>.getOk(<span class="hljs-type">Js</span>.log)  <span class="hljs-comment">/* "42" */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2310</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n</li>\n<li>\n<p><code>fromError</code>:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-type">ResultFuture</span>.fromError(<span class="hljs-type">Failure</span>(<span class="hljs-string">"again"</span>))\n-&gt; <span class="hljs-type">ResultFuture</span>.getError(<span class="hljs-type">Js</span>.log)  <span class="hljs-comment">/* outputs error to the console */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2310</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n</li>\n<li>\n<p><code>fromResult</code>:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-type">ResultFuture</span>.fromResult(<span class="hljs-type">Belt</span>.<span class="hljs-type">Result</span>.<span class="hljs-type">Ok</span>(<span class="hljs-string">"check"</span>))\n-&gt; <span class="hljs-type">ResultFuture</span>.getOk(<span class="hljs-type">Js</span>.log)  <span class="hljs-comment">/* "check" */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2310</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n</li>\n</ul>\n<h4 id="conversions-1"><a href="#conversions-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Conversions</h4>\n<ul>\n<li>\n<p><code>fromJsPromiseDefault</code>:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> promise = <span class="hljs-type">Js</span>.<span class="hljs-type">Promise</span>.resolve(<span class="hljs-string">"quick and dirty"</span>);\npromise\n-&gt; <span class="hljs-type">ResultFuture</span>.fromJsPromiseDefault\n-&gt; <span class="hljs-type">ResultFuture</span>.getOk(<span class="hljs-type">Js</span>.log)  <span class="hljs-comment">/* "quick and dirty" */</span>\n\n<span class="hljs-keyword">let</span> promiseErr = <span class="hljs-type">Js</span>.<span class="hljs-type">Promise</span>.reject(<span class="hljs-type">Failure</span>(<span class="hljs-string">"oh no"</span>))\npromiseErr\n-&gt; <span class="hljs-type">ResultFuture</span>.fromJsPromiseDefault\n-&gt; <span class="hljs-type">ResultFuture</span>.getError(<span class="hljs-type">Js</span>.log)</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2310</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n</li>\n<li>\n<p><code>toJsPromiseDefault</code>:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code>future\n-&gt; <span class="hljs-type">ResultFuture</span>.toJsPromiseDefault\n-&gt; <span class="hljs-type">Js</span>.<span class="hljs-type">Promise</span>.then_(value =&gt; <span class="hljs-comment">/* do things */</span>)</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">2310</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n</li>\n<li>\n<p><code>fromFutureResult: Future.t(Belt.Result.t(\'a, \'e)) => ResultFuture.gt(\'a, \'e)</code></p>\n</li>\n<li>\n<p><code>toFutureResult: ResultFuture.gt(\'a, \'e) => Future.t(Belt.Result.t(\'a, \'e))</code></p>\n</li>\n</ul>\n<h4 id="effect-functions-do-not-affect-the-value"><a href="#effect-functions-do-not-affect-the-value" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Effect functions do not affect the value</h4>\n<ul>\n<li><code>effectOk</code>, <code>effectError</code>, <code>effectResult</code> - execute simple side effect function. Similar to <code>Future.effect</code>.\nSee <code>src/ResultFuture.rei</code> for signatures and unit tests for usage examples.</li>\n<li><code>waitEffectOk</code>, <code>waitEffectError</code>, <code>waitEffectResult</code> - Similar to <code>Future.waitEffect</code>.\nSee <code>src/ResultFuture.rei</code> for signatures and unit tests for usage examples.</li>\n<li><code>getOk</code></li>\n<li><code>getError</code></li>\n<li><code>getResult</code></li>\n</ul>\n<h4 id="functors-1"><a href="#functors-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Functors</h4>\n<ul>\n<li><code>flatMapOk</code></li>\n<li><code>flatMapError</code></li>\n<li><code>flatMapResult</code></li>\n<li><code>mapOk</code></li>\n<li><code>mapError</code></li>\n<li><code>mapOkResult</code></li>\n<li><code>mapErrorResult</code></li>\n<li><code>mapResult</code></li>\n</ul>\n<h4 id="combining-resultfutures"><a href="#combining-resultfutures" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Combining ResultFutures</h4>\n<ul>\n<li><code>allOk</code></li>\n<li><code>allToFuture</code></li>\n<li><code>combineOk2</code> ... <code>combineOk8</code></li>\n<li><code>mapResult2</code> ... <code>mapResult8</code></li>\n</ul>\n',
homepageUrl:"https://github.com/seprich/re-future#readme",repositoryUrl:"https://github.com/seprich/re-future",npmUrl:"https://www.npmjs.com/package/%40rejs%2Fre-future",issuesUrl:"https://github.com/seprich/re-future/issues",slug:"/package/@rejs/re-future"}},pathContext:{id:"@rejs/re-future"}}}});
//# sourceMappingURL=path---package-rejs-re-future-6e5a7e505f45e25d018e.js.map