webpackJsonp([0x82727e649dd5],{1347:function(s,n){s.exports={data:{package:{type:"published",id:"@lxsmnsyc/re-scoped-model",name:"@lxsmnsyc/re-scoped-model",version:"1.1.1",category:"library",flags:[],platforms:["browser"],description:"Scoped Model pattern in ReasonReact (but with Hooks)",keywords:["state management","react"],license:"MIT",updated:"2020-09-27T06:01:52.833Z",stars:18,score:.6194660536529624,quality:.8473831524325958,popularity:.04357459406623896,maintenance:1,readme:'<h1 id="lxsmnsycre-scoped-model"><a href="#lxsmnsycre-scoped-model" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>@lxsmnsyc/re-scoped-model</h1>\n<blockquote>\n<p>Scoped Model pattern in React (but with Hooks), a pure ReasonML implementation of <a href="https://github.com/LXSMNSYC/react-scoped-model">react-scoped-model</a></p>\n</blockquote>\n<p><a href="https://www.npmjs.com/package/@lxsmnsyc/re-scoped-model"><img src="https://img.shields.io/npm/v/@lxsmnsyc/re-scoped-model.svg" alt="NPM"></a> <a href="https://github.com/airbnb/javascript"><img src="https://badgen.net/badge/code%20style/airbnb/ff5a5f?icon=airbnb" alt="JavaScript Style Guide"></a></p>\n<h2 id="install"><a href="#install" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Install</h2>\n<div class="redex-codeblock"><pre class="hljs lang-bash"><code>npm install --save @lxsmnsyc/re-scoped-model</code></pre></div>\n<div class="redex-codeblock"><pre class="hljs lang-bash"><code>yarn add @lxsmnsyc/re-scoped-model</code></pre></div>\n<h3 id="bsconfigjson"><a href="#bsconfigjson" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>bsconfig.json</h3>\n<div class="redex-codeblock"><pre class="hljs lang-json"><code>  <span class="hljs-string">"bs-dependencies"</span>: [\n    <span class="hljs-string">"@lxsmnsyc/re-scoped-model"</span>\n  ],</code></pre></div>\n<h2 id="usage"><a href="#usage" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>\n<h3 id="creating-a-model"><a href="#creating-a-model" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating a model</h3>\n<p>Models are created by using a hook function that is always called whenever its Provider renders, and must return an object that represents the models\' state:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">Counter</span> = </span>{\n  <span class="hljs-keyword">type</span> props = int;\n\n  <span class="hljs-keyword">type</span> t = {\n    decrement: unit =&gt; unit,\n    increment: unit =&gt; unit,\n    <span class="hljs-built_in">count</span>: int,\n  };\n\n  <span class="hljs-keyword">let</span> call = (props) =&gt; {\n    <span class="hljs-keyword">let</span> (<span class="hljs-built_in">count</span>, setCount) = <span class="hljs-type">React</span>.useState(() =&gt; props);\n\n    <span class="hljs-keyword">let</span> decrement = <span class="hljs-type">React</span>.useCallback0(() =&gt; {\n      setCount((current) =&gt; current - <span class="hljs-number">1</span>);\n    });\n    <span class="hljs-keyword">let</span> increment = <span class="hljs-type">React</span>.useCallback0(() =&gt; {\n      setCount((current) =&gt; current + <span class="hljs-number">1</span>);\n    });\n\n    {\n      <span class="hljs-built_in">count</span>,\n      decrement,\n      increment,\n    };\n  };\n\n  <span class="hljs-keyword">let</span> displayName = <span class="hljs-string">"Counter"</span>;\n\n  <span class="hljs-keyword">let</span> shouldUpdate = (prev, next) =&gt; {\n    prev == next;\n  };\n};\n\n<span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">CounterModel</span> = <span class="hljs-title">ScopedModel</span>.<span class="hljs-title">Make</span>(<span class="hljs-title">Counter</span>);</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">module</span> <span class="hljs-type">Counter</span> =\n  <span class="hljs-keyword">struct</span>\n    <span class="hljs-keyword">type</span> props = <span class="hljs-built_in">int</span>\n    <span class="hljs-keyword">type</span> t = {\n      decrement: <span class="hljs-built_in">unit</span> -&gt; <span class="hljs-built_in">unit</span>;\n      increment: <span class="hljs-built_in">unit</span> -&gt; <span class="hljs-built_in">unit</span>;\n      count: <span class="hljs-built_in">int</span>;}\n    <span class="hljs-keyword">let</span> call props =\n      <span class="hljs-keyword">let</span> (count,setCount) = <span class="hljs-type">React</span>.useState (<span class="hljs-keyword">fun</span> <span class="hljs-literal">()</span>  -&gt; props) <span class="hljs-keyword">in</span>\n      <span class="hljs-keyword">let</span> decrement =\n        <span class="hljs-type">React</span>.useCallback0\n          (<span class="hljs-keyword">fun</span> <span class="hljs-literal">()</span>  -&gt; setCount (<span class="hljs-keyword">fun</span> current  -&gt; current - <span class="hljs-number">1</span>)) <span class="hljs-keyword">in</span>\n      <span class="hljs-keyword">let</span> increment =\n        <span class="hljs-type">React</span>.useCallback0\n          (<span class="hljs-keyword">fun</span> <span class="hljs-literal">()</span>  -&gt; setCount (<span class="hljs-keyword">fun</span> current  -&gt; current + <span class="hljs-number">1</span>)) <span class="hljs-keyword">in</span>\n      { count; decrement; increment }\n    <span class="hljs-keyword">let</span> displayName = <span class="hljs-string">"Counter"</span>\n    <span class="hljs-keyword">let</span> shouldUpdate prev next = prev = next\n  <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">module</span> <span class="hljs-type">CounterModel</span> = <span class="hljs-type">ScopedModel</span>.<span class="hljs-type">Make</span>(<span class="hljs-type">Counter</span>)</code></pre>\n      </div>\n    </div>\n  \n<h3 id="adding-to-your-component-tree"><a href="#adding-to-your-component-tree" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Adding to your component tree</h3>\n<p>To add the Model to your component tree, simply use the <code>Provider</code> component property:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">App</span> </span>{\n  [@react.component]\n  <span class="hljs-keyword">let</span> make = () =&gt; {\n    &lt;<span class="hljs-type">CounterModel</span>.<span class="hljs-type">Provider</span> props=<span class="hljs-number">0</span>&gt;\n      &lt;<span class="hljs-type">CounterModel</span>.<span class="hljs-type">Provider</span> props=<span class="hljs-number">100</span>&gt;\n        &lt;<span class="hljs-type">Count</span> /&gt;\n        &lt;<span class="hljs-type">Increment</span> /&gt;\n        &lt;<span class="hljs-type">Decrement</span> /&gt;\n      &lt;/<span class="hljs-type">CounterModel</span>.<span class="hljs-type">Provider</span>&gt;\n        &lt;<span class="hljs-type">Count</span> /&gt;\n        &lt;<span class="hljs-type">Increment</span> /&gt;\n        &lt;<span class="hljs-type">Decrement</span> /&gt;\n    &lt;/<span class="hljs-type">CounterModel</span>.<span class="hljs-type">Provider</span>&gt;\n  };\n}</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">module</span> <span class="hljs-type">App</span> =\n  <span class="hljs-keyword">struct</span>\n    <span class="hljs-keyword">let</span> make <span class="hljs-literal">()</span> =\n      ((<span class="hljs-type">CounterModel</span>.<span class="hljs-type">Provider</span>.createElement ~props:<span class="hljs-number">0</span>\n          ~children:[((<span class="hljs-type">CounterModel</span>.<span class="hljs-type">Provider</span>.createElement ~props:<span class="hljs-number">100</span>\n                         ~children:[((<span class="hljs-type">Count</span>.createElement ~children:<span class="hljs-literal">[]</span> <span class="hljs-literal">()</span>)\n                                   [@<span class="hljs-type">JSX</span> ]);\n                                   ((<span class="hljs-type">Increment</span>.createElement ~children:<span class="hljs-literal">[]</span> <span class="hljs-literal">()</span>)\n                                   [@<span class="hljs-type">JSX</span> ]);\n                                   ((<span class="hljs-type">Decrement</span>.createElement ~children:<span class="hljs-literal">[]</span> <span class="hljs-literal">()</span>)\n                                   [@<span class="hljs-type">JSX</span> ])] <span class="hljs-literal">()</span>)[@<span class="hljs-type">JSX</span> ]);\n                    ((<span class="hljs-type">Count</span>.createElement ~children:<span class="hljs-literal">[]</span> <span class="hljs-literal">()</span>)[@<span class="hljs-type">JSX</span> ]);\n                    ((<span class="hljs-type">Increment</span>.createElement ~children:<span class="hljs-literal">[]</span> <span class="hljs-literal">()</span>)[@<span class="hljs-type">JSX</span> ]);\n                    ((<span class="hljs-type">Decrement</span>.createElement ~children:<span class="hljs-literal">[]</span> <span class="hljs-literal">()</span>)[@<span class="hljs-type">JSX</span> ])] <span class="hljs-literal">()</span>)\n      [@<span class="hljs-type">JSX</span> ])[@@react.component ]\n  <span class="hljs-keyword">end</span></code></pre>\n      </div>\n    </div>\n  \n<h3 id="useselector-hook"><a href="#useselector-hook" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>useSelector Hook</h3>\n<p>To access our model\'s state, we can use the <code>useSelector</code> hook which accepts the model\'s reference and a  function that receives the current model state, and returns a new value that is derived from the given state. This allows fine-grained and reasonable re-render for the listening component, as the component will only re-render if the transformed value changes every time the model updates. A third optional argument can be provided which accepts a function that compares the previously transformed state from the previous render and the newly transformed state.</p>\n<p>For example, in our <code>Count</code> component, we only <code>select</code> the <code>count</code> field of our model record.</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">Count</span> </span>{\n  [@react.component]\n  <span class="hljs-keyword">let</span> make = () =&gt; {\n    <span class="hljs-keyword">let</span> <span class="hljs-built_in">count</span> = <span class="hljs-type">ScopedModel</span>.useSelector(<span class="hljs-type">Counter</span>, state =&gt; state.<span class="hljs-built_in">count</span>, <span class="hljs-type">None</span>);\n\n    <span class="hljs-type">Js</span>.log(<span class="hljs-string">"Count"</span>);\n\n    &lt;p&gt;{ <span class="hljs-type">ReasonReact</span>.string(string_of_int(<span class="hljs-built_in">count</span>)) }&lt;/p&gt;;\n  }\n}</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">module</span> <span class="hljs-type">Count</span> =\n  <span class="hljs-keyword">struct</span>\n    <span class="hljs-keyword">let</span> make <span class="hljs-literal">()</span> =\n      <span class="hljs-keyword">let</span> count =\n        <span class="hljs-type">ScopedModel</span>.useSelector <span class="hljs-type">Counter</span> (<span class="hljs-keyword">fun</span> state  -&gt; state.count) <span class="hljs-type">None</span> <span class="hljs-keyword">in</span>\n      <span class="hljs-type">Js</span>.log <span class="hljs-string">"Count"</span>;\n      ((p ~children:[<span class="hljs-type">ReasonReact</span>.<span class="hljs-built_in">string</span> (string_of_int count)] <span class="hljs-literal">()</span>)[@<span class="hljs-type">JSX</span> ])\n      [@@react.component ]\n  <span class="hljs-keyword">end</span></code></pre>\n      </div>\n    </div>\n  \n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">Increment</span> </span>{\n  [@react.component]\n  <span class="hljs-keyword">let</span> make = () =&gt; {\n    <span class="hljs-keyword">let</span> increment = <span class="hljs-type">ScopedModel</span>.useSelector(<span class="hljs-type">Counter</span>, state =&gt; state.increment, <span class="hljs-type">None</span>);\n\n    <span class="hljs-type">Js</span>.log(<span class="hljs-string">"Increment"</span>);\n\n    &lt;button onClick={<span class="hljs-number">_</span> =&gt; increment()}&gt;\n      { <span class="hljs-type">ReasonReact</span>.string(<span class="hljs-string">"Increment"</span>) }\n    &lt;/button&gt;;\n  }\n}</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">3731</span>: &lt;<span class="hljs-type">UNKNOWN</span> <span class="hljs-type">SYNTAX</span> <span class="hljs-type">ERROR</span>&gt;</code></pre>\n      </div>\n    </div>\n  \n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">Decrement</span> </span>{\n  [@react.component]\n  <span class="hljs-keyword">let</span> make = () =&gt; {\n    <span class="hljs-keyword">let</span> decrement = <span class="hljs-type">ScopedModel</span>.useSelector(<span class="hljs-type">Counter</span>, state =&gt; state.decrement, <span class="hljs-type">None</span>);\n\n    <span class="hljs-type">Js</span>.log(<span class="hljs-string">"Decrement"</span>);\n\n    &lt;button onClick={<span class="hljs-number">_</span> =&gt; decrement()}&gt;\n      { <span class="hljs-type">ReasonReact</span>.string(<span class="hljs-string">"Decrement"</span>) }\n    &lt;/button&gt;;\n  }\n}</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">3731</span>: &lt;<span class="hljs-type">UNKNOWN</span> <span class="hljs-type">SYNTAX</span> <span class="hljs-type">ERROR</span>&gt;</code></pre>\n      </div>\n    </div>\n  \n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">IncDec</span> </span>{\n  [@react.component]\n  <span class="hljs-keyword">let</span> make = () =&gt; {\n    <span class="hljs-keyword">let</span> (increment, decrement) = <span class="hljs-type">Counter</span>.useSelector(state =&gt; (\n      state.increment,\n      state.decrement,\n    ), <span class="hljs-literal">true</span>);\n\n    <span class="hljs-type">Js</span>.log(<span class="hljs-string">"IncDec"</span>);\n\n    &lt;<span class="hljs-type">React</span>.<span class="hljs-type">Fragment</span>&gt;\n      &lt;button onClick={<span class="hljs-number">_</span> =&gt; increment()}&gt;\n        { <span class="hljs-type">ReasonReact</span>.string(<span class="hljs-string">"Increment"</span>) }\n      &lt;/button&gt;\n      &lt;button onClick={<span class="hljs-number">_</span> =&gt; decrement()}&gt;\n        { <span class="hljs-type">ReasonReact</span>.string(<span class="hljs-string">"Decrement"</span>) }\n      &lt;/button&gt;\n    &lt;/<span class="hljs-type">React</span>.<span class="hljs-type">Fragment</span>&gt;\n  };\n}</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">3731</span>: &lt;<span class="hljs-type">UNKNOWN</span> <span class="hljs-type">SYNTAX</span> <span class="hljs-type">ERROR</span>&gt;</code></pre>\n      </div>\n    </div>\n  \n<h3 id="other-hooks"><a href="#other-hooks" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Other hooks</h3>\n<p>There are 3 other hooks:</p>\n<ul>\n<li><code>useValue</code>: Consumes the model\'s current state and updates when the model\'s state updates.</li>\n<li><code>useValueOnce</code>: Consumes the model\'s current state once.</li>\n<li><code>useSelectorOnce</code>: Similar to <code>useSelector</code>, consumes and transforms the model\'s current state once.</li>\n</ul>\n<h2 id="hook-factories"><a href="#hook-factories" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hook Factories</h2>\n<p>There are 4 built-in functions that are higher-order hooks. These functions are beneficial for stabilizing functional references (e.g. selector functions) to prevent recomputation of internal side effects.</p>\n<ul>\n<li><code>createValue</code></li>\n<li><code>createValueOnce</code></li>\n<li><code>createSelector</code></li>\n<li><code>createSelectorOnce</code></li>\n</ul>\n<h2 id="model-factories"><a href="#model-factories" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Model Factories</h2>\n<ul>\n<li><code>MakeNullary</code> - a model with unit props, stabilizing the model from further recomputation whenever the <code>Provider</code> updates props or children.</li>\n<li><code>MakeState</code> - a kind of nullary model whose state is that of the <code>React.useState</code>.</li>\n</ul>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">Count</span> = <span class="hljs-title">MakeState</span>(</span>{\n  <span class="hljs-keyword">type</span> state = int;\n\n  <span class="hljs-keyword">let</span> initialState = () =&gt; <span class="hljs-number">0</span>;\n\n  <span class="hljs-keyword">let</span> displayName = <span class="hljs-string">"Count"</span>;\n});</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">module</span> <span class="hljs-type">Count</span> =\n  <span class="hljs-type">MakeState</span>(<span class="hljs-keyword">struct</span>\n              <span class="hljs-keyword">type</span> state = <span class="hljs-built_in">int</span>\n              <span class="hljs-keyword">let</span> initialState <span class="hljs-literal">()</span> = <span class="hljs-number">0</span>\n              <span class="hljs-keyword">let</span> displayName = <span class="hljs-string">"Count"</span>\n            <span class="hljs-keyword">end</span>)</code></pre>\n      </div>\n    </div>\n  \n<ul>\n<li><code>MakeReducer</code> - a kind of nullary model whose state is that of the <code>React.useReducer</code>.</li>\n</ul>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">Count</span> = <span class="hljs-title">MakeReducer</span>(</span>{\n  <span class="hljs-keyword">type</span> state = int;\n  \n  <span class="hljs-keyword">type</span> action = \n    | <span class="hljs-type">Increment</span>\n    | <span class="hljs-type">Decrement</span>;\n\n  <span class="hljs-keyword">let</span> initialState = () =&gt; <span class="hljs-number">0</span>;\n\n  <span class="hljs-keyword">let</span> reducer = (state, action) =&gt; {\n    <span class="hljs-keyword">switch</span> (action) {\n      | <span class="hljs-type">Increment</span> =&gt; state + <span class="hljs-number">1</span>;\n      | <span class="hljs-type">Decrement</span> =&gt; state - <span class="hljs-number">1</span>;\n    }\n  };\n\n  <span class="hljs-keyword">let</span> displayName = <span class="hljs-string">"Count"</span>;\n});</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">module</span> <span class="hljs-type">Count</span> =\n  <span class="hljs-type">MakeReducer</span>(<span class="hljs-keyword">struct</span>\n                <span class="hljs-keyword">type</span> state = <span class="hljs-built_in">int</span>\n                <span class="hljs-keyword">type</span> action =\n                  | <span class="hljs-type">Increment</span>\n                  | <span class="hljs-type">Decrement</span>\n                <span class="hljs-keyword">let</span> initialState <span class="hljs-literal">()</span> = <span class="hljs-number">0</span>\n                <span class="hljs-keyword">let</span> reducer state action =\n                  <span class="hljs-keyword">match</span> action <span class="hljs-keyword">with</span>\n                  | <span class="hljs-type">Increment</span>  -&gt; state + <span class="hljs-number">1</span>\n                  | <span class="hljs-type">Decrement</span>  -&gt; state - <span class="hljs-number">1</span>\n                <span class="hljs-keyword">let</span> displayName = <span class="hljs-string">"Count"</span>\n              <span class="hljs-keyword">end</span>)</code></pre>\n      </div>\n    </div>\n  \n<ul>\n<li><code>MakePropSelector</code>- a kind of model whose props and state are the same.</li>\n</ul>\n<h2 id="license"><a href="#license" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>License</h2>\n<p>MIT © <a href="https://github.com/lxsmnsyc">lxsmnsyc</a></p>\n',homepageUrl:"https://github.com/lxsmnsyc/scoped-model",repositoryUrl:"https://github.com/lxsmnsyc/scoped-model",npmUrl:"https://www.npmjs.com/package/%40lxsmnsyc%2Fre-scoped-model",issuesUrl:"https://github.com/LXSMNSYC/scoped-model/issues",slug:"/package/@lxsmnsyc/re-scoped-model"}},pathContext:{id:"@lxsmnsyc/re-scoped-model"}}}});
//# sourceMappingURL=path---package-lxsmnsyc-re-scoped-model-45b1fea6ca439accca01.js.map