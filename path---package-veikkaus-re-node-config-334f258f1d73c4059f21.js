webpackJsonp([0xe64788138d44],{1480:function(s,n){s.exports={data:{package:{type:"published",id:"@veikkaus/re-node-config",name:"@veikkaus/re-node-config",version:"0.3.0",category:"library",flags:[],platforms:["node"],description:"Node dependent reasonml config library",keywords:["configuration"],license:"MIT",updated:"2020-01-18T15:53:07.166Z",stars:0,score:.6004377977591738,quality:.8091660304137521,popularity:.025849013219571275,maintenance:.9961166685948522,readme:'<h1 id="renodeconfig"><a href="#renodeconfig" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ReNodeConfig</h1>\n<p><a href="https://www.npmjs.com/package/@veikkaus/re-node-config"><img src="https://img.shields.io/npm/v/@veikkaus/re-node-config.svg" alt="npm version"></a>\n<a href="https://snyk.io/test/github/veikkaus/re-node-config"><img src="https://snyk.io/test/github/veikkaus/re-node-config/badge.svg" alt="Known Vulnerabilities"></a></p>\n<p>Config library for nodejs, similar to <a href="https://github.com/lorenwest/node-config">node-config</a> but strongly typed with validated type parsing. No need for Js.Nullable.t shims typical when just binding to js-libs. Configuration data is a JSON Object loaded by a loader function (see below).</p>\n<h1 id="install"><a href="#install" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Install</h1>\n<div class="redex-codeblock"><pre class="hljs lang-none"><code>npm install @veikkaus/re-node-config</code></pre></div>\n<p>And to <code>bsconfig.json</code>: <code>"bs-dependencies": [..., "@veikkaus/re-node-config", ...],</code></p>\n<h1 id="usage-examples"><a href="#usage-examples" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage Examples</h1>\n<p>Assuming You Write file MyConfig.re:</p>\n<div class="redex-codeblock"><pre class="hljs lang-reasonml"><code><span class="hljs-keyword">module</span> <span class="hljs-type">C</span> = <span class="hljs-type">VeikkausReNodeConfig</span>.<span class="hljs-type">Config</span>;\n\n/*\n * loadConfig <span class="hljs-keyword">with</span> default options searches <span class="hljs-keyword">for</span> .json <span class="hljs-keyword">and</span> .yaml files from ./config/\n * (loading may produce an error, therefore using getExn, which will throw <span class="hljs-keyword">if</span> loading had errors)\n */\n<span class="hljs-keyword">let</span> config: <span class="hljs-type">C</span>.t = <span class="hljs-type">C</span>.loadConfig<span class="hljs-literal">()</span> |&gt; <span class="hljs-type">C</span>.getExn;</code></pre></div>\n<p>Usage in other files/modules:</p>\n<div class="redex-codeblock"><pre class="hljs lang-reasonml"><code><span class="hljs-keyword">module</span> <span class="hljs-type">C</span> = <span class="hljs-type">VeikkausReNodeConfig</span>.<span class="hljs-type">Config</span>;\n<span class="hljs-keyword">let</span> config = <span class="hljs-type">MyConfig</span>.config;\n\n<span class="hljs-keyword">let</span> host: <span class="hljs-built_in">string</span> = <span class="hljs-type">C</span>.getString(<span class="hljs-string">"server.host"</span>, config);\n<span class="hljs-keyword">let</span> port: <span class="hljs-built_in">int</span> = <span class="hljs-type">C</span>.getInt(<span class="hljs-string">"server.port"</span>, config);\n\n/* getString is actually a convenience <span class="hljs-keyword">function</span> which combines the following detailed functionality:\n *   getString = (path, config) =&gt; config |&gt; <span class="hljs-type">C</span>.key(<span class="hljs-string">"server.host"</span>) |&gt; <span class="hljs-type">C</span>.parseString |&gt; <span class="hljs-type">C</span>.getExn;\n *   meaning ~ get a <span class="hljs-built_in">string</span> <span class="hljs-keyword">value</span> from the defined configuration path <span class="hljs-keyword">or</span> throw <span class="hljs-keyword">exception</span> <span class="hljs-type">MissingKey</span> <span class="hljs-keyword">or</span>\n *             <span class="hljs-type">TypeMismatch</span>\n */\n\n/* <span class="hljs-type">Parsing</span> lists <span class="hljs-keyword">of</span> values is fairly simple too: */\n<span class="hljs-keyword">let</span> myList: <span class="hljs-built_in">list</span>(<span class="hljs-built_in">string</span>) = config |&gt; <span class="hljs-type">C</span>.key(<span class="hljs-string">"listOfWords"</span>) |&gt; <span class="hljs-type">C</span>.parseList(<span class="hljs-type">C</span>.parseString) |&gt; <span class="hljs-type">C</span>.getExn;\n\n\n/* <span class="hljs-type">Finally</span> providing that you implement a <span class="hljs-keyword">parser</span> from json <span class="hljs-keyword">to</span> your own <span class="hljs-keyword">type</span>: */\n<span class="hljs-keyword">type</span> foo;\n<span class="hljs-keyword">let</span> myJsonToFoo: <span class="hljs-type">Js</span>.<span class="hljs-type">Json</span>.t =&gt; foo;     /* <span class="hljs-type">May</span> throw on parsing errors */\n/* <span class="hljs-keyword">then</span> that can be used <span class="hljs-keyword">to</span> turn complicated <span class="hljs-keyword">object</span> on your config into your custom <span class="hljs-keyword">type</span>: */\n<span class="hljs-keyword">let</span> myFoo: foo = config |&gt; <span class="hljs-type">C</span>.key(<span class="hljs-string">"foo"</span>) |&gt; <span class="hljs-type">C</span>.parseCustom(myJsonToFoo) |&gt; <span class="hljs-type">C</span>.getExn;</code></pre></div>\n<h1 id="config-loading"><a href="#config-loading" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Config loading</h1>\n<p>Function <code>C.loadConfig()</code> searches config values from following sources in following order:\n1. Loads config files from directory defined by <code>NODE_CONFIG_DIR</code> env variable if it exists, or otherwise from directory <code>process.cwd() + "/config/"</code>:\n1. File <code>default.{json,yaml}</code> is loaded if it exists\n2. File <code>${NODE_CONFIG_ENV}.{json,yaml}</code> is loaded if it exists, and if not, then and only then <code>${NODE_ENV}.{json,yaml}</code> is loaded if that exists.\n3. File <code>local.{json,yaml}</code> is loaded if exists.\n2. Loads Environment Variables\n1. Loads <code>CONFIG_JSON</code> contents\n2. Reads file <code>custom-environment-variables.{json,yaml}</code>, which contains ENV variable name override definitions for various config keys (this is identical to: <a href="https://github.com/lorenwest/node-config/wiki/Environment-Variables#custom-environment-variables">node-config</a>), -> loads overrides from the defined env variables that are found.\nJSON parsing is attempted to the values of the env variables, enabling e.g. passing lists inside one env variable: <code>MYVAR=\'["first","second"]\'</code>. If the attempted JSON parsing fails, the value is treated as a simple string e.g. <code>MYVAR2="value2"</code> (= simple string. note that json would need extra quotations: <code>"\\"value2\\""</code>)\n3. Fallback to empty config if nothing from the above exists.</p>\n',homepageUrl:"https://github.com/veikkaus/re-node-config#readme",repositoryUrl:"https://github.com/veikkaus/re-node-config",npmUrl:"https://www.npmjs.com/package/%40veikkaus%2Fre-node-config",issuesUrl:"https://github.com/veikkaus/re-node-config/issues",slug:"/package/@veikkaus/re-node-config"}},pathContext:{id:"@veikkaus/re-node-config"}}}});
//# sourceMappingURL=path---package-veikkaus-re-node-config-334f258f1d73c4059f21.js.map