{"version":3,"sources":["webpack:///path---package-ambientlight-bs-rx-80808f13588f32d712cd.js","webpack:///./.cache/json/package-ambientlight-bs-rx.json"],"names":["webpackJsonp","1174","module","exports","data","package","type","id","name","version","category","flags","platforms","description","keywords","license","updated","stars","score","quality","popularity","maintenance","readme","homepageUrl","repositoryUrl","npmUrl","issuesUrl","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,SAAWC,KAAA,YAAAC,GAAA,sBAAAC,KAAA,sBAAAC,QAAA,QAAAC,SAAA,UAAAC,SAAAC,WAAA,WAAAC,YAAA,oCAAAC,UAAA,4CAAAC,QAAA,MAAAC,QAAA,2BAAAC,MAAA,GAAAC,MAAA,kBAAAC,QAAA,kBAAAC,WAAA,oBAAAC,YAAA,kBAAAC,OAAA,mn0BAAo8wBC,YAAA,+CAAAC,cAAA,wCAAAC,OAAA,wDAAAC,UAAA,+CAAAC,KAAA,iCAA20GC,aAAgBrB,GAAA","file":"path---package-ambientlight-bs-rx-80808f13588f32d712cd.js","sourcesContent":["webpackJsonp([229744368505725],{\n\n/***/ 1174:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"package\":{\"type\":\"published\",\"id\":\"@ambientlight/bs-rx\",\"name\":\"@ambientlight/bs-rx\",\"version\":\"0.2.3\",\"category\":\"binding\",\"flags\":[],\"platforms\":[\"browser\"],\"description\":\"bucklescript bindings for RxJs v7\",\"keywords\":[\"async\",\"utilities\",\"reactive programming\"],\"license\":\"MIT\",\"updated\":\"2020-05-10T00:03:16.117Z\",\"stars\":24,\"score\":0.5888628737971895,\"quality\":0.7240090586886359,\"popularity\":0.061894598648984375,\"maintenance\":0.9999915618955835,\"readme\":\"<p><a href=\\\"https://github.com/ambientlight/bs-rx/actions\\\"><img src=\\\"https://github.com/ambientlight/bs-rx/workflows/Deploy%20Docs/badge.svg\\\" alt=\\\"STATUS\\\"></a>\\n<a href=\\\"https://www.npmjs.com/package/@ambientlight/bs-rx\\\"><img src=\\\"https://img.shields.io/npm/v/@ambientlight/bs-rx\\\" alt=\\\"VERSION\\\"></a>\\n<a href=\\\"https://github.com/ambientlight/bs-rx/blob/master/LICENSE\\\"><img src=\\\"https://img.shields.io/github/license/ambientlight/bs-rx?t\\\" alt=\\\"LICENSE\\\"></a>\\n<a href=\\\"https://github.com/ambientlight/bs-rx/issues\\\"><img src=\\\"https://img.shields.io/github/issues/ambientlight/bs-rx\\\" alt=\\\"ISSUES\\\"></a></p>\\n<h1 id=\\\"bs-rx\\\"><a href=\\\"#bs-rx\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>bs-rx</h1>\\n<p>Bucklescript bindings for <a href=\\\"https://github.com/ReactiveX/rxjs\\\">rxjs v7(alpha)</a><br>\\nMost functionality is available, while ajax / websocket apis are not yet done. Refer to <a href=\\\"https://ambientlight.github.io/bs-rx\\\">documentation</a> for existing coverage.</p>\\n<h2 id=\\\"installation-and-usage\\\"><a href=\\\"#installation-and-usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Installation and Usage</h2>\\n<div class=\\\"redex-codeblock\\\"><pre class=\\\"hljs lang-none\\\"><code>npm install @ambientlight/bs-rx reason-promise bs-fetch</code></pre></div>\\n<p><a href=\\\"https://github.com/aantron/promise\\\">reason-promise</a> and <a href=\\\"https://github.com/reasonml-community/bs-fetch\\\">bs-fetch</a> are peer dependencies</p>\\n<p>Then add <code>@ambientlight/bs-rx</code> (and <code>reason-promise</code>, <code>bs-fetch</code>) into <code>bs-dependencies</code> in your project <code>bsconfig.json</code>.</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">Rx</span>.range(~start=<span class=\\\"hljs-number\\\">1</span>, ~<span class=\\\"hljs-built_in\\\">count</span>=<span class=\\\"hljs-number\\\">200</span>, ())\\n|&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.<span class=\\\"hljs-built_in\\\">filter</span>((x, _idx) =&gt; x mod <span class=\\\"hljs-number\\\">2</span> == <span class=\\\"hljs-number\\\">1</span>)\\n|&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.<span class=\\\"hljs-built_in\\\">map</span>((x, _idx) =&gt; x + x)\\n|&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Observable</span>.subscribe(\\n  ~next=x=&gt;<span class=\\\"hljs-type\\\">Js</span>.log(x)\\n)</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> _ =\\n  (((<span class=\\\"hljs-type\\\">Rx</span>.range ~start:<span class=\\\"hljs-number\\\">1</span> ~count:<span class=\\\"hljs-number\\\">200</span> <span class=\\\"hljs-literal\\\">()</span>) |&gt;\\n      (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.filter (<span class=\\\"hljs-keyword\\\">fun</span> x  -&gt; <span class=\\\"hljs-keyword\\\">fun</span> _idx  -&gt; (x <span class=\\\"hljs-keyword\\\">mod</span> <span class=\\\"hljs-number\\\">2</span>) = <span class=\\\"hljs-number\\\">1</span>)))\\n     |&gt; (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.map (<span class=\\\"hljs-keyword\\\">fun</span> x  -&gt; <span class=\\\"hljs-keyword\\\">fun</span> _idx  -&gt; x + x)))\\n    |&gt; (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Observable</span>.subscribe ~next:(<span class=\\\"hljs-keyword\\\">fun</span> x  -&gt; <span class=\\\"hljs-type\\\">Js</span>.log x))</code></pre>\\n      </div>\\n    </div>\\n  \\n<p>You may also utilize <strong>-n</strong>(no idx) suffixed versions of those operators that errase <strong>idx</strong> argument:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">Rx</span>.range(~start=<span class=\\\"hljs-number\\\">1</span>, ~<span class=\\\"hljs-built_in\\\">count</span>=<span class=\\\"hljs-number\\\">200</span>, ())\\n|&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.filtern(x =&gt; x mod <span class=\\\"hljs-number\\\">2</span> == <span class=\\\"hljs-number\\\">1</span>)\\n|&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.mapn(x =&gt; x + x)\\n|&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Observable</span>.subscribe(\\n  ~next=x=&gt;<span class=\\\"hljs-type\\\">Js</span>.log(x)\\n);</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> _ =\\n  (((<span class=\\\"hljs-type\\\">Rx</span>.range ~start:<span class=\\\"hljs-number\\\">1</span> ~count:<span class=\\\"hljs-number\\\">200</span> <span class=\\\"hljs-literal\\\">()</span>) |&gt;\\n      (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.filtern (<span class=\\\"hljs-keyword\\\">fun</span> x  -&gt; (x <span class=\\\"hljs-keyword\\\">mod</span> <span class=\\\"hljs-number\\\">2</span>) = <span class=\\\"hljs-number\\\">1</span>)))\\n     |&gt; (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.mapn (<span class=\\\"hljs-keyword\\\">fun</span> x  -&gt; x + x)))\\n    |&gt; (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Observable</span>.subscribe ~next:(<span class=\\\"hljs-keyword\\\">fun</span> x  -&gt; <span class=\\\"hljs-type\\\">Js</span>.log x))</code></pre>\\n      </div>\\n    </div>\\n  \\n<h2 id=\\\"examples\\\"><a href=\\\"#examples\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Examples</h2>\\n<h4 id=\\\"map-and-flatten-each-letter-to-an-observable-ticking-every-1-second\\\"><a href=\\\"#map-and-flatten-each-letter-to-an-observable-ticking-every-1-second\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Map and flatten each letter to an Observable ticking every 1 second</h4>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">Rx</span>.of_([|<span class=\\\"hljs-string\\\">\\\"a\\\"</span>, <span class=\\\"hljs-string\\\">\\\"b\\\"</span>, <span class=\\\"hljs-string\\\">\\\"c\\\"</span>|])\\n|&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.mergeMap(`<span class=\\\"hljs-type\\\">Observable</span>((x, _idx) =&gt; \\n  <span class=\\\"hljs-type\\\">Rx</span>.interval(~period=<span class=\\\"hljs-number\\\">1000</span>)\\n  |&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.<span class=\\\"hljs-built_in\\\">map</span>((i, _idx) =&gt; string_of_int(i) ++ x)))\\n|&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Observable</span>.subscribe(~next=x=&gt;<span class=\\\"hljs-type\\\">Js</span>.log(x));</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> _ =\\n  ((<span class=\\\"hljs-type\\\">Rx</span>.of_ [|<span class=\\\"hljs-string\\\">\\\"a\\\"</span>;<span class=\\\"hljs-string\\\">\\\"b\\\"</span>;<span class=\\\"hljs-string\\\">\\\"c\\\"</span>|]) |&gt;\\n     (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.mergeMap\\n        (<span class=\\\"hljs-tag\\\">`Observable</span>\\n           (<span class=\\\"hljs-keyword\\\">fun</span> x  -&gt;\\n              <span class=\\\"hljs-keyword\\\">fun</span> _idx  -&gt;\\n                (<span class=\\\"hljs-type\\\">Rx</span>.interval ~period:<span class=\\\"hljs-number\\\">1000</span>) |&gt;\\n                  (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.map\\n                     (<span class=\\\"hljs-keyword\\\">fun</span> i  -&gt; <span class=\\\"hljs-keyword\\\">fun</span> _idx  -&gt; (string_of_int i) ^ x))))))\\n    |&gt; (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Observable</span>.subscribe ~next:(<span class=\\\"hljs-keyword\\\">fun</span> x  -&gt; <span class=\\\"hljs-type\\\">Js</span>.log x))</code></pre>\\n      </div>\\n    </div>\\n  \\n<h4 id=\\\"custom-operator\\\"><a href=\\\"#custom-operator\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Custom operator</h4>\\n<p>Create an observable that never completes and repeats when browser is back online.</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> repeatWhenOnline = source =&gt; \\n  source\\n  |&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.takeUntil(<span class=\\\"hljs-type\\\">Rx</span>.fromEvent(~target=<span class=\\\"hljs-type\\\">Webapi</span>.<span class=\\\"hljs-type\\\">Dom</span>.window, ~eventName=<span class=\\\"hljs-string\\\">\\\"offline\\\"</span>))\\n  |&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.repeatWhen(_notifier =&gt; <span class=\\\"hljs-type\\\">Rx</span>.fromEvent(~target=<span class=\\\"hljs-type\\\">Webapi</span>.<span class=\\\"hljs-type\\\">Dom</span>.window, ~eventName=<span class=\\\"hljs-string\\\">\\\"online\\\"</span>));\\n\\n<span class=\\\"hljs-keyword\\\">let</span> obs = <span class=\\\"hljs-type\\\">Rx</span>.of1(<span class=\\\"hljs-string\\\">\\\"I'm online\\\"</span>)\\n|&gt; repeatWhenOnline\\n|&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Observable</span>.subscribe(~next=x=&gt;<span class=\\\"hljs-type\\\">Js</span>.log(x));</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> repeatWhenOnline source =\\n  (source |&gt;\\n     (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.takeUntil\\n        (<span class=\\\"hljs-type\\\">Rx</span>.fromEvent ~target:<span class=\\\"hljs-type\\\">Webapi</span>.<span class=\\\"hljs-type\\\">Dom</span>.window ~eventName:<span class=\\\"hljs-string\\\">\\\"offline\\\"</span>)))\\n    |&gt;\\n    (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.repeatWhen\\n       (<span class=\\\"hljs-keyword\\\">fun</span> _notifier  -&gt;\\n          <span class=\\\"hljs-type\\\">Rx</span>.fromEvent ~target:<span class=\\\"hljs-type\\\">Webapi</span>.<span class=\\\"hljs-type\\\">Dom</span>.window ~eventName:<span class=\\\"hljs-string\\\">\\\"online\\\"</span>))\\n<span class=\\\"hljs-keyword\\\">let</span> obs =\\n  ((<span class=\\\"hljs-type\\\">Rx</span>.of1 <span class=\\\"hljs-string\\\">\\\"I'm online\\\"</span>) |&gt; repeatWhenOnline) |&gt;\\n    (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Observable</span>.subscribe ~next:(<span class=\\\"hljs-keyword\\\">fun</span> x  -&gt; <span class=\\\"hljs-type\\\">Js</span>.log x))</code></pre>\\n      </div>\\n    </div>\\n  \\n<h4 id=\\\"fetch\\\"><a href=\\\"#fetch\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Fetch</h4>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Fetch</span>.fromFetch(`<span class=\\\"hljs-type\\\">String</span>(<span class=\\\"hljs-string\\\">\\\"https://api.github.com/users?per_page=5\\\"</span>), ())\\n|&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.mergeMap(`<span class=\\\"hljs-type\\\">Promise</span>((response, _idx) =&gt; response |&gt; <span class=\\\"hljs-type\\\">Fetch</span>.<span class=\\\"hljs-type\\\">Response</span>.json))\\n|&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Observable</span>.subscribe(\\n  ~next=value =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(value),\\n  ~error=error=&gt;<span class=\\\"hljs-type\\\">Js</span>.log(error),\\n  ~complete=() =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-string\\\">\\\"done\\\"</span>)\\n);</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> _ =\\n  ((<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Fetch</span>.fromFetch (<span class=\\\"hljs-tag\\\">`String</span> <span class=\\\"hljs-string\\\">\\\"https://api.github.com/users?per_page=5\\\"</span>) <span class=\\\"hljs-literal\\\">()</span>)\\n     |&gt;\\n     (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.mergeMap\\n        (<span class=\\\"hljs-tag\\\">`Promise</span>\\n           (<span class=\\\"hljs-keyword\\\">fun</span> response  -&gt; <span class=\\\"hljs-keyword\\\">fun</span> _idx  -&gt; response |&gt; <span class=\\\"hljs-type\\\">Fetch</span>.<span class=\\\"hljs-type\\\">Response</span>.json))))\\n    |&gt;\\n    (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Observable</span>.subscribe ~next:(<span class=\\\"hljs-keyword\\\">fun</span> <span class=\\\"hljs-keyword\\\">value</span>  -&gt; <span class=\\\"hljs-type\\\">Js</span>.log <span class=\\\"hljs-keyword\\\">value</span>)\\n       ~error:(<span class=\\\"hljs-keyword\\\">fun</span> error  -&gt; <span class=\\\"hljs-type\\\">Js</span>.log error)\\n       ~complete:(<span class=\\\"hljs-keyword\\\">fun</span> <span class=\\\"hljs-literal\\\">()</span>  -&gt; <span class=\\\"hljs-type\\\">Js</span>.log <span class=\\\"hljs-string\\\">\\\"done\\\"</span>))</code></pre>\\n      </div>\\n    </div>\\n  \\n<p>Also, have a look at <a href=\\\"https://github.com/ambientlight/bs-rx/blob/master/__tests__/OperatorTests.re\\\">OperatorTests</a> for more usage examples.</p>\\n<h2 id=\\\"promises\\\"><a href=\\\"#promises\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Promises</h2>\\n<p>All bindings accepting promises come in two flavours: as <code>Js.Promise.t</code> (shipped with bucklescript) and <code>Promise.t</code> from <a href=\\\"https://github.com/aantron/promise\\\">reason-promise</a>. For the later, use <strong>`Repromise</strong> variant constructor.</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code>[@bs.<span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-string\\\">\\\"rxjs/operators\\\"</span>]\\nexternal mergeMap: (\\n  [@bs.unwrap] [\\n    | `<span class=\\\"hljs-type\\\">Observable</span>(('a, int) =&gt; t('b))\\n    | `<span class=\\\"hljs-type\\\">Promise</span>(('a, int) =&gt; <span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.t('b))\\n    | `<span class=\\\"hljs-type\\\">Repromise</span>(('a, int) =&gt; <span class=\\\"hljs-type\\\">Promise</span>.t('b))\\n    | `<span class=\\\"hljs-type\\\">Array</span>(('a, int) =&gt; array('b))\\n  ],\\n  ~concurrent: int=?\\n) =&gt; <span class=\\\"hljs-keyword\\\">operator</span>('a, 'b) = <span class=\\\"hljs-string\\\">\\\"mergeMap\\\"</span>;</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">external</span> mergeMap :\\n  (([ <span class=\\\"hljs-tag\\\">`Observable</span> <span class=\\\"hljs-keyword\\\">of</span> <span class=\\\"hljs-symbol\\\">'a</span> -&gt; <span class=\\\"hljs-built_in\\\">int</span> -&gt; <span class=\\\"hljs-symbol\\\">'b</span> t \\n    | <span class=\\\"hljs-tag\\\">`Promise</span> <span class=\\\"hljs-keyword\\\">of</span> <span class=\\\"hljs-symbol\\\">'a</span> -&gt; <span class=\\\"hljs-built_in\\\">int</span> -&gt; <span class=\\\"hljs-symbol\\\">'b</span> <span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.t \\n    | <span class=\\\"hljs-tag\\\">`Repromise</span> <span class=\\\"hljs-keyword\\\">of</span> <span class=\\\"hljs-symbol\\\">'a</span> -&gt; <span class=\\\"hljs-built_in\\\">int</span> -&gt; <span class=\\\"hljs-symbol\\\">'b</span> <span class=\\\"hljs-type\\\">Promise</span>.t \\n    | <span class=\\\"hljs-tag\\\">`Array</span> <span class=\\\"hljs-keyword\\\">of</span> <span class=\\\"hljs-symbol\\\">'a</span> -&gt; <span class=\\\"hljs-built_in\\\">int</span> -&gt; <span class=\\\"hljs-symbol\\\">'b</span> <span class=\\\"hljs-built_in\\\">array</span> ])[@bs.unwrap ]) -&gt;\\n    ?concurrent:<span class=\\\"hljs-built_in\\\">int</span> -&gt; (<span class=\\\"hljs-symbol\\\">'a</span>,<span class=\\\"hljs-symbol\\\">'b</span>) operator = <span class=\\\"hljs-string\\\">\\\"mergeMap\\\"</span>[@@bs.<span class=\\\"hljs-keyword\\\">module</span>\\n                                                      <span class=\\\"hljs-string\\\">\\\"rxjs/operators\\\"</span>]</code></pre>\\n      </div>\\n    </div>\\n  \\n<h2 id=\\\"testing\\\"><a href=\\\"#testing\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Testing</h2>\\n<p>You may find marble testing handy to test your rxjs logic. Marble string syntax allows you to specify rxjs events(such as emissions, subscription points) over virtual time that progresses by frames(denoted by <code>-</code>). You can use it to express the expected behavior of your observable sequences as strings and compare them with <code>Rx.Observable.t('a)</code> instances you are testing. You need to initialize <code>TestScheduler.t</code> with a function that can perform deep comparison (such as <code>BsMocha.Assert.deep_equal</code>), then put your marble tests inside <code>ts |> TestScheduler.run(_r => ...)</code>. Asynchronous operators usually take <code>~scheduler</code> parameter, pass <code>TestScheduler.t</code> instance to them. The next example illustrates it, also you may want to refer to rxjs <a href=\\\"https://rxjs-dev.firebaseapp.com/guide/testing/marble-testing\\\">marble diagrams documentation</a>.</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code>open <span class=\\\"hljs-type\\\">Jest</span>;\\nopen <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Testing</span>;\\nopen <span class=\\\"hljs-type\\\">TestScheduler</span>;\\n\\n<span class=\\\"hljs-comment\\\">//...</span>\\n\\ntest(<span class=\\\"hljs-string\\\">\\\"timeInterval: should record the time interval between source elements\\\"</span>, () =&gt; {\\n  <span class=\\\"hljs-keyword\\\">let</span> ts = <span class=\\\"hljs-type\\\">TestScheduler</span>.create(~assertDeepEqual=<span class=\\\"hljs-type\\\">BsMocha</span>.<span class=\\\"hljs-type\\\">Assert</span>.deep_equal);\\n  ts |&gt; run(_r =&gt; {\\n    <span class=\\\"hljs-comment\\\">// subscribe in 6th frame, 4 emissions: b, c, d, e</span>\\n    <span class=\\\"hljs-keyword\\\">let</span> e1 = ts |&gt; hot(<span class=\\\"hljs-string\\\">\\\"--a--^b-c-----d--e--|\\\"</span>);\\n    <span class=\\\"hljs-keyword\\\">let</span> e1subs =    [|<span class=\\\"hljs-string\\\">\\\"^--------------!\\\"</span>|];\\n    <span class=\\\"hljs-keyword\\\">let</span> expected =    <span class=\\\"hljs-string\\\">\\\"-w-x-----y--z--|\\\"</span>;\\n    <span class=\\\"hljs-comment\\\">// expected values in w, x, y, z emissions</span>\\n    <span class=\\\"hljs-keyword\\\">let</span> values = { <span class=\\\"hljs-string\\\">\\\"w\\\"</span>: <span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-string\\\">\\\"x\\\"</span>: <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-string\\\">\\\"y\\\"</span>: <span class=\\\"hljs-number\\\">6</span>, <span class=\\\"hljs-string\\\">\\\"z\\\"</span>: <span class=\\\"hljs-number\\\">3</span> };\\n\\n    <span class=\\\"hljs-keyword\\\">let</span> result = e1\\n    |&gt; <span class=\\\"hljs-type\\\">HotObservable</span>.asObservable\\n    |&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.timeInterval(~scheduler=ts|.<span class=\\\"hljs-type\\\">TestScheduler</span>.asScheduler)\\n    |&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.<span class=\\\"hljs-built_in\\\">map</span>((x, _idx) =&gt; x |. <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">TimeInterval</span>.intervalGet);\\n\\n    ts |&gt; expectObservable(result) |&gt; toBeObservable(expected, ~values);\\n    ts |&gt; expectSubscriptions(e1 |&gt; <span class=\\\"hljs-type\\\">HotObservable</span>.subscriptions) |&gt; toBeSubscriptions(e1subs);\\n    <span class=\\\"hljs-type\\\">Expect</span>.expect(<span class=\\\"hljs-literal\\\">true</span>) \\n  })\\n  |&gt; <span class=\\\"hljs-type\\\">Expect</span>.toBe(<span class=\\\"hljs-literal\\\">true</span>)\\n});</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2553</span>: &lt;<span class=\\\"hljs-type\\\">UNKNOWN</span> <span class=\\\"hljs-type\\\">SYNTAX</span> <span class=\\\"hljs-type\\\">ERROR</span>&gt;</code></pre>\\n      </div>\\n    </div>\\n  \\n<h2 id=\\\"contributing\\\"><a href=\\\"#contributing\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Contributing</h2>\\n<p>Any contribution is greatly appreciated. Feel free to reach out in issues for any questions or problem you ran into. Implementational inheritance is used to model inheritance used in rxjs, you may want to refer to <a href=\\\"https://github.com/reasonml-community/bs-webapi-incubator#implementation-inheritance\\\">Implementation Inheritance</a>. </p>\\n<div class=\\\"redex-codeblock\\\"><pre class=\\\"hljs lang-none\\\"><code>git <span class=\\\"hljs-built_in\\\">clone</span> https://github.com/ambientlight/bs-rx.git\\n<span class=\\\"hljs-built_in\\\">cd</span> bs-rx\\nnpm install\\nnpm run build\\nnpm run <span class=\\\"hljs-built_in\\\">test</span></code></pre></div>\\n<p>You can also generate docs via <a href=\\\"https://github.com/reuniverse/bsdoc\\\">bsdoc</a>. If you have forked this repo, the pushes to master should spin the github actions workflow that rebuild the github pages docs with workflow available at <a href=\\\"https://github.com/ambientlight/bs-rx/blob/master/.github/workflows/deploy_docs.yml\\\">deploy_docs.yml</a>. (You will need to set <code>GH_PAGES_TOKEN</code> for github pages deployment to work).</p>\\n<p>If you want to generate docs in local make sure you have <a href=\\\"https://github.com/reuniverse/bsdoc\\\">bsdoc</a> built against ocaml version matching the ocaml version used in your <code>bs-platform</code> (<code>4.02.3+buckle-master</code> for bs-platform@5.2.1).</p>\\n<div class=\\\"redex-codeblock\\\"><pre class=\\\"hljs lang-none\\\"><code>opam <span class=\\\"hljs-keyword\\\">switch</span> <span class=\\\"hljs-number\\\">4.02</span>.<span class=\\\"hljs-number\\\">3</span>+buckle-master</code></pre></div>\\n<p>For osx, you can use the npm installation of bsdoc(corresponds to bs-platform 6), but for linux-based distros, you would need to build bsdoc from source for now.</p>\\n<h2 id=\\\"see-also\\\"><a href=\\\"#see-also\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>See Also</h2>\\n<p><a href=\\\"https://github.com/ambientlight/reductive-observable\\\">reductive-observable</a>: Centalized rx side-effects for reductive.</p>\\n\",\"homepageUrl\":\"https://github.com/ambientlight/bs-rx#readme\",\"repositoryUrl\":\"https://github.com/ambientlight/bs-rx\",\"npmUrl\":\"https://www.npmjs.com/package/%40ambientlight%2Fbs-rx\",\"issuesUrl\":\"https://github.com/ambientlight/bs-rx/issues\",\"slug\":\"/package/@ambientlight/bs-rx\"}},\"pathContext\":{\"id\":\"@ambientlight/bs-rx\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---package-ambientlight-bs-rx-80808f13588f32d712cd.js","module.exports = {\"data\":{\"package\":{\"type\":\"published\",\"id\":\"@ambientlight/bs-rx\",\"name\":\"@ambientlight/bs-rx\",\"version\":\"0.2.3\",\"category\":\"binding\",\"flags\":[],\"platforms\":[\"browser\"],\"description\":\"bucklescript bindings for RxJs v7\",\"keywords\":[\"async\",\"utilities\",\"reactive programming\"],\"license\":\"MIT\",\"updated\":\"2020-05-10T00:03:16.117Z\",\"stars\":24,\"score\":0.5888628737971895,\"quality\":0.7240090586886359,\"popularity\":0.061894598648984375,\"maintenance\":0.9999915618955835,\"readme\":\"<p><a href=\\\"https://github.com/ambientlight/bs-rx/actions\\\"><img src=\\\"https://github.com/ambientlight/bs-rx/workflows/Deploy%20Docs/badge.svg\\\" alt=\\\"STATUS\\\"></a>\\n<a href=\\\"https://www.npmjs.com/package/@ambientlight/bs-rx\\\"><img src=\\\"https://img.shields.io/npm/v/@ambientlight/bs-rx\\\" alt=\\\"VERSION\\\"></a>\\n<a href=\\\"https://github.com/ambientlight/bs-rx/blob/master/LICENSE\\\"><img src=\\\"https://img.shields.io/github/license/ambientlight/bs-rx?t\\\" alt=\\\"LICENSE\\\"></a>\\n<a href=\\\"https://github.com/ambientlight/bs-rx/issues\\\"><img src=\\\"https://img.shields.io/github/issues/ambientlight/bs-rx\\\" alt=\\\"ISSUES\\\"></a></p>\\n<h1 id=\\\"bs-rx\\\"><a href=\\\"#bs-rx\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>bs-rx</h1>\\n<p>Bucklescript bindings for <a href=\\\"https://github.com/ReactiveX/rxjs\\\">rxjs v7(alpha)</a><br>\\nMost functionality is available, while ajax / websocket apis are not yet done. Refer to <a href=\\\"https://ambientlight.github.io/bs-rx\\\">documentation</a> for existing coverage.</p>\\n<h2 id=\\\"installation-and-usage\\\"><a href=\\\"#installation-and-usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Installation and Usage</h2>\\n<div class=\\\"redex-codeblock\\\"><pre class=\\\"hljs lang-none\\\"><code>npm install @ambientlight/bs-rx reason-promise bs-fetch</code></pre></div>\\n<p><a href=\\\"https://github.com/aantron/promise\\\">reason-promise</a> and <a href=\\\"https://github.com/reasonml-community/bs-fetch\\\">bs-fetch</a> are peer dependencies</p>\\n<p>Then add <code>@ambientlight/bs-rx</code> (and <code>reason-promise</code>, <code>bs-fetch</code>) into <code>bs-dependencies</code> in your project <code>bsconfig.json</code>.</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">Rx</span>.range(~start=<span class=\\\"hljs-number\\\">1</span>, ~<span class=\\\"hljs-built_in\\\">count</span>=<span class=\\\"hljs-number\\\">200</span>, ())\\n|&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.<span class=\\\"hljs-built_in\\\">filter</span>((x, _idx) =&gt; x mod <span class=\\\"hljs-number\\\">2</span> == <span class=\\\"hljs-number\\\">1</span>)\\n|&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.<span class=\\\"hljs-built_in\\\">map</span>((x, _idx) =&gt; x + x)\\n|&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Observable</span>.subscribe(\\n  ~next=x=&gt;<span class=\\\"hljs-type\\\">Js</span>.log(x)\\n)</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> _ =\\n  (((<span class=\\\"hljs-type\\\">Rx</span>.range ~start:<span class=\\\"hljs-number\\\">1</span> ~count:<span class=\\\"hljs-number\\\">200</span> <span class=\\\"hljs-literal\\\">()</span>) |&gt;\\n      (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.filter (<span class=\\\"hljs-keyword\\\">fun</span> x  -&gt; <span class=\\\"hljs-keyword\\\">fun</span> _idx  -&gt; (x <span class=\\\"hljs-keyword\\\">mod</span> <span class=\\\"hljs-number\\\">2</span>) = <span class=\\\"hljs-number\\\">1</span>)))\\n     |&gt; (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.map (<span class=\\\"hljs-keyword\\\">fun</span> x  -&gt; <span class=\\\"hljs-keyword\\\">fun</span> _idx  -&gt; x + x)))\\n    |&gt; (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Observable</span>.subscribe ~next:(<span class=\\\"hljs-keyword\\\">fun</span> x  -&gt; <span class=\\\"hljs-type\\\">Js</span>.log x))</code></pre>\\n      </div>\\n    </div>\\n  \\n<p>You may also utilize <strong>-n</strong>(no idx) suffixed versions of those operators that errase <strong>idx</strong> argument:</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">Rx</span>.range(~start=<span class=\\\"hljs-number\\\">1</span>, ~<span class=\\\"hljs-built_in\\\">count</span>=<span class=\\\"hljs-number\\\">200</span>, ())\\n|&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.filtern(x =&gt; x mod <span class=\\\"hljs-number\\\">2</span> == <span class=\\\"hljs-number\\\">1</span>)\\n|&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.mapn(x =&gt; x + x)\\n|&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Observable</span>.subscribe(\\n  ~next=x=&gt;<span class=\\\"hljs-type\\\">Js</span>.log(x)\\n);</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> _ =\\n  (((<span class=\\\"hljs-type\\\">Rx</span>.range ~start:<span class=\\\"hljs-number\\\">1</span> ~count:<span class=\\\"hljs-number\\\">200</span> <span class=\\\"hljs-literal\\\">()</span>) |&gt;\\n      (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.filtern (<span class=\\\"hljs-keyword\\\">fun</span> x  -&gt; (x <span class=\\\"hljs-keyword\\\">mod</span> <span class=\\\"hljs-number\\\">2</span>) = <span class=\\\"hljs-number\\\">1</span>)))\\n     |&gt; (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.mapn (<span class=\\\"hljs-keyword\\\">fun</span> x  -&gt; x + x)))\\n    |&gt; (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Observable</span>.subscribe ~next:(<span class=\\\"hljs-keyword\\\">fun</span> x  -&gt; <span class=\\\"hljs-type\\\">Js</span>.log x))</code></pre>\\n      </div>\\n    </div>\\n  \\n<h2 id=\\\"examples\\\"><a href=\\\"#examples\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Examples</h2>\\n<h4 id=\\\"map-and-flatten-each-letter-to-an-observable-ticking-every-1-second\\\"><a href=\\\"#map-and-flatten-each-letter-to-an-observable-ticking-every-1-second\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Map and flatten each letter to an Observable ticking every 1 second</h4>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">Rx</span>.of_([|<span class=\\\"hljs-string\\\">\\\"a\\\"</span>, <span class=\\\"hljs-string\\\">\\\"b\\\"</span>, <span class=\\\"hljs-string\\\">\\\"c\\\"</span>|])\\n|&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.mergeMap(`<span class=\\\"hljs-type\\\">Observable</span>((x, _idx) =&gt; \\n  <span class=\\\"hljs-type\\\">Rx</span>.interval(~period=<span class=\\\"hljs-number\\\">1000</span>)\\n  |&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.<span class=\\\"hljs-built_in\\\">map</span>((i, _idx) =&gt; string_of_int(i) ++ x)))\\n|&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Observable</span>.subscribe(~next=x=&gt;<span class=\\\"hljs-type\\\">Js</span>.log(x));</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> _ =\\n  ((<span class=\\\"hljs-type\\\">Rx</span>.of_ [|<span class=\\\"hljs-string\\\">\\\"a\\\"</span>;<span class=\\\"hljs-string\\\">\\\"b\\\"</span>;<span class=\\\"hljs-string\\\">\\\"c\\\"</span>|]) |&gt;\\n     (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.mergeMap\\n        (<span class=\\\"hljs-tag\\\">`Observable</span>\\n           (<span class=\\\"hljs-keyword\\\">fun</span> x  -&gt;\\n              <span class=\\\"hljs-keyword\\\">fun</span> _idx  -&gt;\\n                (<span class=\\\"hljs-type\\\">Rx</span>.interval ~period:<span class=\\\"hljs-number\\\">1000</span>) |&gt;\\n                  (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.map\\n                     (<span class=\\\"hljs-keyword\\\">fun</span> i  -&gt; <span class=\\\"hljs-keyword\\\">fun</span> _idx  -&gt; (string_of_int i) ^ x))))))\\n    |&gt; (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Observable</span>.subscribe ~next:(<span class=\\\"hljs-keyword\\\">fun</span> x  -&gt; <span class=\\\"hljs-type\\\">Js</span>.log x))</code></pre>\\n      </div>\\n    </div>\\n  \\n<h4 id=\\\"custom-operator\\\"><a href=\\\"#custom-operator\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Custom operator</h4>\\n<p>Create an observable that never completes and repeats when browser is back online.</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> repeatWhenOnline = source =&gt; \\n  source\\n  |&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.takeUntil(<span class=\\\"hljs-type\\\">Rx</span>.fromEvent(~target=<span class=\\\"hljs-type\\\">Webapi</span>.<span class=\\\"hljs-type\\\">Dom</span>.window, ~eventName=<span class=\\\"hljs-string\\\">\\\"offline\\\"</span>))\\n  |&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.repeatWhen(_notifier =&gt; <span class=\\\"hljs-type\\\">Rx</span>.fromEvent(~target=<span class=\\\"hljs-type\\\">Webapi</span>.<span class=\\\"hljs-type\\\">Dom</span>.window, ~eventName=<span class=\\\"hljs-string\\\">\\\"online\\\"</span>));\\n\\n<span class=\\\"hljs-keyword\\\">let</span> obs = <span class=\\\"hljs-type\\\">Rx</span>.of1(<span class=\\\"hljs-string\\\">\\\"I'm online\\\"</span>)\\n|&gt; repeatWhenOnline\\n|&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Observable</span>.subscribe(~next=x=&gt;<span class=\\\"hljs-type\\\">Js</span>.log(x));</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> repeatWhenOnline source =\\n  (source |&gt;\\n     (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.takeUntil\\n        (<span class=\\\"hljs-type\\\">Rx</span>.fromEvent ~target:<span class=\\\"hljs-type\\\">Webapi</span>.<span class=\\\"hljs-type\\\">Dom</span>.window ~eventName:<span class=\\\"hljs-string\\\">\\\"offline\\\"</span>)))\\n    |&gt;\\n    (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.repeatWhen\\n       (<span class=\\\"hljs-keyword\\\">fun</span> _notifier  -&gt;\\n          <span class=\\\"hljs-type\\\">Rx</span>.fromEvent ~target:<span class=\\\"hljs-type\\\">Webapi</span>.<span class=\\\"hljs-type\\\">Dom</span>.window ~eventName:<span class=\\\"hljs-string\\\">\\\"online\\\"</span>))\\n<span class=\\\"hljs-keyword\\\">let</span> obs =\\n  ((<span class=\\\"hljs-type\\\">Rx</span>.of1 <span class=\\\"hljs-string\\\">\\\"I'm online\\\"</span>) |&gt; repeatWhenOnline) |&gt;\\n    (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Observable</span>.subscribe ~next:(<span class=\\\"hljs-keyword\\\">fun</span> x  -&gt; <span class=\\\"hljs-type\\\">Js</span>.log x))</code></pre>\\n      </div>\\n    </div>\\n  \\n<h4 id=\\\"fetch\\\"><a href=\\\"#fetch\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Fetch</h4>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Fetch</span>.fromFetch(`<span class=\\\"hljs-type\\\">String</span>(<span class=\\\"hljs-string\\\">\\\"https://api.github.com/users?per_page=5\\\"</span>), ())\\n|&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.mergeMap(`<span class=\\\"hljs-type\\\">Promise</span>((response, _idx) =&gt; response |&gt; <span class=\\\"hljs-type\\\">Fetch</span>.<span class=\\\"hljs-type\\\">Response</span>.json))\\n|&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Observable</span>.subscribe(\\n  ~next=value =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(value),\\n  ~error=error=&gt;<span class=\\\"hljs-type\\\">Js</span>.log(error),\\n  ~complete=() =&gt; <span class=\\\"hljs-type\\\">Js</span>.log(<span class=\\\"hljs-string\\\">\\\"done\\\"</span>)\\n);</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> _ =\\n  ((<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Fetch</span>.fromFetch (<span class=\\\"hljs-tag\\\">`String</span> <span class=\\\"hljs-string\\\">\\\"https://api.github.com/users?per_page=5\\\"</span>) <span class=\\\"hljs-literal\\\">()</span>)\\n     |&gt;\\n     (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.mergeMap\\n        (<span class=\\\"hljs-tag\\\">`Promise</span>\\n           (<span class=\\\"hljs-keyword\\\">fun</span> response  -&gt; <span class=\\\"hljs-keyword\\\">fun</span> _idx  -&gt; response |&gt; <span class=\\\"hljs-type\\\">Fetch</span>.<span class=\\\"hljs-type\\\">Response</span>.json))))\\n    |&gt;\\n    (<span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Observable</span>.subscribe ~next:(<span class=\\\"hljs-keyword\\\">fun</span> <span class=\\\"hljs-keyword\\\">value</span>  -&gt; <span class=\\\"hljs-type\\\">Js</span>.log <span class=\\\"hljs-keyword\\\">value</span>)\\n       ~error:(<span class=\\\"hljs-keyword\\\">fun</span> error  -&gt; <span class=\\\"hljs-type\\\">Js</span>.log error)\\n       ~complete:(<span class=\\\"hljs-keyword\\\">fun</span> <span class=\\\"hljs-literal\\\">()</span>  -&gt; <span class=\\\"hljs-type\\\">Js</span>.log <span class=\\\"hljs-string\\\">\\\"done\\\"</span>))</code></pre>\\n      </div>\\n    </div>\\n  \\n<p>Also, have a look at <a href=\\\"https://github.com/ambientlight/bs-rx/blob/master/__tests__/OperatorTests.re\\\">OperatorTests</a> for more usage examples.</p>\\n<h2 id=\\\"promises\\\"><a href=\\\"#promises\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Promises</h2>\\n<p>All bindings accepting promises come in two flavours: as <code>Js.Promise.t</code> (shipped with bucklescript) and <code>Promise.t</code> from <a href=\\\"https://github.com/aantron/promise\\\">reason-promise</a>. For the later, use <strong>`Repromise</strong> variant constructor.</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code>[@bs.<span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-string\\\">\\\"rxjs/operators\\\"</span>]\\nexternal mergeMap: (\\n  [@bs.unwrap] [\\n    | `<span class=\\\"hljs-type\\\">Observable</span>(('a, int) =&gt; t('b))\\n    | `<span class=\\\"hljs-type\\\">Promise</span>(('a, int) =&gt; <span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.t('b))\\n    | `<span class=\\\"hljs-type\\\">Repromise</span>(('a, int) =&gt; <span class=\\\"hljs-type\\\">Promise</span>.t('b))\\n    | `<span class=\\\"hljs-type\\\">Array</span>(('a, int) =&gt; array('b))\\n  ],\\n  ~concurrent: int=?\\n) =&gt; <span class=\\\"hljs-keyword\\\">operator</span>('a, 'b) = <span class=\\\"hljs-string\\\">\\\"mergeMap\\\"</span>;</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-keyword\\\">external</span> mergeMap :\\n  (([ <span class=\\\"hljs-tag\\\">`Observable</span> <span class=\\\"hljs-keyword\\\">of</span> <span class=\\\"hljs-symbol\\\">'a</span> -&gt; <span class=\\\"hljs-built_in\\\">int</span> -&gt; <span class=\\\"hljs-symbol\\\">'b</span> t \\n    | <span class=\\\"hljs-tag\\\">`Promise</span> <span class=\\\"hljs-keyword\\\">of</span> <span class=\\\"hljs-symbol\\\">'a</span> -&gt; <span class=\\\"hljs-built_in\\\">int</span> -&gt; <span class=\\\"hljs-symbol\\\">'b</span> <span class=\\\"hljs-type\\\">Js</span>.<span class=\\\"hljs-type\\\">Promise</span>.t \\n    | <span class=\\\"hljs-tag\\\">`Repromise</span> <span class=\\\"hljs-keyword\\\">of</span> <span class=\\\"hljs-symbol\\\">'a</span> -&gt; <span class=\\\"hljs-built_in\\\">int</span> -&gt; <span class=\\\"hljs-symbol\\\">'b</span> <span class=\\\"hljs-type\\\">Promise</span>.t \\n    | <span class=\\\"hljs-tag\\\">`Array</span> <span class=\\\"hljs-keyword\\\">of</span> <span class=\\\"hljs-symbol\\\">'a</span> -&gt; <span class=\\\"hljs-built_in\\\">int</span> -&gt; <span class=\\\"hljs-symbol\\\">'b</span> <span class=\\\"hljs-built_in\\\">array</span> ])[@bs.unwrap ]) -&gt;\\n    ?concurrent:<span class=\\\"hljs-built_in\\\">int</span> -&gt; (<span class=\\\"hljs-symbol\\\">'a</span>,<span class=\\\"hljs-symbol\\\">'b</span>) operator = <span class=\\\"hljs-string\\\">\\\"mergeMap\\\"</span>[@@bs.<span class=\\\"hljs-keyword\\\">module</span>\\n                                                      <span class=\\\"hljs-string\\\">\\\"rxjs/operators\\\"</span>]</code></pre>\\n      </div>\\n    </div>\\n  \\n<h2 id=\\\"testing\\\"><a href=\\\"#testing\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Testing</h2>\\n<p>You may find marble testing handy to test your rxjs logic. Marble string syntax allows you to specify rxjs events(such as emissions, subscription points) over virtual time that progresses by frames(denoted by <code>-</code>). You can use it to express the expected behavior of your observable sequences as strings and compare them with <code>Rx.Observable.t('a)</code> instances you are testing. You need to initialize <code>TestScheduler.t</code> with a function that can perform deep comparison (such as <code>BsMocha.Assert.deep_equal</code>), then put your marble tests inside <code>ts |> TestScheduler.run(_r => ...)</code>. Asynchronous operators usually take <code>~scheduler</code> parameter, pass <code>TestScheduler.t</code> instance to them. The next example illustrates it, also you may want to refer to rxjs <a href=\\\"https://rxjs-dev.firebaseapp.com/guide/testing/marble-testing\\\">marble diagrams documentation</a>.</p>\\n\\n    <div class=\\\"redex-codeblock m-tabbed\\\">\\n      <ul>\\n        <li class=\\\"reason s-selected\\\"> RE\\n        <li class=\\\"ml\\\"> ML\\n      </ul>\\n      <div class=\\\"codeblock reason s-selected\\\">\\n        <pre class=\\\"hljs lang-reason\\\"><code>open <span class=\\\"hljs-type\\\">Jest</span>;\\nopen <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Testing</span>;\\nopen <span class=\\\"hljs-type\\\">TestScheduler</span>;\\n\\n<span class=\\\"hljs-comment\\\">//...</span>\\n\\ntest(<span class=\\\"hljs-string\\\">\\\"timeInterval: should record the time interval between source elements\\\"</span>, () =&gt; {\\n  <span class=\\\"hljs-keyword\\\">let</span> ts = <span class=\\\"hljs-type\\\">TestScheduler</span>.create(~assertDeepEqual=<span class=\\\"hljs-type\\\">BsMocha</span>.<span class=\\\"hljs-type\\\">Assert</span>.deep_equal);\\n  ts |&gt; run(_r =&gt; {\\n    <span class=\\\"hljs-comment\\\">// subscribe in 6th frame, 4 emissions: b, c, d, e</span>\\n    <span class=\\\"hljs-keyword\\\">let</span> e1 = ts |&gt; hot(<span class=\\\"hljs-string\\\">\\\"--a--^b-c-----d--e--|\\\"</span>);\\n    <span class=\\\"hljs-keyword\\\">let</span> e1subs =    [|<span class=\\\"hljs-string\\\">\\\"^--------------!\\\"</span>|];\\n    <span class=\\\"hljs-keyword\\\">let</span> expected =    <span class=\\\"hljs-string\\\">\\\"-w-x-----y--z--|\\\"</span>;\\n    <span class=\\\"hljs-comment\\\">// expected values in w, x, y, z emissions</span>\\n    <span class=\\\"hljs-keyword\\\">let</span> values = { <span class=\\\"hljs-string\\\">\\\"w\\\"</span>: <span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-string\\\">\\\"x\\\"</span>: <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-string\\\">\\\"y\\\"</span>: <span class=\\\"hljs-number\\\">6</span>, <span class=\\\"hljs-string\\\">\\\"z\\\"</span>: <span class=\\\"hljs-number\\\">3</span> };\\n\\n    <span class=\\\"hljs-keyword\\\">let</span> result = e1\\n    |&gt; <span class=\\\"hljs-type\\\">HotObservable</span>.asObservable\\n    |&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.timeInterval(~scheduler=ts|.<span class=\\\"hljs-type\\\">TestScheduler</span>.asScheduler)\\n    |&gt; <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">Operators</span>.<span class=\\\"hljs-built_in\\\">map</span>((x, _idx) =&gt; x |. <span class=\\\"hljs-type\\\">Rx</span>.<span class=\\\"hljs-type\\\">TimeInterval</span>.intervalGet);\\n\\n    ts |&gt; expectObservable(result) |&gt; toBeObservable(expected, ~values);\\n    ts |&gt; expectSubscriptions(e1 |&gt; <span class=\\\"hljs-type\\\">HotObservable</span>.subscriptions) |&gt; toBeSubscriptions(e1subs);\\n    <span class=\\\"hljs-type\\\">Expect</span>.expect(<span class=\\\"hljs-literal\\\">true</span>) \\n  })\\n  |&gt; <span class=\\\"hljs-type\\\">Expect</span>.toBe(<span class=\\\"hljs-literal\\\">true</span>)\\n});</code></pre>\\n      </div>\\n      <div class=\\\"codeblock ml\\\">\\n        <pre class=\\\"hljs lang-ml\\\"><code><span class=\\\"hljs-number\\\">2553</span>: &lt;<span class=\\\"hljs-type\\\">UNKNOWN</span> <span class=\\\"hljs-type\\\">SYNTAX</span> <span class=\\\"hljs-type\\\">ERROR</span>&gt;</code></pre>\\n      </div>\\n    </div>\\n  \\n<h2 id=\\\"contributing\\\"><a href=\\\"#contributing\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Contributing</h2>\\n<p>Any contribution is greatly appreciated. Feel free to reach out in issues for any questions or problem you ran into. Implementational inheritance is used to model inheritance used in rxjs, you may want to refer to <a href=\\\"https://github.com/reasonml-community/bs-webapi-incubator#implementation-inheritance\\\">Implementation Inheritance</a>. </p>\\n<div class=\\\"redex-codeblock\\\"><pre class=\\\"hljs lang-none\\\"><code>git <span class=\\\"hljs-built_in\\\">clone</span> https://github.com/ambientlight/bs-rx.git\\n<span class=\\\"hljs-built_in\\\">cd</span> bs-rx\\nnpm install\\nnpm run build\\nnpm run <span class=\\\"hljs-built_in\\\">test</span></code></pre></div>\\n<p>You can also generate docs via <a href=\\\"https://github.com/reuniverse/bsdoc\\\">bsdoc</a>. If you have forked this repo, the pushes to master should spin the github actions workflow that rebuild the github pages docs with workflow available at <a href=\\\"https://github.com/ambientlight/bs-rx/blob/master/.github/workflows/deploy_docs.yml\\\">deploy_docs.yml</a>. (You will need to set <code>GH_PAGES_TOKEN</code> for github pages deployment to work).</p>\\n<p>If you want to generate docs in local make sure you have <a href=\\\"https://github.com/reuniverse/bsdoc\\\">bsdoc</a> built against ocaml version matching the ocaml version used in your <code>bs-platform</code> (<code>4.02.3+buckle-master</code> for bs-platform@5.2.1).</p>\\n<div class=\\\"redex-codeblock\\\"><pre class=\\\"hljs lang-none\\\"><code>opam <span class=\\\"hljs-keyword\\\">switch</span> <span class=\\\"hljs-number\\\">4.02</span>.<span class=\\\"hljs-number\\\">3</span>+buckle-master</code></pre></div>\\n<p>For osx, you can use the npm installation of bsdoc(corresponds to bs-platform 6), but for linux-based distros, you would need to build bsdoc from source for now.</p>\\n<h2 id=\\\"see-also\\\"><a href=\\\"#see-also\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>See Also</h2>\\n<p><a href=\\\"https://github.com/ambientlight/reductive-observable\\\">reductive-observable</a>: Centalized rx side-effects for reductive.</p>\\n\",\"homepageUrl\":\"https://github.com/ambientlight/bs-rx#readme\",\"repositoryUrl\":\"https://github.com/ambientlight/bs-rx\",\"npmUrl\":\"https://www.npmjs.com/package/%40ambientlight%2Fbs-rx\",\"issuesUrl\":\"https://github.com/ambientlight/bs-rx/issues\",\"slug\":\"/package/@ambientlight/bs-rx\"}},\"pathContext\":{\"id\":\"@ambientlight/bs-rx\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/package-ambientlight-bs-rx.json\n// module id = 1174\n// module chunks = 229744368505725"],"sourceRoot":""}