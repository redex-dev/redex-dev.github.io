webpackJsonp([0xec7a68fdcbcf],{1393:function(s,a){s.exports={data:{package:{type:"published",id:"reductive-observable",name:"reductive-observable",version:"0.1.2",category:"library",flags:[],platforms:["browser","node"],description:"Minimal port of redux-observable to reason reductive",keywords:["development tools","reactive programming"],license:"MIT",updated:"2020-02-09T17:05:26.890Z",stars:3,score:.575046901979373,quality:.7238096377803931,popularity:.026180517489233907,maintenance:.9964023700686377,readme:'<h1 id="reductive-observable"><a href="#reductive-observable" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>reductive-observable</h1>\n<p>Minimal port of <a href="https://github.com/redux-observable/redux-observable">redux-observable</a> to reason reductive.\nCentalized rx side-effects for reductive.</p>\n<p>Additionally this repo provides a higher order store <code>ObservableStore</code> that allows observing action-chains to bring a concept of <code>completion</code> to reductive.  To have completion in reductive, we would likely need to store the status of the side effect in a substate and then subscribe and observe changes to this substate, sometimes it might feel like an overkill, and we wished <code>dispatch()</code> would be able to return a <code>Promise</code> or <code>Observable</code> back, this is precisely what <code>ObservableStore.observe()</code> does, see <a href="https://github.com/ambientlight/reductive-observable#usage-observablestore">usage</a>.</p>\n<h2 id="installation"><a href="#installation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>\n<div class="redex-codeblock"><pre class="hljs lang-none"><code>npm install reductive-observable</code></pre></div>\n<p>Then add <code>reductive-observable</code> into <code>bs-dependencies</code> in your project <code>bsconfig.json</code></p>\n<h2 id="usage-reductiveobservablemiddleware"><a href="#usage-reductiveobservablemiddleware" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage: ReductiveObservable.middleware</h2>\n<p>Your side-effect is defined as <code>epic</code>. Epic is an observable operator (transformer function) that takes an <code>Rx.Observable.t((action, state))</code> and returns an <code>Rx.Observable.t(action)</code>, that is an observable that emits actions back to the store. Let\'s look at the following example:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">State</span> </span>{\n  <span class="hljs-keyword">type</span> t = {\n    <span class="hljs-built_in">count</span>: int\n  };\n};\n\n<span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">Action</span> </span>{\n  <span class="hljs-keyword">type</span> t = \n    | <span class="hljs-type">Increment</span> \n    | <span class="hljs-type">Decrement</span> \n    | <span class="hljs-type">StartIncrementing</span>(int) \n    | <span class="hljs-type">StartDecrementing</span>(int)\n};\n\n<span class="hljs-keyword">let</span> reducer = (state: <span class="hljs-type">State</span>.t, action: <span class="hljs-type">Action</span>.t): <span class="hljs-type">State</span>.t =&gt; \n  <span class="hljs-keyword">switch</span>(action){\n  | <span class="hljs-type">Increment</span> =&gt; { <span class="hljs-built_in">count</span>: state.<span class="hljs-built_in">count</span> + <span class="hljs-number">1</span> }\n  | <span class="hljs-type">Decrement</span> =&gt; { <span class="hljs-built_in">count</span>: state.<span class="hljs-built_in">count</span> - <span class="hljs-number">1</span> }\n  | <span class="hljs-type">StartIncrementing</span>(<span class="hljs-number">_</span>) =&gt; state\n  | <span class="hljs-type">StartDecrementing</span>(<span class="hljs-number">_</span>) =&gt; state\n  };\n\n<span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">Epics</span> </span>{\n  <span class="hljs-keyword">let</span> startIncrementing = (ro: <span class="hljs-type">Rx</span>.<span class="hljs-type">Observable</span>.t((<span class="hljs-type">Action</span>.t, <span class="hljs-type">State</span>.t))) =&gt; <span class="hljs-type">ReductiveObservable</span>.<span class="hljs-type">Utils</span>.({ \n    ro\n    |&gt; optmap(<span class="hljs-func"><span class="hljs-keyword">fun</span><span class="hljs-params"> |<span class="hljs-params"> (Action.StartIncrementing(<span class="hljs-built_in">count</span>),<span class="hljs-params"> _store)<span class="hljs-params"> </span></span></span></span></span>=&gt; <span class="hljs-type">Some</span>(<span class="hljs-built_in">count</span>) | <span class="hljs-number">_</span> =&gt; <span class="hljs-type">None</span>)\n    |&gt; <span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span>.mergeMap(`<span class="hljs-type">Observable</span>((<span class="hljs-built_in">count</span>, _idx) =&gt; \n      <span class="hljs-type">Rx</span>.range(~<span class="hljs-built_in">count</span>=<span class="hljs-built_in">count</span>, ())\n      |&gt; <span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span>.<span class="hljs-built_in">map</span>((_value, _idx) =&gt; <span class="hljs-type">Action</span>.<span class="hljs-type">Increment</span>)\n    ))\n  });\n\n  <span class="hljs-keyword">let</span> startDecrementing = (ro: <span class="hljs-type">Rx</span>.<span class="hljs-type">Observable</span>.t((<span class="hljs-type">Action</span>.t, <span class="hljs-type">State</span>.t))) =&gt; <span class="hljs-type">ReductiveObservable</span>.<span class="hljs-type">Utils</span>.({ \n    ro\n    |&gt; optmap(<span class="hljs-func"><span class="hljs-keyword">fun</span><span class="hljs-params"> |<span class="hljs-params"> (Action.StartDecrementing(<span class="hljs-built_in">count</span>),<span class="hljs-params"> _store)<span class="hljs-params"> </span></span></span></span></span>=&gt; <span class="hljs-type">Some</span>(<span class="hljs-built_in">count</span>) | <span class="hljs-number">_</span> =&gt; <span class="hljs-type">None</span>)\n    |&gt; <span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span>.mergeMap(`<span class="hljs-type">Observable</span>((<span class="hljs-built_in">count</span>, _idx) =&gt; \n      <span class="hljs-type">Rx</span>.range(~<span class="hljs-built_in">count</span>=<span class="hljs-built_in">count</span>, ())\n      |&gt; <span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span>.<span class="hljs-built_in">map</span>((_value, _idx) =&gt; <span class="hljs-type">Action</span>.<span class="hljs-type">Decrement</span>)\n    ))\n  });\n\n  <span class="hljs-comment">/**\n    use empty operator when side effect does not need to emit actions back to the store\n   */</span>\n<span class="hljs-type">To</span> have completion <span class="hljs-keyword">in</span> reductive, we would likely need <span class="hljs-keyword">to</span> store the status <span class="hljs-keyword">of</span> the side effect <span class="hljs-keyword">in</span> a substate and then subscribe and observe changes <span class="hljs-keyword">to</span> this substate, sometimes it might feel like an overkill, and we wished `dispatch()` would be able <span class="hljs-keyword">to</span> <span class="hljs-keyword">return</span> a `<span class="hljs-type">Promise</span>` or `<span class="hljs-type">Observable</span>` back.      <span class="hljs-type">Rx</span>.merge([|\n      ro |&gt; startIncrementing,\n      ro |&gt; startDecrementing,\n      ro |&gt; logState\n    |]);\n};</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">1444</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n<p>We have 3 epics defined here. Two of them trasform <code>StartDecrementing(count) / StartDecrementing(count)</code> into #count dispatches of <code>Increment / Decrement</code> back to the store via <code>Rx.range</code> observable creator. The third action just logs the state after each action dispatched, and since it doesn\'t need to emit anything back to the store, <code>ReductiveObservable.Utils.empty</code> operator is used to mergeMap observable sequence to <code>Rx.empty</code>.\nTo apply these epics pass them as parameter to <code>ReductiveObservable.middleware</code> which is passed to reductive store creator.</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> store = <span class="hljs-type">Reductive</span>.<span class="hljs-type">Store</span>.create(\n  ~reducer,\n  ~preloadedState={ <span class="hljs-built_in">count</span>: <span class="hljs-number">0</span> },\n  ~enhancer=<span class="hljs-type">ReductiveObservable</span>.middleware(<span class="hljs-type">Rx</span>.of1(<span class="hljs-type">Epics</span>.root)),\n  ()\n);</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> store =\n  <span class="hljs-type">Reductive</span>.<span class="hljs-type">Store</span>.create ~reducer ~preloadedState:{ count = <span class="hljs-number">0</span> }\n    ~enhancer:(<span class="hljs-type">ReductiveObservable</span>.middleware (<span class="hljs-type">Rx</span>.of1 <span class="hljs-type">Epics</span>.root)) <span class="hljs-literal">()</span></code></pre>\n      </div>\n    </div>\n  \n<h2 id="usage-observablestore"><a href="#usage-observablestore" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage: ObservableStore</h2>\n<p>When you need to observe the status or completion of your side effects on the dispatching side, wrap your store into <code>ObservableStore</code>, where instead of using <code>dispatch(yourAction)</code>, <code>observe(yourAction)</code> can be used to return an observable that will emit actions belonging to the same logical action chain.</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-comment">// let store = Reductive.Store.create(...)</span>\n\n<span class="hljs-keyword">let</span> obsStore = <span class="hljs-type">ObservableStore</span>.create(\n  store,\n  ~enhancer=<span class="hljs-type">ReductiveObservable</span>.middleware(<span class="hljs-type">Rx</span>.of1(<span class="hljs-type">Epics</span>.progress)),\n  ()\n)\n\n<span class="hljs-comment">// obsStore |. Reductive.Store.dispatch(StartLongEffect)</span>\n\nobsStore\n|. <span class="hljs-type">ObservableStore</span>.observe(<span class="hljs-type">StartLongEffect</span>)\n|&gt; <span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span>.tap(~next=progress =&gt; <span class="hljs-type">Js</span>.log(progress))\n|&gt; <span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span>.<span class="hljs-built_in">reduce</span>((progress, action, idx) =&gt; <span class="hljs-keyword">switch</span>(action){\n  | <span class="hljs-type">Action</span>.<span class="hljs-type">Update</span>(status) =&gt; status\n  | <span class="hljs-type">Action</span>.<span class="hljs-type">EndLongEffect</span> =&gt; progress == <span class="hljs-number">100</span> ? <span class="hljs-number">100</span> : -<span class="hljs-number">1</span>\n  | <span class="hljs-number">_</span> =&gt; progress\n}, <span class="hljs-number">0</span>)</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">0</span>: &lt;<span class="hljs-type">UNKNOWN</span> <span class="hljs-type">SYNTAX</span> <span class="hljs-type">ERROR</span>&gt;</code></pre>\n      </div>\n    </div>\n  \n<p>where the Epics and Action is defined as:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">Action</span> </span>{\n  <span class="hljs-keyword">type</span> t = \n    | <span class="hljs-type">StartLongEffect</span>\n    | <span class="hljs-type">Update</span>(int)\n    | <span class="hljs-type">EndLongEffect</span>\n};\n\n<span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">Epics</span> </span>{\n  <span class="hljs-keyword">let</span> progress = ro =&gt; <span class="hljs-type">ReductiveObservable</span>.<span class="hljs-type">Utils</span>.({\n    ro\n    |&gt; optmap(<span class="hljs-func"><span class="hljs-keyword">fun</span><span class="hljs-params"> <span class="hljs-params">\n<span class="hljs-params"> <span class="hljs-params"> <span class="hljs-params"> <span class="hljs-params"> <span class="hljs-params"> <span class="hljs-params"> |<span class="hljs-params"> (ObservableStore.Start(Action.StartLongEffect,<span class="hljs-params"> subject),<span class="hljs-params"> _store)<span class="hljs-params"> </span></span></span></span></span></span></span></span></span></span></span></span></span>=&gt; <span class="hljs-type">Some</span>(subject) \n      | <span class="hljs-number">_</span> =&gt; <span class="hljs-type">None</span>)\n    |&gt; <span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span>.mergeMap(`<span class="hljs-type">Observable</span>((subject, _idx) =&gt;\n      <span class="hljs-type">Rx</span>.concat([|\n        <span class="hljs-type">Rx</span>.range(~<span class="hljs-built_in">count</span>=<span class="hljs-number">100</span>, ())\n        |&gt; <span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span>.<span class="hljs-built_in">map</span>((value, _idx) =&gt; value + <span class="hljs-number">1</span>)\n        |&gt; <span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span>.<span class="hljs-built_in">map</span>((value, _idx) =&gt; <span class="hljs-type">ObservableStore</span>.<span class="hljs-type">Update</span>(<span class="hljs-type">Action</span>.<span class="hljs-type">Update</span>(value), subject)),\n        <span class="hljs-type">Rx</span>.of1(<span class="hljs-type">ObservableStore</span>.<span class="hljs-type">End</span>(<span class="hljs-type">Action</span>.<span class="hljs-type">EndLongEffect</span>, subject))\n      |])\n    ))\n  });\n}</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">module</span> <span class="hljs-type">Action</span> =\n  <span class="hljs-keyword">struct</span> <span class="hljs-keyword">type</span> t =\n           | <span class="hljs-type">StartLongEffect</span>\n           | <span class="hljs-type">Update</span> <span class="hljs-keyword">of</span> <span class="hljs-built_in">int</span>\n           | <span class="hljs-type">EndLongEffect</span> <span class="hljs-keyword">end</span>\n<span class="hljs-keyword">module</span> <span class="hljs-type">Epics</span> =\n  <span class="hljs-keyword">struct</span>\n    <span class="hljs-keyword">let</span> progress ro =\n      <span class="hljs-keyword">let</span> <span class="hljs-keyword">open</span> <span class="hljs-type">ReductiveObservable</span>.<span class="hljs-type">Utils</span> <span class="hljs-keyword">in</span>\n        (ro |&gt;\n           (optmap\n              (<span class="hljs-keyword">function</span>\n               | (((<span class="hljs-type">ObservableStore</span>.<span class="hljs-type">Start</span>\n                  (<span class="hljs-type">Action</span>.<span class="hljs-type">StartLongEffect</span> ,subject))[@explicit_arity ]),_store)\n                   -&gt; ((<span class="hljs-type">Some</span> (subject))[@explicit_arity ])\n               | _ -&gt; <span class="hljs-type">None</span>)))\n          |&gt;\n          (<span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span>.mergeMap\n             (<span class="hljs-tag">`Observable</span>\n                (<span class="hljs-keyword">fun</span> subject  -&gt;\n                   <span class="hljs-keyword">fun</span> _idx  -&gt;\n                     <span class="hljs-type">Rx</span>.concat\n                       [|(((<span class="hljs-type">Rx</span>.range ~count:<span class="hljs-number">100</span> <span class="hljs-literal">()</span>) |&gt;\n                             (<span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span>.map\n                                (<span class="hljs-keyword">fun</span> <span class="hljs-keyword">value</span>  -&gt; <span class="hljs-keyword">fun</span> _idx  -&gt; <span class="hljs-keyword">value</span> + <span class="hljs-number">1</span>)))\n                            |&gt;\n                            (<span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span>.map\n                               (<span class="hljs-keyword">fun</span> <span class="hljs-keyword">value</span>  -&gt;\n                                  <span class="hljs-keyword">fun</span> _idx  -&gt;\n                                    ((<span class="hljs-type">ObservableStore</span>.<span class="hljs-type">Update</span>\n                                        (((<span class="hljs-type">Action</span>.<span class="hljs-type">Update</span> (<span class="hljs-keyword">value</span>))[@explicit_arity\n                                                                   ]),\n                                          subject))[@explicit_arity ]))));(\n                         <span class="hljs-type">Rx</span>.of1\n                           ((<span class="hljs-type">ObservableStore</span>.<span class="hljs-type">End</span>\n                               (<span class="hljs-type">Action</span>.<span class="hljs-type">EndLongEffect</span>, subject))[@explicit_arity\n                                                                 ]))|])))\n  <span class="hljs-keyword">end</span></code></pre>\n      </div>\n    </div>\n  \n<p>The epics you define take <code>Rx.Observable.t((observableAction(\'action), \'state))</code> and return <code>Rx.Observable.t(observableAction(\'action))</code> where observableAction is defined as:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">type</span> observableAction(\'action) =\n  | <span class="hljs-type">Start</span>(\'action, <span class="hljs-type">Rx</span>.<span class="hljs-type">ReplaySubject</span>.t(\'action))\n  | <span class="hljs-type">Update</span>(\'action, <span class="hljs-type">Rx</span>.<span class="hljs-type">ReplaySubject</span>.t(\'action))\n  | <span class="hljs-type">Error</span>(\'action, <span class="hljs-type">Rx</span>.<span class="hljs-type">ReplaySubject</span>.t(\'action))\n  | <span class="hljs-type">End</span>(\'action, <span class="hljs-type">Rx</span>.<span class="hljs-type">ReplaySubject</span>.t(\'action));</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">type</span> <span class="hljs-symbol">\'action</span> observableAction =\n  | <span class="hljs-type">Start</span> <span class="hljs-keyword">of</span> <span class="hljs-symbol">\'action</span>* <span class="hljs-symbol">\'action</span> <span class="hljs-type">Rx</span>.<span class="hljs-type">ReplaySubject</span>.t\n  | <span class="hljs-type">Update</span> <span class="hljs-keyword">of</span> <span class="hljs-symbol">\'action</span>* <span class="hljs-symbol">\'action</span> <span class="hljs-type">Rx</span>.<span class="hljs-type">ReplaySubject</span>.t\n  | <span class="hljs-type">Error</span> <span class="hljs-keyword">of</span> <span class="hljs-symbol">\'action</span>* <span class="hljs-symbol">\'action</span> <span class="hljs-type">Rx</span>.<span class="hljs-type">ReplaySubject</span>.t\n  | <span class="hljs-type">End</span> <span class="hljs-keyword">of</span> <span class="hljs-symbol">\'action</span>* <span class="hljs-symbol">\'action</span> <span class="hljs-type">Rx</span>.<span class="hljs-type">ReplaySubject</span>.t</code></pre>\n      </div>\n    </div>\n  \n<p><code>observableAction</code> wraps the actions you dispatch into a <code>status</code> variant:</p>\n<ul>\n<li><code>Update()</code> will progagate your action, use it for actions that represent intermediate updates</li>\n<li><code>End()</code> will propagate the action and complete your observable.</li>\n<li><code>Error()</code> will error your obsevable with an action you pass (which you might probably want to handle with <code>Rx.Operators.catchError()</code>)</li>\n</ul>\n<p>As you\'ve also noticed, subject you extract from <code>Start()</code> action is passed along. You normally should not need to send actions directly into it. </p>\n<h3 id="action-chain"><a href="#action-chain" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Action Chain</h3>\n<p>Sequence of actions that will be dispatched to a store that belong to the same side-effect you are modeling, for example:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> signOut = (reductiveObservable: <span class="hljs-type">Rx</span>.<span class="hljs-type">Observable</span>.t((\'action, \'state))) =&gt; <span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span>.({\n  reductiveObservable\n  |&gt; <span class="hljs-type">Utils</span>.<span class="hljs-type">Rx</span>.optMap(<span class="hljs-func"><span class="hljs-keyword">fun</span><span class="hljs-params"> |<span class="hljs-params"> (`SignOutRequest(()),<span class="hljs-params"> _state)<span class="hljs-params"> </span></span></span></span></span>=&gt; <span class="hljs-type">Some</span>(()) | <span class="hljs-number">_</span> =&gt; <span class="hljs-type">None</span>)\n  |&gt; mergeMap(`<span class="hljs-type">Observable</span>((<span class="hljs-number">_</span>, _idx) =&gt; \n    <span class="hljs-type">Rx</span>.merge([|\n      <span class="hljs-type">Rx</span>.of1(`<span class="hljs-type">SignOutStarted</span>(())),\n      <span class="hljs-type">Rx</span>.from(`<span class="hljs-type">Promise</span>(<span class="hljs-type">Amplify</span>.<span class="hljs-type">Auth</span>.signOut(())), ())\n      |&gt; <span class="hljs-built_in">map</span>((_result, _idx) =&gt; `<span class="hljs-type">SignOutCompleted</span>(()))\n      |&gt; catchError((error, _notif) =&gt; <span class="hljs-type">Rx</span>.of1(`<span class="hljs-type">SignOutError</span>(error|.composeError)))\n    |])\n  ))\n})</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> signOut (reductiveObservable : (<span class="hljs-symbol">\'action</span>* <span class="hljs-symbol">\'state</span>) <span class="hljs-type">Rx</span>.<span class="hljs-type">Observable</span>.t) =\n  <span class="hljs-keyword">let</span> <span class="hljs-keyword">open</span> <span class="hljs-type">Rx</span>.<span class="hljs-type">Operators</span> <span class="hljs-keyword">in</span>\n    (reductiveObservable |&gt;\n       (<span class="hljs-type">Utils</span>.<span class="hljs-type">Rx</span>.optMap\n          (<span class="hljs-keyword">function</span>\n           | (<span class="hljs-tag">`SignOutRequest</span> <span class="hljs-literal">()</span>,_state) -&gt; ((<span class="hljs-type">Some</span> (<span class="hljs-literal">()</span>))[@explicit_arity ])\n           | _ -&gt; <span class="hljs-type">None</span>)))\n      |&gt;\n      (mergeMap\n         (<span class="hljs-tag">`Observable</span>\n            (<span class="hljs-keyword">fun</span> _  -&gt;\n               <span class="hljs-keyword">fun</span> _idx  -&gt;\n                 <span class="hljs-type">Rx</span>.merge\n                   [|(<span class="hljs-type">Rx</span>.of1 (<span class="hljs-tag">`SignOutStarted</span> <span class="hljs-literal">()</span>));(((<span class="hljs-type">Rx</span>.from\n                                                        (<span class="hljs-tag">`Promise</span>\n                                                           (<span class="hljs-type">Amplify</span>.<span class="hljs-type">Auth</span>.signOut\n                                                              <span class="hljs-literal">()</span>)) <span class="hljs-literal">()</span>)\n                                                       |&gt;\n                                                       (map\n                                                          (<span class="hljs-keyword">fun</span> _result  -&gt;\n                                                             <span class="hljs-keyword">fun</span> _idx  -&gt;\n                                                               <span class="hljs-tag">`SignOutCompleted</span>\n                                                                 <span class="hljs-literal">()</span>)))\n                                                      |&gt;\n                                                      (catchError\n                                                         (<span class="hljs-keyword">fun</span> error  -&gt;\n                                                            <span class="hljs-keyword">fun</span> _notif  -&gt;\n                                                              <span class="hljs-type">Rx</span>.of1\n                                                                (<span class="hljs-tag">`SignOutError</span>\n                                                                   (error |.\n                                                                    composeError)))))|])))</code></pre>\n      </div>\n    </div>\n  \n<p>This epic models sign-out with a following action chain dispatched to the store: <code>SignOutRequest</code> -> <code>SignOutStarted</code> -> <code>SignOutError/SignOutCompleted</code>.</p>\n<h3 id="additional-notes"><a href="#additional-notes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Additional notes</h3>\n<ul>\n<li>You can still use your original <code>store</code> as you normally do.</li>\n<li>You can also use all reductive APIs on <code>ObservableStore.t</code> instances, replace <code>Reductive.Store.</code> with <code>ObservableStore.</code></li>\n<li>Use <code>observe()</code> with actions you handle in the epics passed to <code>ObservableStore.create</code>, if you call <code>observe()</code> with actions that are not handled in your epics, the observable will never complete, if you need a saveguard against those cases, use <code>Rx.Operators.timeout</code></li>\n</ul>\n<h2 id="hot-reload-of-epics"><a href="#hot-reload-of-epics" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hot Reload of epics</h2>\n<p>This middleware supports react HMR. For HMR bindings defined as: </p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">type</span> hot;\n[@bs.send] external _accept: (hot, string, unit =&gt; unit) =&gt; unit = <span class="hljs-string">"accept"</span>;\n[@bs.send] external _decline: hot =&gt; unit = <span class="hljs-string">"decline"</span>;\n\n[@bs.deriving abstract]\n<span class="hljs-keyword">type</span> module_type = {\n  hot: <span class="hljs-type">Js</span>.<span class="hljs-type">Undefined</span>.t(hot)\n};\n\n[@bs.<span class="hljs-keyword">val</span>]\nexternal module_: module_type = <span class="hljs-string">"module"</span>; \n\n<span class="hljs-keyword">let</span> isAvailable = (module_) =&gt; \n  module_ \n  |. hotGet \n  |. <span class="hljs-type">Js</span>.<span class="hljs-type">Undefined</span>.toOption\n  |. <span class="hljs-type">Belt</span>.<span class="hljs-type">Option</span>.isSome;\n\n<span class="hljs-keyword">let</span> accept = (module_, path, onHotReload) =&gt; {\n  <span class="hljs-keyword">let</span> hmr = module_ |. hotGet;\n  <span class="hljs-keyword">switch</span>(hmr |. <span class="hljs-type">Js</span>.<span class="hljs-type">Undefined</span>.toOption){\n  | <span class="hljs-type">None</span> =&gt; <span class="hljs-type">Console</span>.warn(<span class="hljs-string">"Webpack HMR is not available, accept did nothing"</span>)\n  | <span class="hljs-type">Some</span>(hmr) =&gt; _accept(hmr, path, onHotReload);\n  };\n}\n\n<span class="hljs-keyword">let</span> decline = (module_) =&gt; {\n  <span class="hljs-keyword">let</span> hmr = module_ |. hotGet;\n  <span class="hljs-keyword">switch</span>(hmr |. <span class="hljs-type">Js</span>.<span class="hljs-type">Undefined</span>.toOption){\n  | <span class="hljs-type">None</span> =&gt; <span class="hljs-type">Console</span>.warn(<span class="hljs-string">"Webpack HMR is not available, decline did nothing"</span>)\n  | <span class="hljs-type">Some</span>(hmr) =&gt; { \n    _decline(hmr); \n  }\n  };  \n}</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">967</span>: syntax error, consider adding a `;<span class="hljs-char">\' before</span></code></pre>\n      </div>\n    </div>\n  \n<p>define you epic as <code>Rx.BehaviourSubject</code>:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> hmrEpic = <span class="hljs-type">Rx</span>.<span class="hljs-type">BehaviorSubject</span>.create(<span class="hljs-type">Epics</span>.root);\n<span class="hljs-keyword">let</span> store = storeCreator(\n  ~reducer=<span class="hljs-type">Reducers</span>.root, \n  ~preloadedState=initial, \n  ~enhancer=<span class="hljs-type">ReductiveObservable</span>.middleware(hmrEpic |&gt; <span class="hljs-type">Rx</span>.<span class="hljs-type">BehaviorSubject</span>.asObservable), \n  ());</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> hmrEpic = <span class="hljs-type">Rx</span>.<span class="hljs-type">BehaviorSubject</span>.create <span class="hljs-type">Epics</span>.root\n<span class="hljs-keyword">let</span> store =\n  storeCreator ~reducer:<span class="hljs-type">Reducers</span>.root ~preloadedState:initial\n    ~enhancer:(<span class="hljs-type">ReductiveObservable</span>.middleware\n                 (hmrEpic |&gt; <span class="hljs-type">Rx</span>.<span class="hljs-type">BehaviorSubject</span>.asObservable)) <span class="hljs-literal">()</span></code></pre>\n      </div>\n    </div>\n  \n<p>then using HMR functionality:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">if</span>(<span class="hljs-type">HMR</span>.isAvailable(<span class="hljs-type">HMR</span>.module_)){\n  <span class="hljs-type">HMR</span>.accept(<span class="hljs-type">HMR</span>.module_, <span class="hljs-string">"./lib/js/src/reductive/epics/Epics.bs.js"</span>, () =&gt; {\n    <span class="hljs-keyword">let</span> hotReloadedRootEpic: (<span class="hljs-type">Rx</span>.<span class="hljs-type">Observable</span>.t((\'action, \'state))) =&gt; <span class="hljs-type">Rx</span>.<span class="hljs-type">Observable</span>.t((\'action)) = [%bs.raw <span class="hljs-string">"require(\'reason/reductive/epics/Epics.bs.js\').epic"</span>];\n    \n    <span class="hljs-comment">/**\n     * this is safe ONLY WHEN epics are stateless\n     * given RxJs nature, it\'s easy to introduce implicit states into epics\n     * when using anything utilizing BehaviourSubject/ReplaySubject/shareReplay etc.\n     * be VERY CAREFUL with it as it can lead to unpredictable states when hot reloaded\n     */</span>\n    hmrEpic \n    |&gt; <span class="hljs-type">Rx</span>.<span class="hljs-type">BehaviorSubject</span>.next(hotReloadedRootEpic);\n    <span class="hljs-type">Js</span>.log(<span class="hljs-string">"[HMR] (Store) ReductiveObservable epics hot reloaded"</span>);\n  });\n};</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> _ =\n  <span class="hljs-keyword">if</span> <span class="hljs-type">HMR</span>.isAvailable <span class="hljs-type">HMR</span>.module_\n  <span class="hljs-keyword">then</span>\n    <span class="hljs-type">HMR</span>.accept <span class="hljs-type">HMR</span>.module_ <span class="hljs-string">"./lib/js/src/reductive/epics/Epics.bs.js"</span>\n      (<span class="hljs-keyword">fun</span> <span class="hljs-literal">()</span>  -&gt;\n         <span class="hljs-keyword">let</span> hotReloadedRootEpic:\n           (<span class="hljs-symbol">\'action</span>* <span class="hljs-symbol">\'state</span>) <span class="hljs-type">Rx</span>.<span class="hljs-type">Observable</span>.t -&gt; <span class="hljs-symbol">\'action</span> <span class="hljs-type">Rx</span>.<span class="hljs-type">Observable</span>.t =\n           [%bs.raw <span class="hljs-string">"require(\'reason/reductive/epics/Epics.bs.js\').epic"</span>] <span class="hljs-keyword">in</span>\n         ((hmrEpic)[@ocaml.doc\n                     <span class="hljs-string">"\\n     * this is safe ONLY WHEN epics are stateless\\n     * given RxJs nature, it\'s easy to introduce implicit states into epics\\n     * when using anything utilizing BehaviourSubject/ReplaySubject/shareReplay etc.\\n     * be VERY CAREFUL with it as it can lead to unpredictable states when hot reloaded\\n     "</span>])\n           |&gt; (<span class="hljs-type">Rx</span>.<span class="hljs-type">BehaviorSubject</span>.next hotReloadedRootEpic);\n         <span class="hljs-type">Js</span>.log <span class="hljs-string">"[HMR] (Store) ReductiveObservable epics hot reloaded"</span>)</code></pre>\n      </div>\n    </div>\n  \n',
homepageUrl:"https://github.com/ambientlight/reductive-observable#readme",repositoryUrl:"https://github.com/ambientlight/reductive-observable",npmUrl:"https://www.npmjs.com/package/reductive-observable",issuesUrl:"https://github.com/ambientlight/reductive-observable/issues",slug:"/package/reductive-observable"}},pathContext:{id:"reductive-observable"}}}});
//# sourceMappingURL=path---package-reductive-observable-d386fc07683b2327c155.js.map